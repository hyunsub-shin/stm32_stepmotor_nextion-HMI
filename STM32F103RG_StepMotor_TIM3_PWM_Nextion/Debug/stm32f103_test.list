
stm32f103_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b994  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c18  0800bb80  0800bb80  0001bb80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c798  0800c798  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  0800c798  0800c798  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c798  0800c798  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c798  0800c798  0001c798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c79c  0800c79c  0001c79c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800c7a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c0  20000080  0800c820  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00002000  20000440  0800c820  00020440  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000191c8  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d9d  00000000  00000000  00039271  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001598  00000000  00000000  0003d010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013d8  00000000  00000000  0003e5a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e90f  00000000  00000000  0003f980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ee74  00000000  00000000  0005e28f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ab4fd  00000000  00000000  0007d103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00128600  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067e8  00000000  00000000  00128654  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000080 	.word	0x20000080
 8000204:	00000000 	.word	0x00000000
 8000208:	0800bb64 	.word	0x0800bb64

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000084 	.word	0x20000084
 8000224:	0800bb64 	.word	0x0800bb64

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_dmul>:
 8000238:	b570      	push	{r4, r5, r6, lr}
 800023a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800023e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000242:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000246:	bf1d      	ittte	ne
 8000248:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800024c:	ea94 0f0c 	teqne	r4, ip
 8000250:	ea95 0f0c 	teqne	r5, ip
 8000254:	f000 f8de 	bleq	8000414 <__aeabi_dmul+0x1dc>
 8000258:	442c      	add	r4, r5
 800025a:	ea81 0603 	eor.w	r6, r1, r3
 800025e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000262:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000266:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800026a:	bf18      	it	ne
 800026c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000270:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000274:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000278:	d038      	beq.n	80002ec <__aeabi_dmul+0xb4>
 800027a:	fba0 ce02 	umull	ip, lr, r0, r2
 800027e:	f04f 0500 	mov.w	r5, #0
 8000282:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000286:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800028a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800028e:	f04f 0600 	mov.w	r6, #0
 8000292:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000296:	f09c 0f00 	teq	ip, #0
 800029a:	bf18      	it	ne
 800029c:	f04e 0e01 	orrne.w	lr, lr, #1
 80002a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002ac:	d204      	bcs.n	80002b8 <__aeabi_dmul+0x80>
 80002ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002b2:	416d      	adcs	r5, r5
 80002b4:	eb46 0606 	adc.w	r6, r6, r6
 80002b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002d0:	bf88      	it	hi
 80002d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002d6:	d81e      	bhi.n	8000316 <__aeabi_dmul+0xde>
 80002d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002dc:	bf08      	it	eq
 80002de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002e2:	f150 0000 	adcs.w	r0, r0, #0
 80002e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002f0:	ea46 0101 	orr.w	r1, r6, r1
 80002f4:	ea40 0002 	orr.w	r0, r0, r2
 80002f8:	ea81 0103 	eor.w	r1, r1, r3
 80002fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000300:	bfc2      	ittt	gt
 8000302:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000306:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800030a:	bd70      	popgt	{r4, r5, r6, pc}
 800030c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000310:	f04f 0e00 	mov.w	lr, #0
 8000314:	3c01      	subs	r4, #1
 8000316:	f300 80ab 	bgt.w	8000470 <__aeabi_dmul+0x238>
 800031a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800031e:	bfde      	ittt	le
 8000320:	2000      	movle	r0, #0
 8000322:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000326:	bd70      	pople	{r4, r5, r6, pc}
 8000328:	f1c4 0400 	rsb	r4, r4, #0
 800032c:	3c20      	subs	r4, #32
 800032e:	da35      	bge.n	800039c <__aeabi_dmul+0x164>
 8000330:	340c      	adds	r4, #12
 8000332:	dc1b      	bgt.n	800036c <__aeabi_dmul+0x134>
 8000334:	f104 0414 	add.w	r4, r4, #20
 8000338:	f1c4 0520 	rsb	r5, r4, #32
 800033c:	fa00 f305 	lsl.w	r3, r0, r5
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f205 	lsl.w	r2, r1, r5
 8000348:	ea40 0002 	orr.w	r0, r0, r2
 800034c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000350:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000354:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000358:	fa21 f604 	lsr.w	r6, r1, r4
 800035c:	eb42 0106 	adc.w	r1, r2, r6
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f1c4 040c 	rsb	r4, r4, #12
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f304 	lsl.w	r3, r0, r4
 8000378:	fa20 f005 	lsr.w	r0, r0, r5
 800037c:	fa01 f204 	lsl.w	r2, r1, r4
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000388:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000394:	bf08      	it	eq
 8000396:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800039a:	bd70      	pop	{r4, r5, r6, pc}
 800039c:	f1c4 0520 	rsb	r5, r4, #32
 80003a0:	fa00 f205 	lsl.w	r2, r0, r5
 80003a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80003a8:	fa20 f304 	lsr.w	r3, r0, r4
 80003ac:	fa01 f205 	lsl.w	r2, r1, r5
 80003b0:	ea43 0302 	orr.w	r3, r3, r2
 80003b4:	fa21 f004 	lsr.w	r0, r1, r4
 80003b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003bc:	fa21 f204 	lsr.w	r2, r1, r4
 80003c0:	ea20 0002 	bic.w	r0, r0, r2
 80003c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f094 0f00 	teq	r4, #0
 80003d8:	d10f      	bne.n	80003fa <__aeabi_dmul+0x1c2>
 80003da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003de:	0040      	lsls	r0, r0, #1
 80003e0:	eb41 0101 	adc.w	r1, r1, r1
 80003e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3c01      	subeq	r4, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1a6>
 80003ee:	ea41 0106 	orr.w	r1, r1, r6
 80003f2:	f095 0f00 	teq	r5, #0
 80003f6:	bf18      	it	ne
 80003f8:	4770      	bxne	lr
 80003fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003fe:	0052      	lsls	r2, r2, #1
 8000400:	eb43 0303 	adc.w	r3, r3, r3
 8000404:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000408:	bf08      	it	eq
 800040a:	3d01      	subeq	r5, #1
 800040c:	d0f7      	beq.n	80003fe <__aeabi_dmul+0x1c6>
 800040e:	ea43 0306 	orr.w	r3, r3, r6
 8000412:	4770      	bx	lr
 8000414:	ea94 0f0c 	teq	r4, ip
 8000418:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800041c:	bf18      	it	ne
 800041e:	ea95 0f0c 	teqne	r5, ip
 8000422:	d00c      	beq.n	800043e <__aeabi_dmul+0x206>
 8000424:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000428:	bf18      	it	ne
 800042a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042e:	d1d1      	bne.n	80003d4 <__aeabi_dmul+0x19c>
 8000430:	ea81 0103 	eor.w	r1, r1, r3
 8000434:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000438:	f04f 0000 	mov.w	r0, #0
 800043c:	bd70      	pop	{r4, r5, r6, pc}
 800043e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000442:	bf06      	itte	eq
 8000444:	4610      	moveq	r0, r2
 8000446:	4619      	moveq	r1, r3
 8000448:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800044c:	d019      	beq.n	8000482 <__aeabi_dmul+0x24a>
 800044e:	ea94 0f0c 	teq	r4, ip
 8000452:	d102      	bne.n	800045a <__aeabi_dmul+0x222>
 8000454:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000458:	d113      	bne.n	8000482 <__aeabi_dmul+0x24a>
 800045a:	ea95 0f0c 	teq	r5, ip
 800045e:	d105      	bne.n	800046c <__aeabi_dmul+0x234>
 8000460:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000464:	bf1c      	itt	ne
 8000466:	4610      	movne	r0, r2
 8000468:	4619      	movne	r1, r3
 800046a:	d10a      	bne.n	8000482 <__aeabi_dmul+0x24a>
 800046c:	ea81 0103 	eor.w	r1, r1, r3
 8000470:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000474:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd70      	pop	{r4, r5, r6, pc}
 8000482:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000486:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800048a:	bd70      	pop	{r4, r5, r6, pc}

0800048c <__aeabi_fmul>:
 800048c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000490:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000494:	bf1e      	ittt	ne
 8000496:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800049a:	ea92 0f0c 	teqne	r2, ip
 800049e:	ea93 0f0c 	teqne	r3, ip
 80004a2:	d06f      	beq.n	8000584 <__aeabi_fmul+0xf8>
 80004a4:	441a      	add	r2, r3
 80004a6:	ea80 0c01 	eor.w	ip, r0, r1
 80004aa:	0240      	lsls	r0, r0, #9
 80004ac:	bf18      	it	ne
 80004ae:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80004b2:	d01e      	beq.n	80004f2 <__aeabi_fmul+0x66>
 80004b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80004b8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80004bc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80004c0:	fba0 3101 	umull	r3, r1, r0, r1
 80004c4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80004c8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80004cc:	bf3e      	ittt	cc
 80004ce:	0049      	lslcc	r1, r1, #1
 80004d0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80004d4:	005b      	lslcc	r3, r3, #1
 80004d6:	ea40 0001 	orr.w	r0, r0, r1
 80004da:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80004de:	2afd      	cmp	r2, #253	; 0xfd
 80004e0:	d81d      	bhi.n	800051e <__aeabi_fmul+0x92>
 80004e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80004e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80004ea:	bf08      	it	eq
 80004ec:	f020 0001 	biceq.w	r0, r0, #1
 80004f0:	4770      	bx	lr
 80004f2:	f090 0f00 	teq	r0, #0
 80004f6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80004fa:	bf08      	it	eq
 80004fc:	0249      	lsleq	r1, r1, #9
 80004fe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000502:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000506:	3a7f      	subs	r2, #127	; 0x7f
 8000508:	bfc2      	ittt	gt
 800050a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800050e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000512:	4770      	bxgt	lr
 8000514:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000518:	f04f 0300 	mov.w	r3, #0
 800051c:	3a01      	subs	r2, #1
 800051e:	dc5d      	bgt.n	80005dc <__aeabi_fmul+0x150>
 8000520:	f112 0f19 	cmn.w	r2, #25
 8000524:	bfdc      	itt	le
 8000526:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800052a:	4770      	bxle	lr
 800052c:	f1c2 0200 	rsb	r2, r2, #0
 8000530:	0041      	lsls	r1, r0, #1
 8000532:	fa21 f102 	lsr.w	r1, r1, r2
 8000536:	f1c2 0220 	rsb	r2, r2, #32
 800053a:	fa00 fc02 	lsl.w	ip, r0, r2
 800053e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000542:	f140 0000 	adc.w	r0, r0, #0
 8000546:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800054a:	bf08      	it	eq
 800054c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000550:	4770      	bx	lr
 8000552:	f092 0f00 	teq	r2, #0
 8000556:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800055a:	bf02      	ittt	eq
 800055c:	0040      	lsleq	r0, r0, #1
 800055e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000562:	3a01      	subeq	r2, #1
 8000564:	d0f9      	beq.n	800055a <__aeabi_fmul+0xce>
 8000566:	ea40 000c 	orr.w	r0, r0, ip
 800056a:	f093 0f00 	teq	r3, #0
 800056e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000572:	bf02      	ittt	eq
 8000574:	0049      	lsleq	r1, r1, #1
 8000576:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800057a:	3b01      	subeq	r3, #1
 800057c:	d0f9      	beq.n	8000572 <__aeabi_fmul+0xe6>
 800057e:	ea41 010c 	orr.w	r1, r1, ip
 8000582:	e78f      	b.n	80004a4 <__aeabi_fmul+0x18>
 8000584:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000588:	ea92 0f0c 	teq	r2, ip
 800058c:	bf18      	it	ne
 800058e:	ea93 0f0c 	teqne	r3, ip
 8000592:	d00a      	beq.n	80005aa <__aeabi_fmul+0x11e>
 8000594:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000598:	bf18      	it	ne
 800059a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800059e:	d1d8      	bne.n	8000552 <__aeabi_fmul+0xc6>
 80005a0:	ea80 0001 	eor.w	r0, r0, r1
 80005a4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80005a8:	4770      	bx	lr
 80005aa:	f090 0f00 	teq	r0, #0
 80005ae:	bf17      	itett	ne
 80005b0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80005b4:	4608      	moveq	r0, r1
 80005b6:	f091 0f00 	teqne	r1, #0
 80005ba:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80005be:	d014      	beq.n	80005ea <__aeabi_fmul+0x15e>
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d101      	bne.n	80005ca <__aeabi_fmul+0x13e>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	d10f      	bne.n	80005ea <__aeabi_fmul+0x15e>
 80005ca:	ea93 0f0c 	teq	r3, ip
 80005ce:	d103      	bne.n	80005d8 <__aeabi_fmul+0x14c>
 80005d0:	024b      	lsls	r3, r1, #9
 80005d2:	bf18      	it	ne
 80005d4:	4608      	movne	r0, r1
 80005d6:	d108      	bne.n	80005ea <__aeabi_fmul+0x15e>
 80005d8:	ea80 0001 	eor.w	r0, r0, r1
 80005dc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80005e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005e8:	4770      	bx	lr
 80005ea:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005ee:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80005f2:	4770      	bx	lr

080005f4 <__aeabi_drsub>:
 80005f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e002      	b.n	8000600 <__adddf3>
 80005fa:	bf00      	nop

080005fc <__aeabi_dsub>:
 80005fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000600 <__adddf3>:
 8000600:	b530      	push	{r4, r5, lr}
 8000602:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000606:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800060a:	ea94 0f05 	teq	r4, r5
 800060e:	bf08      	it	eq
 8000610:	ea90 0f02 	teqeq	r0, r2
 8000614:	bf1f      	itttt	ne
 8000616:	ea54 0c00 	orrsne.w	ip, r4, r0
 800061a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800061e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000622:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000626:	f000 80e2 	beq.w	80007ee <__adddf3+0x1ee>
 800062a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800062e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000632:	bfb8      	it	lt
 8000634:	426d      	neglt	r5, r5
 8000636:	dd0c      	ble.n	8000652 <__adddf3+0x52>
 8000638:	442c      	add	r4, r5
 800063a:	ea80 0202 	eor.w	r2, r0, r2
 800063e:	ea81 0303 	eor.w	r3, r1, r3
 8000642:	ea82 0000 	eor.w	r0, r2, r0
 8000646:	ea83 0101 	eor.w	r1, r3, r1
 800064a:	ea80 0202 	eor.w	r2, r0, r2
 800064e:	ea81 0303 	eor.w	r3, r1, r3
 8000652:	2d36      	cmp	r5, #54	; 0x36
 8000654:	bf88      	it	hi
 8000656:	bd30      	pophi	{r4, r5, pc}
 8000658:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800065c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000660:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000664:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000668:	d002      	beq.n	8000670 <__adddf3+0x70>
 800066a:	4240      	negs	r0, r0
 800066c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000670:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000674:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000678:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800067c:	d002      	beq.n	8000684 <__adddf3+0x84>
 800067e:	4252      	negs	r2, r2
 8000680:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000684:	ea94 0f05 	teq	r4, r5
 8000688:	f000 80a7 	beq.w	80007da <__adddf3+0x1da>
 800068c:	f1a4 0401 	sub.w	r4, r4, #1
 8000690:	f1d5 0e20 	rsbs	lr, r5, #32
 8000694:	db0d      	blt.n	80006b2 <__adddf3+0xb2>
 8000696:	fa02 fc0e 	lsl.w	ip, r2, lr
 800069a:	fa22 f205 	lsr.w	r2, r2, r5
 800069e:	1880      	adds	r0, r0, r2
 80006a0:	f141 0100 	adc.w	r1, r1, #0
 80006a4:	fa03 f20e 	lsl.w	r2, r3, lr
 80006a8:	1880      	adds	r0, r0, r2
 80006aa:	fa43 f305 	asr.w	r3, r3, r5
 80006ae:	4159      	adcs	r1, r3
 80006b0:	e00e      	b.n	80006d0 <__adddf3+0xd0>
 80006b2:	f1a5 0520 	sub.w	r5, r5, #32
 80006b6:	f10e 0e20 	add.w	lr, lr, #32
 80006ba:	2a01      	cmp	r2, #1
 80006bc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80006c0:	bf28      	it	cs
 80006c2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80006c6:	fa43 f305 	asr.w	r3, r3, r5
 80006ca:	18c0      	adds	r0, r0, r3
 80006cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80006d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006d4:	d507      	bpl.n	80006e6 <__adddf3+0xe6>
 80006d6:	f04f 0e00 	mov.w	lr, #0
 80006da:	f1dc 0c00 	rsbs	ip, ip, #0
 80006de:	eb7e 0000 	sbcs.w	r0, lr, r0
 80006e2:	eb6e 0101 	sbc.w	r1, lr, r1
 80006e6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80006ea:	d31b      	bcc.n	8000724 <__adddf3+0x124>
 80006ec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80006f0:	d30c      	bcc.n	800070c <__adddf3+0x10c>
 80006f2:	0849      	lsrs	r1, r1, #1
 80006f4:	ea5f 0030 	movs.w	r0, r0, rrx
 80006f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80006fc:	f104 0401 	add.w	r4, r4, #1
 8000700:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000704:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000708:	f080 809a 	bcs.w	8000840 <__adddf3+0x240>
 800070c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000710:	bf08      	it	eq
 8000712:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000716:	f150 0000 	adcs.w	r0, r0, #0
 800071a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071e:	ea41 0105 	orr.w	r1, r1, r5
 8000722:	bd30      	pop	{r4, r5, pc}
 8000724:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000728:	4140      	adcs	r0, r0
 800072a:	eb41 0101 	adc.w	r1, r1, r1
 800072e:	3c01      	subs	r4, #1
 8000730:	bf28      	it	cs
 8000732:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000736:	d2e9      	bcs.n	800070c <__adddf3+0x10c>
 8000738:	f091 0f00 	teq	r1, #0
 800073c:	bf04      	itt	eq
 800073e:	4601      	moveq	r1, r0
 8000740:	2000      	moveq	r0, #0
 8000742:	fab1 f381 	clz	r3, r1
 8000746:	bf08      	it	eq
 8000748:	3320      	addeq	r3, #32
 800074a:	f1a3 030b 	sub.w	r3, r3, #11
 800074e:	f1b3 0220 	subs.w	r2, r3, #32
 8000752:	da0c      	bge.n	800076e <__adddf3+0x16e>
 8000754:	320c      	adds	r2, #12
 8000756:	dd08      	ble.n	800076a <__adddf3+0x16a>
 8000758:	f102 0c14 	add.w	ip, r2, #20
 800075c:	f1c2 020c 	rsb	r2, r2, #12
 8000760:	fa01 f00c 	lsl.w	r0, r1, ip
 8000764:	fa21 f102 	lsr.w	r1, r1, r2
 8000768:	e00c      	b.n	8000784 <__adddf3+0x184>
 800076a:	f102 0214 	add.w	r2, r2, #20
 800076e:	bfd8      	it	le
 8000770:	f1c2 0c20 	rsble	ip, r2, #32
 8000774:	fa01 f102 	lsl.w	r1, r1, r2
 8000778:	fa20 fc0c 	lsr.w	ip, r0, ip
 800077c:	bfdc      	itt	le
 800077e:	ea41 010c 	orrle.w	r1, r1, ip
 8000782:	4090      	lslle	r0, r2
 8000784:	1ae4      	subs	r4, r4, r3
 8000786:	bfa2      	ittt	ge
 8000788:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800078c:	4329      	orrge	r1, r5
 800078e:	bd30      	popge	{r4, r5, pc}
 8000790:	ea6f 0404 	mvn.w	r4, r4
 8000794:	3c1f      	subs	r4, #31
 8000796:	da1c      	bge.n	80007d2 <__adddf3+0x1d2>
 8000798:	340c      	adds	r4, #12
 800079a:	dc0e      	bgt.n	80007ba <__adddf3+0x1ba>
 800079c:	f104 0414 	add.w	r4, r4, #20
 80007a0:	f1c4 0220 	rsb	r2, r4, #32
 80007a4:	fa20 f004 	lsr.w	r0, r0, r4
 80007a8:	fa01 f302 	lsl.w	r3, r1, r2
 80007ac:	ea40 0003 	orr.w	r0, r0, r3
 80007b0:	fa21 f304 	lsr.w	r3, r1, r4
 80007b4:	ea45 0103 	orr.w	r1, r5, r3
 80007b8:	bd30      	pop	{r4, r5, pc}
 80007ba:	f1c4 040c 	rsb	r4, r4, #12
 80007be:	f1c4 0220 	rsb	r2, r4, #32
 80007c2:	fa20 f002 	lsr.w	r0, r0, r2
 80007c6:	fa01 f304 	lsl.w	r3, r1, r4
 80007ca:	ea40 0003 	orr.w	r0, r0, r3
 80007ce:	4629      	mov	r1, r5
 80007d0:	bd30      	pop	{r4, r5, pc}
 80007d2:	fa21 f004 	lsr.w	r0, r1, r4
 80007d6:	4629      	mov	r1, r5
 80007d8:	bd30      	pop	{r4, r5, pc}
 80007da:	f094 0f00 	teq	r4, #0
 80007de:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80007e2:	bf06      	itte	eq
 80007e4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80007e8:	3401      	addeq	r4, #1
 80007ea:	3d01      	subne	r5, #1
 80007ec:	e74e      	b.n	800068c <__adddf3+0x8c>
 80007ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80007f2:	bf18      	it	ne
 80007f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80007f8:	d029      	beq.n	800084e <__adddf3+0x24e>
 80007fa:	ea94 0f05 	teq	r4, r5
 80007fe:	bf08      	it	eq
 8000800:	ea90 0f02 	teqeq	r0, r2
 8000804:	d005      	beq.n	8000812 <__adddf3+0x212>
 8000806:	ea54 0c00 	orrs.w	ip, r4, r0
 800080a:	bf04      	itt	eq
 800080c:	4619      	moveq	r1, r3
 800080e:	4610      	moveq	r0, r2
 8000810:	bd30      	pop	{r4, r5, pc}
 8000812:	ea91 0f03 	teq	r1, r3
 8000816:	bf1e      	ittt	ne
 8000818:	2100      	movne	r1, #0
 800081a:	2000      	movne	r0, #0
 800081c:	bd30      	popne	{r4, r5, pc}
 800081e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000822:	d105      	bne.n	8000830 <__adddf3+0x230>
 8000824:	0040      	lsls	r0, r0, #1
 8000826:	4149      	adcs	r1, r1
 8000828:	bf28      	it	cs
 800082a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800082e:	bd30      	pop	{r4, r5, pc}
 8000830:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000834:	bf3c      	itt	cc
 8000836:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800083a:	bd30      	popcc	{r4, r5, pc}
 800083c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000840:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000844:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd30      	pop	{r4, r5, pc}
 800084e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000852:	bf1a      	itte	ne
 8000854:	4619      	movne	r1, r3
 8000856:	4610      	movne	r0, r2
 8000858:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800085c:	bf1c      	itt	ne
 800085e:	460b      	movne	r3, r1
 8000860:	4602      	movne	r2, r0
 8000862:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000866:	bf06      	itte	eq
 8000868:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800086c:	ea91 0f03 	teqeq	r1, r3
 8000870:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000874:	bd30      	pop	{r4, r5, pc}
 8000876:	bf00      	nop

08000878 <__aeabi_ui2d>:
 8000878:	f090 0f00 	teq	r0, #0
 800087c:	bf04      	itt	eq
 800087e:	2100      	moveq	r1, #0
 8000880:	4770      	bxeq	lr
 8000882:	b530      	push	{r4, r5, lr}
 8000884:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000888:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800088c:	f04f 0500 	mov.w	r5, #0
 8000890:	f04f 0100 	mov.w	r1, #0
 8000894:	e750      	b.n	8000738 <__adddf3+0x138>
 8000896:	bf00      	nop

08000898 <__aeabi_i2d>:
 8000898:	f090 0f00 	teq	r0, #0
 800089c:	bf04      	itt	eq
 800089e:	2100      	moveq	r1, #0
 80008a0:	4770      	bxeq	lr
 80008a2:	b530      	push	{r4, r5, lr}
 80008a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80008a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80008ac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80008b0:	bf48      	it	mi
 80008b2:	4240      	negmi	r0, r0
 80008b4:	f04f 0100 	mov.w	r1, #0
 80008b8:	e73e      	b.n	8000738 <__adddf3+0x138>
 80008ba:	bf00      	nop

080008bc <__aeabi_f2d>:
 80008bc:	0042      	lsls	r2, r0, #1
 80008be:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80008c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80008c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80008ca:	bf1f      	itttt	ne
 80008cc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80008d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80008d4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80008d8:	4770      	bxne	lr
 80008da:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80008de:	bf08      	it	eq
 80008e0:	4770      	bxeq	lr
 80008e2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80008e6:	bf04      	itt	eq
 80008e8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80008ec:	4770      	bxeq	lr
 80008ee:	b530      	push	{r4, r5, lr}
 80008f0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80008f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80008f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80008fc:	e71c      	b.n	8000738 <__adddf3+0x138>
 80008fe:	bf00      	nop

08000900 <__aeabi_ul2d>:
 8000900:	ea50 0201 	orrs.w	r2, r0, r1
 8000904:	bf08      	it	eq
 8000906:	4770      	bxeq	lr
 8000908:	b530      	push	{r4, r5, lr}
 800090a:	f04f 0500 	mov.w	r5, #0
 800090e:	e00a      	b.n	8000926 <__aeabi_l2d+0x16>

08000910 <__aeabi_l2d>:
 8000910:	ea50 0201 	orrs.w	r2, r0, r1
 8000914:	bf08      	it	eq
 8000916:	4770      	bxeq	lr
 8000918:	b530      	push	{r4, r5, lr}
 800091a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800091e:	d502      	bpl.n	8000926 <__aeabi_l2d+0x16>
 8000920:	4240      	negs	r0, r0
 8000922:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000926:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800092a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800092e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000932:	f43f aed8 	beq.w	80006e6 <__adddf3+0xe6>
 8000936:	f04f 0203 	mov.w	r2, #3
 800093a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800093e:	bf18      	it	ne
 8000940:	3203      	addne	r2, #3
 8000942:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000946:	bf18      	it	ne
 8000948:	3203      	addne	r2, #3
 800094a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800094e:	f1c2 0320 	rsb	r3, r2, #32
 8000952:	fa00 fc03 	lsl.w	ip, r0, r3
 8000956:	fa20 f002 	lsr.w	r0, r0, r2
 800095a:	fa01 fe03 	lsl.w	lr, r1, r3
 800095e:	ea40 000e 	orr.w	r0, r0, lr
 8000962:	fa21 f102 	lsr.w	r1, r1, r2
 8000966:	4414      	add	r4, r2
 8000968:	e6bd      	b.n	80006e6 <__adddf3+0xe6>
 800096a:	bf00      	nop

0800096c <__aeabi_d2uiz>:
 800096c:	004a      	lsls	r2, r1, #1
 800096e:	d211      	bcs.n	8000994 <__aeabi_d2uiz+0x28>
 8000970:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000974:	d211      	bcs.n	800099a <__aeabi_d2uiz+0x2e>
 8000976:	d50d      	bpl.n	8000994 <__aeabi_d2uiz+0x28>
 8000978:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800097c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000980:	d40e      	bmi.n	80009a0 <__aeabi_d2uiz+0x34>
 8000982:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000986:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800098a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800098e:	fa23 f002 	lsr.w	r0, r3, r2
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d102      	bne.n	80009a6 <__aeabi_d2uiz+0x3a>
 80009a0:	f04f 30ff 	mov.w	r0, #4294967295
 80009a4:	4770      	bx	lr
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	4770      	bx	lr

080009ac <__aeabi_d2f>:
 80009ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009b4:	bf24      	itt	cs
 80009b6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009ba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009be:	d90d      	bls.n	80009dc <__aeabi_d2f+0x30>
 80009c0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009c4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009cc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009d4:	bf08      	it	eq
 80009d6:	f020 0001 	biceq.w	r0, r0, #1
 80009da:	4770      	bx	lr
 80009dc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e0:	d121      	bne.n	8000a26 <__aeabi_d2f+0x7a>
 80009e2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009e6:	bfbc      	itt	lt
 80009e8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009ec:	4770      	bxlt	lr
 80009ee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009f6:	f1c2 0218 	rsb	r2, r2, #24
 80009fa:	f1c2 0c20 	rsb	ip, r2, #32
 80009fe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a02:	fa20 f002 	lsr.w	r0, r0, r2
 8000a06:	bf18      	it	ne
 8000a08:	f040 0001 	orrne.w	r0, r0, #1
 8000a0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a18:	ea40 000c 	orr.w	r0, r0, ip
 8000a1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a24:	e7cc      	b.n	80009c0 <__aeabi_d2f+0x14>
 8000a26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a2a:	d107      	bne.n	8000a3c <__aeabi_d2f+0x90>
 8000a2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a30:	bf1e      	ittt	ne
 8000a32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a3a:	4770      	bxne	lr
 8000a3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_frsub>:
 8000a4c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a50:	e002      	b.n	8000a58 <__addsf3>
 8000a52:	bf00      	nop

08000a54 <__aeabi_fsub>:
 8000a54:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a58 <__addsf3>:
 8000a58:	0042      	lsls	r2, r0, #1
 8000a5a:	bf1f      	itttt	ne
 8000a5c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a60:	ea92 0f03 	teqne	r2, r3
 8000a64:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a68:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a6c:	d06a      	beq.n	8000b44 <__addsf3+0xec>
 8000a6e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a72:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a76:	bfc1      	itttt	gt
 8000a78:	18d2      	addgt	r2, r2, r3
 8000a7a:	4041      	eorgt	r1, r0
 8000a7c:	4048      	eorgt	r0, r1
 8000a7e:	4041      	eorgt	r1, r0
 8000a80:	bfb8      	it	lt
 8000a82:	425b      	neglt	r3, r3
 8000a84:	2b19      	cmp	r3, #25
 8000a86:	bf88      	it	hi
 8000a88:	4770      	bxhi	lr
 8000a8a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a8e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a92:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a96:	bf18      	it	ne
 8000a98:	4240      	negne	r0, r0
 8000a9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000aa2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000aa6:	bf18      	it	ne
 8000aa8:	4249      	negne	r1, r1
 8000aaa:	ea92 0f03 	teq	r2, r3
 8000aae:	d03f      	beq.n	8000b30 <__addsf3+0xd8>
 8000ab0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ab4:	fa41 fc03 	asr.w	ip, r1, r3
 8000ab8:	eb10 000c 	adds.w	r0, r0, ip
 8000abc:	f1c3 0320 	rsb	r3, r3, #32
 8000ac0:	fa01 f103 	lsl.w	r1, r1, r3
 8000ac4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ac8:	d502      	bpl.n	8000ad0 <__addsf3+0x78>
 8000aca:	4249      	negs	r1, r1
 8000acc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ad0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ad4:	d313      	bcc.n	8000afe <__addsf3+0xa6>
 8000ad6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ada:	d306      	bcc.n	8000aea <__addsf3+0x92>
 8000adc:	0840      	lsrs	r0, r0, #1
 8000ade:	ea4f 0131 	mov.w	r1, r1, rrx
 8000ae2:	f102 0201 	add.w	r2, r2, #1
 8000ae6:	2afe      	cmp	r2, #254	; 0xfe
 8000ae8:	d251      	bcs.n	8000b8e <__addsf3+0x136>
 8000aea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000aee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000af2:	bf08      	it	eq
 8000af4:	f020 0001 	biceq.w	r0, r0, #1
 8000af8:	ea40 0003 	orr.w	r0, r0, r3
 8000afc:	4770      	bx	lr
 8000afe:	0049      	lsls	r1, r1, #1
 8000b00:	eb40 0000 	adc.w	r0, r0, r0
 8000b04:	3a01      	subs	r2, #1
 8000b06:	bf28      	it	cs
 8000b08:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b0c:	d2ed      	bcs.n	8000aea <__addsf3+0x92>
 8000b0e:	fab0 fc80 	clz	ip, r0
 8000b12:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b16:	ebb2 020c 	subs.w	r2, r2, ip
 8000b1a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b1e:	bfaa      	itet	ge
 8000b20:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b24:	4252      	neglt	r2, r2
 8000b26:	4318      	orrge	r0, r3
 8000b28:	bfbc      	itt	lt
 8000b2a:	40d0      	lsrlt	r0, r2
 8000b2c:	4318      	orrlt	r0, r3
 8000b2e:	4770      	bx	lr
 8000b30:	f092 0f00 	teq	r2, #0
 8000b34:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b38:	bf06      	itte	eq
 8000b3a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b3e:	3201      	addeq	r2, #1
 8000b40:	3b01      	subne	r3, #1
 8000b42:	e7b5      	b.n	8000ab0 <__addsf3+0x58>
 8000b44:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b4c:	bf18      	it	ne
 8000b4e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b52:	d021      	beq.n	8000b98 <__addsf3+0x140>
 8000b54:	ea92 0f03 	teq	r2, r3
 8000b58:	d004      	beq.n	8000b64 <__addsf3+0x10c>
 8000b5a:	f092 0f00 	teq	r2, #0
 8000b5e:	bf08      	it	eq
 8000b60:	4608      	moveq	r0, r1
 8000b62:	4770      	bx	lr
 8000b64:	ea90 0f01 	teq	r0, r1
 8000b68:	bf1c      	itt	ne
 8000b6a:	2000      	movne	r0, #0
 8000b6c:	4770      	bxne	lr
 8000b6e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b72:	d104      	bne.n	8000b7e <__addsf3+0x126>
 8000b74:	0040      	lsls	r0, r0, #1
 8000b76:	bf28      	it	cs
 8000b78:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b7c:	4770      	bx	lr
 8000b7e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b82:	bf3c      	itt	cc
 8000b84:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b88:	4770      	bxcc	lr
 8000b8a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b8e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b96:	4770      	bx	lr
 8000b98:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b9c:	bf16      	itet	ne
 8000b9e:	4608      	movne	r0, r1
 8000ba0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ba4:	4601      	movne	r1, r0
 8000ba6:	0242      	lsls	r2, r0, #9
 8000ba8:	bf06      	itte	eq
 8000baa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bae:	ea90 0f01 	teqeq	r0, r1
 8000bb2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_ui2f>:
 8000bb8:	f04f 0300 	mov.w	r3, #0
 8000bbc:	e004      	b.n	8000bc8 <__aeabi_i2f+0x8>
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_i2f>:
 8000bc0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000bc4:	bf48      	it	mi
 8000bc6:	4240      	negmi	r0, r0
 8000bc8:	ea5f 0c00 	movs.w	ip, r0
 8000bcc:	bf08      	it	eq
 8000bce:	4770      	bxeq	lr
 8000bd0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000bd4:	4601      	mov	r1, r0
 8000bd6:	f04f 0000 	mov.w	r0, #0
 8000bda:	e01c      	b.n	8000c16 <__aeabi_l2f+0x2a>

08000bdc <__aeabi_ul2f>:
 8000bdc:	ea50 0201 	orrs.w	r2, r0, r1
 8000be0:	bf08      	it	eq
 8000be2:	4770      	bxeq	lr
 8000be4:	f04f 0300 	mov.w	r3, #0
 8000be8:	e00a      	b.n	8000c00 <__aeabi_l2f+0x14>
 8000bea:	bf00      	nop

08000bec <__aeabi_l2f>:
 8000bec:	ea50 0201 	orrs.w	r2, r0, r1
 8000bf0:	bf08      	it	eq
 8000bf2:	4770      	bxeq	lr
 8000bf4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000bf8:	d502      	bpl.n	8000c00 <__aeabi_l2f+0x14>
 8000bfa:	4240      	negs	r0, r0
 8000bfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c00:	ea5f 0c01 	movs.w	ip, r1
 8000c04:	bf02      	ittt	eq
 8000c06:	4684      	moveq	ip, r0
 8000c08:	4601      	moveq	r1, r0
 8000c0a:	2000      	moveq	r0, #0
 8000c0c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c10:	bf08      	it	eq
 8000c12:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c16:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c1a:	fabc f28c 	clz	r2, ip
 8000c1e:	3a08      	subs	r2, #8
 8000c20:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c24:	db10      	blt.n	8000c48 <__aeabi_l2f+0x5c>
 8000c26:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c2a:	4463      	add	r3, ip
 8000c2c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c30:	f1c2 0220 	rsb	r2, r2, #32
 8000c34:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c38:	fa20 f202 	lsr.w	r2, r0, r2
 8000c3c:	eb43 0002 	adc.w	r0, r3, r2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f102 0220 	add.w	r2, r2, #32
 8000c4c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c50:	f1c2 0220 	rsb	r2, r2, #32
 8000c54:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c58:	fa21 f202 	lsr.w	r2, r1, r2
 8000c5c:	eb43 0002 	adc.w	r0, r3, r2
 8000c60:	bf08      	it	eq
 8000c62:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c66:	4770      	bx	lr

08000c68 <__gesf2>:
 8000c68:	f04f 3cff 	mov.w	ip, #4294967295
 8000c6c:	e006      	b.n	8000c7c <__cmpsf2+0x4>
 8000c6e:	bf00      	nop

08000c70 <__lesf2>:
 8000c70:	f04f 0c01 	mov.w	ip, #1
 8000c74:	e002      	b.n	8000c7c <__cmpsf2+0x4>
 8000c76:	bf00      	nop

08000c78 <__cmpsf2>:
 8000c78:	f04f 0c01 	mov.w	ip, #1
 8000c7c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000c80:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c8c:	bf18      	it	ne
 8000c8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c92:	d011      	beq.n	8000cb8 <__cmpsf2+0x40>
 8000c94:	b001      	add	sp, #4
 8000c96:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000c9a:	bf18      	it	ne
 8000c9c:	ea90 0f01 	teqne	r0, r1
 8000ca0:	bf58      	it	pl
 8000ca2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ca6:	bf88      	it	hi
 8000ca8:	17c8      	asrhi	r0, r1, #31
 8000caa:	bf38      	it	cc
 8000cac:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000cb0:	bf18      	it	ne
 8000cb2:	f040 0001 	orrne.w	r0, r0, #1
 8000cb6:	4770      	bx	lr
 8000cb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cbc:	d102      	bne.n	8000cc4 <__cmpsf2+0x4c>
 8000cbe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000cc2:	d105      	bne.n	8000cd0 <__cmpsf2+0x58>
 8000cc4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000cc8:	d1e4      	bne.n	8000c94 <__cmpsf2+0x1c>
 8000cca:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000cce:	d0e1      	beq.n	8000c94 <__cmpsf2+0x1c>
 8000cd0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_cfrcmple>:
 8000cd8:	4684      	mov	ip, r0
 8000cda:	4608      	mov	r0, r1
 8000cdc:	4661      	mov	r1, ip
 8000cde:	e7ff      	b.n	8000ce0 <__aeabi_cfcmpeq>

08000ce0 <__aeabi_cfcmpeq>:
 8000ce0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ce2:	f7ff ffc9 	bl	8000c78 <__cmpsf2>
 8000ce6:	2800      	cmp	r0, #0
 8000ce8:	bf48      	it	mi
 8000cea:	f110 0f00 	cmnmi.w	r0, #0
 8000cee:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000cf0 <__aeabi_fcmpeq>:
 8000cf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cf4:	f7ff fff4 	bl	8000ce0 <__aeabi_cfcmpeq>
 8000cf8:	bf0c      	ite	eq
 8000cfa:	2001      	moveq	r0, #1
 8000cfc:	2000      	movne	r0, #0
 8000cfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d02:	bf00      	nop

08000d04 <__aeabi_fcmplt>:
 8000d04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d08:	f7ff ffea 	bl	8000ce0 <__aeabi_cfcmpeq>
 8000d0c:	bf34      	ite	cc
 8000d0e:	2001      	movcc	r0, #1
 8000d10:	2000      	movcs	r0, #0
 8000d12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d16:	bf00      	nop

08000d18 <__aeabi_fcmple>:
 8000d18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d1c:	f7ff ffe0 	bl	8000ce0 <__aeabi_cfcmpeq>
 8000d20:	bf94      	ite	ls
 8000d22:	2001      	movls	r0, #1
 8000d24:	2000      	movhi	r0, #0
 8000d26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d2a:	bf00      	nop

08000d2c <__aeabi_fcmpge>:
 8000d2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d30:	f7ff ffd2 	bl	8000cd8 <__aeabi_cfrcmple>
 8000d34:	bf94      	ite	ls
 8000d36:	2001      	movls	r0, #1
 8000d38:	2000      	movhi	r0, #0
 8000d3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d3e:	bf00      	nop

08000d40 <__aeabi_fcmpgt>:
 8000d40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d44:	f7ff ffc8 	bl	8000cd8 <__aeabi_cfrcmple>
 8000d48:	bf34      	ite	cc
 8000d4a:	2001      	movcc	r0, #1
 8000d4c:	2000      	movcs	r0, #0
 8000d4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d52:	bf00      	nop

08000d54 <__aeabi_f2iz>:
 8000d54:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d58:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d5c:	d30f      	bcc.n	8000d7e <__aeabi_f2iz+0x2a>
 8000d5e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d62:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d66:	d90d      	bls.n	8000d84 <__aeabi_f2iz+0x30>
 8000d68:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d70:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d74:	fa23 f002 	lsr.w	r0, r3, r2
 8000d78:	bf18      	it	ne
 8000d7a:	4240      	negne	r0, r0
 8000d7c:	4770      	bx	lr
 8000d7e:	f04f 0000 	mov.w	r0, #0
 8000d82:	4770      	bx	lr
 8000d84:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d88:	d101      	bne.n	8000d8e <__aeabi_f2iz+0x3a>
 8000d8a:	0242      	lsls	r2, r0, #9
 8000d8c:	d105      	bne.n	8000d9a <__aeabi_f2iz+0x46>
 8000d8e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000d92:	bf08      	it	eq
 8000d94:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000d98:	4770      	bx	lr
 8000d9a:	f04f 0000 	mov.w	r0, #0
 8000d9e:	4770      	bx	lr

08000da0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000da6:	1d3b      	adds	r3, r7, #4
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000db0:	4b18      	ldr	r3, [pc, #96]	; (8000e14 <MX_ADC1_Init+0x74>)
 8000db2:	4a19      	ldr	r2, [pc, #100]	; (8000e18 <MX_ADC1_Init+0x78>)
 8000db4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000db6:	4b17      	ldr	r3, [pc, #92]	; (8000e14 <MX_ADC1_Init+0x74>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000dbc:	4b15      	ldr	r3, [pc, #84]	; (8000e14 <MX_ADC1_Init+0x74>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dc2:	4b14      	ldr	r3, [pc, #80]	; (8000e14 <MX_ADC1_Init+0x74>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dc8:	4b12      	ldr	r3, [pc, #72]	; (8000e14 <MX_ADC1_Init+0x74>)
 8000dca:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000dce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dd0:	4b10      	ldr	r3, [pc, #64]	; (8000e14 <MX_ADC1_Init+0x74>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000dd6:	4b0f      	ldr	r3, [pc, #60]	; (8000e14 <MX_ADC1_Init+0x74>)
 8000dd8:	2201      	movs	r2, #1
 8000dda:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ddc:	480d      	ldr	r0, [pc, #52]	; (8000e14 <MX_ADC1_Init+0x74>)
 8000dde:	f002 f881 	bl	8002ee4 <HAL_ADC_Init>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000de8:	f001 f9f9 	bl	80021de <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000dec:	2301      	movs	r3, #1
 8000dee:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000df0:	2301      	movs	r3, #1
 8000df2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000df4:	2300      	movs	r3, #0
 8000df6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000df8:	1d3b      	adds	r3, r7, #4
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4805      	ldr	r0, [pc, #20]	; (8000e14 <MX_ADC1_Init+0x74>)
 8000dfe:	f002 fa13 	bl	8003228 <HAL_ADC_ConfigChannel>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000e08:	f001 f9e9 	bl	80021de <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e0c:	bf00      	nop
 8000e0e:	3710      	adds	r7, #16
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000194 	.word	0x20000194
 8000e18:	40012400 	.word	0x40012400

08000e1c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b088      	sub	sp, #32
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e24:	f107 0310 	add.w	r3, r7, #16
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a14      	ldr	r2, [pc, #80]	; (8000e88 <HAL_ADC_MspInit+0x6c>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d121      	bne.n	8000e80 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e3c:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <HAL_ADC_MspInit+0x70>)
 8000e3e:	699b      	ldr	r3, [r3, #24]
 8000e40:	4a12      	ldr	r2, [pc, #72]	; (8000e8c <HAL_ADC_MspInit+0x70>)
 8000e42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e46:	6193      	str	r3, [r2, #24]
 8000e48:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <HAL_ADC_MspInit+0x70>)
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e54:	4b0d      	ldr	r3, [pc, #52]	; (8000e8c <HAL_ADC_MspInit+0x70>)
 8000e56:	699b      	ldr	r3, [r3, #24]
 8000e58:	4a0c      	ldr	r2, [pc, #48]	; (8000e8c <HAL_ADC_MspInit+0x70>)
 8000e5a:	f043 0304 	orr.w	r3, r3, #4
 8000e5e:	6193      	str	r3, [r2, #24]
 8000e60:	4b0a      	ldr	r3, [pc, #40]	; (8000e8c <HAL_ADC_MspInit+0x70>)
 8000e62:	699b      	ldr	r3, [r3, #24]
 8000e64:	f003 0304 	and.w	r3, r3, #4
 8000e68:	60bb      	str	r3, [r7, #8]
 8000e6a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = ADC_POSITION_Pin;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e70:	2303      	movs	r3, #3
 8000e72:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(ADC_POSITION_GPIO_Port, &GPIO_InitStruct);
 8000e74:	f107 0310 	add.w	r3, r7, #16
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4805      	ldr	r0, [pc, #20]	; (8000e90 <HAL_ADC_MspInit+0x74>)
 8000e7c:	f003 fc7e 	bl	800477c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000e80:	bf00      	nop
 8000e82:	3720      	adds	r7, #32
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40012400 	.word	0x40012400
 8000e8c:	40021000 	.word	0x40021000
 8000e90:	40010800 	.word	0x40010800

08000e94 <GetCommand>:
#include <string.h>
#include "usart.h"


int GetCommand(char *command, int len)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	6039      	str	r1, [r7, #0]
	char c;
	int i;
	int numRead;
	int maxRead = len - 1;
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	3b01      	subs	r3, #1
 8000ea2:	60fb      	str	r3, [r7, #12]

	for(numRead = 0, i = 0; numRead < maxRead;)
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	613b      	str	r3, [r7, #16]
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]
 8000eac:	e038      	b.n	8000f20 <GetCommand+0x8c>
	{
		/* try to get a byte from the serial port */
//		c = Uart_Getch() & 0xff;
//		c = RX1_Char();
//		HAL_UART_Receive(&huart1, &c, 1, 0xFFFF);
		c = DebugUart_GetChar();
 8000eae:	f001 ff17 	bl	8002ce0 <DebugUart_GetChar>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	72fb      	strb	r3, [r7, #11]
//			HAL_UART_Transmit(&huart1, '\r', 1, 0xFFFF);
			DebugUart_PutChar('\r');
			DebugUart_PutChar('\n');
			return c;
		}
		if((c == '\r') || (c == '\n')) {
 8000eb6:	7afb      	ldrb	r3, [r7, #11]
 8000eb8:	2b0d      	cmp	r3, #13
 8000eba:	d002      	beq.n	8000ec2 <GetCommand+0x2e>
 8000ebc:	7afb      	ldrb	r3, [r7, #11]
 8000ebe:	2b0a      	cmp	r3, #10
 8000ec0:	d10f      	bne.n	8000ee2 <GetCommand+0x4e>
			command[i++] = '\0';
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	1c5a      	adds	r2, r3, #1
 8000ec6:	617a      	str	r2, [r7, #20]
 8000ec8:	461a      	mov	r2, r3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4413      	add	r3, r2
 8000ece:	2200      	movs	r2, #0
 8000ed0:	701a      	strb	r2, [r3, #0]
//			Uart_SendByte('\n');
//			TX1_Char('\n');
//			TX1_Char('\r');
//			HAL_UART_Transmit(&huart1, '\n', 1, 0xFFFF);
//			HAL_UART_Transmit(&huart1, '\r', 1, 0xFFFF);
			DebugUart_PutChar('\r');
 8000ed2:	200d      	movs	r0, #13
 8000ed4:	f001 ff1e 	bl	8002d14 <DebugUart_PutChar>
			DebugUart_PutChar('\n');
 8000ed8:	200a      	movs	r0, #10
 8000eda:	f001 ff1b 	bl	8002d14 <DebugUart_PutChar>
			return(numRead);
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	e023      	b.n	8000f2a <GetCommand+0x96>
		}
		else if(c == '\b') { /* FIXME: is this backspace? */
 8000ee2:	7afb      	ldrb	r3, [r7, #11]
 8000ee4:	2b08      	cmp	r3, #8
 8000ee6:	d10c      	bne.n	8000f02 <GetCommand+0x6e>
			if(i > 0) {
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	dd18      	ble.n	8000f20 <GetCommand+0x8c>
				i--;
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	3b01      	subs	r3, #1
 8000ef2:	617b      	str	r3, [r7, #20]
				numRead--;
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	3b01      	subs	r3, #1
 8000ef8:	613b      	str	r3, [r7, #16]
				/* cursor one position back. */
//				Uart_Printf("\b \b");
//				TX1_Str("\b \b");
//				HAL_UART_Transmit(&huart1, "\b \b", 3, 0xFFFF);
				DebugUart_PutStr("\b \b");
 8000efa:	480e      	ldr	r0, [pc, #56]	; (8000f34 <GetCommand+0xa0>)
 8000efc:	f001 ff1c 	bl	8002d38 <DebugUart_PutStr>
 8000f00:	e00e      	b.n	8000f20 <GetCommand+0x8c>
			}
		}
		else {
			command[i++] = c;
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	1c5a      	adds	r2, r3, #1
 8000f06:	617a      	str	r2, [r7, #20]
 8000f08:	461a      	mov	r2, r3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	7afa      	ldrb	r2, [r7, #11]
 8000f10:	701a      	strb	r2, [r3, #0]
			numRead++;
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	3301      	adds	r3, #1
 8000f16:	613b      	str	r3, [r7, #16]

			/* print character */
//			Uart_SendByte(c);
//			TX1_Char(c);
//			HAL_UART_Transmit(&huart1, (uint8_t *)&c, 1, 0xFFFF);
			DebugUart_PutChar(c);
 8000f18:	7afb      	ldrb	r3, [r7, #11]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f001 fefa 	bl	8002d14 <DebugUart_PutChar>
	for(numRead = 0, i = 0; numRead < maxRead;)
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	dbc2      	blt.n	8000eae <GetCommand+0x1a>
		}
	}
	return(numRead);
 8000f28:	693b      	ldr	r3, [r7, #16]
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3718      	adds	r7, #24
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	0800bb80 	.word	0x0800bb80

08000f38 <MyStrNCmp>:

int MyStrNCmp(const char *s1, const char *s2, int maxlen)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b087      	sub	sp, #28
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
	int i;

	for(i = 0; i < maxlen; i++) {
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]
 8000f48:	e01f      	b.n	8000f8a <MyStrNCmp+0x52>
		if(s1[i] != s2[i])
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	68fa      	ldr	r2, [r7, #12]
 8000f4e:	4413      	add	r3, r2
 8000f50:	781a      	ldrb	r2, [r3, #0]
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	68b9      	ldr	r1, [r7, #8]
 8000f56:	440b      	add	r3, r1
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	d00a      	beq.n	8000f74 <MyStrNCmp+0x3c>
			return ((int) s1[i]) - ((int) s2[i]);
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	68fa      	ldr	r2, [r7, #12]
 8000f62:	4413      	add	r3, r2
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	4619      	mov	r1, r3
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	68ba      	ldr	r2, [r7, #8]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	1acb      	subs	r3, r1, r3
 8000f72:	e00f      	b.n	8000f94 <MyStrNCmp+0x5c>
		if(s1[i] == 0)
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	68fa      	ldr	r2, [r7, #12]
 8000f78:	4413      	add	r3, r2
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d101      	bne.n	8000f84 <MyStrNCmp+0x4c>
			return 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	e007      	b.n	8000f94 <MyStrNCmp+0x5c>
	for(i = 0; i < maxlen; i++) {
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	3301      	adds	r3, #1
 8000f88:	617b      	str	r3, [r7, #20]
 8000f8a:	697a      	ldr	r2, [r7, #20]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	429a      	cmp	r2, r3
 8000f90:	dbdb      	blt.n	8000f4a <MyStrNCmp+0x12>
	}

	return 0;
 8000f92:	2300      	movs	r3, #0
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	371c      	adds	r7, #28
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bc80      	pop	{r7}
 8000f9c:	4770      	bx	lr
	...

08000fa0 <MX_DAC_Init>:
DAC_HandleTypeDef hdac;
DMA_HandleTypeDef hdma_dac_ch1;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000fa6:	463b      	mov	r3, r7
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000fae:	4b0f      	ldr	r3, [pc, #60]	; (8000fec <MX_DAC_Init+0x4c>)
 8000fb0:	4a0f      	ldr	r2, [pc, #60]	; (8000ff0 <MX_DAC_Init+0x50>)
 8000fb2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000fb4:	480d      	ldr	r0, [pc, #52]	; (8000fec <MX_DAC_Init+0x4c>)
 8000fb6:	f002 fc79 	bl	80038ac <HAL_DAC_Init>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000fc0:	f001 f90d 	bl	80021de <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000fc4:	2304      	movs	r3, #4
 8000fc6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000fcc:	463b      	mov	r3, r7
 8000fce:	2200      	movs	r2, #0
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4806      	ldr	r0, [pc, #24]	; (8000fec <MX_DAC_Init+0x4c>)
 8000fd4:	f002 fd8c 	bl	8003af0 <HAL_DAC_ConfigChannel>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000fde:	f001 f8fe 	bl	80021de <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000208 	.word	0x20000208
 8000ff0:	40007400 	.word	0x40007400

08000ff4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b088      	sub	sp, #32
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	f107 0310 	add.w	r3, r7, #16
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
  if(dacHandle->Instance==DAC)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a29      	ldr	r2, [pc, #164]	; (80010b4 <HAL_DAC_MspInit+0xc0>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d14a      	bne.n	80010aa <HAL_DAC_MspInit+0xb6>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001014:	4b28      	ldr	r3, [pc, #160]	; (80010b8 <HAL_DAC_MspInit+0xc4>)
 8001016:	69db      	ldr	r3, [r3, #28]
 8001018:	4a27      	ldr	r2, [pc, #156]	; (80010b8 <HAL_DAC_MspInit+0xc4>)
 800101a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800101e:	61d3      	str	r3, [r2, #28]
 8001020:	4b25      	ldr	r3, [pc, #148]	; (80010b8 <HAL_DAC_MspInit+0xc4>)
 8001022:	69db      	ldr	r3, [r3, #28]
 8001024:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800102c:	4b22      	ldr	r3, [pc, #136]	; (80010b8 <HAL_DAC_MspInit+0xc4>)
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	4a21      	ldr	r2, [pc, #132]	; (80010b8 <HAL_DAC_MspInit+0xc4>)
 8001032:	f043 0304 	orr.w	r3, r3, #4
 8001036:	6193      	str	r3, [r2, #24]
 8001038:	4b1f      	ldr	r3, [pc, #124]	; (80010b8 <HAL_DAC_MspInit+0xc4>)
 800103a:	699b      	ldr	r3, [r3, #24]
 800103c:	f003 0304 	and.w	r3, r3, #4
 8001040:	60bb      	str	r3, [r7, #8]
 8001042:	68bb      	ldr	r3, [r7, #8]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = DAC_OUT1_Pin;
 8001044:	2310      	movs	r3, #16
 8001046:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001048:	2303      	movs	r3, #3
 800104a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DAC_OUT1_GPIO_Port, &GPIO_InitStruct);
 800104c:	f107 0310 	add.w	r3, r7, #16
 8001050:	4619      	mov	r1, r3
 8001052:	481a      	ldr	r0, [pc, #104]	; (80010bc <HAL_DAC_MspInit+0xc8>)
 8001054:	f003 fb92 	bl	800477c <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA2_Channel3;
 8001058:	4b19      	ldr	r3, [pc, #100]	; (80010c0 <HAL_DAC_MspInit+0xcc>)
 800105a:	4a1a      	ldr	r2, [pc, #104]	; (80010c4 <HAL_DAC_MspInit+0xd0>)
 800105c:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800105e:	4b18      	ldr	r3, [pc, #96]	; (80010c0 <HAL_DAC_MspInit+0xcc>)
 8001060:	2210      	movs	r2, #16
 8001062:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001064:	4b16      	ldr	r3, [pc, #88]	; (80010c0 <HAL_DAC_MspInit+0xcc>)
 8001066:	2200      	movs	r2, #0
 8001068:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800106a:	4b15      	ldr	r3, [pc, #84]	; (80010c0 <HAL_DAC_MspInit+0xcc>)
 800106c:	2280      	movs	r2, #128	; 0x80
 800106e:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001070:	4b13      	ldr	r3, [pc, #76]	; (80010c0 <HAL_DAC_MspInit+0xcc>)
 8001072:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001076:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001078:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <HAL_DAC_MspInit+0xcc>)
 800107a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800107e:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8001080:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <HAL_DAC_MspInit+0xcc>)
 8001082:	2220      	movs	r2, #32
 8001084:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001086:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <HAL_DAC_MspInit+0xcc>)
 8001088:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800108c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 800108e:	480c      	ldr	r0, [pc, #48]	; (80010c0 <HAL_DAC_MspInit+0xcc>)
 8001090:	f002 fe54 	bl	8003d3c <HAL_DMA_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <HAL_DAC_MspInit+0xaa>
    {
      Error_Handler();
 800109a:	f001 f8a0 	bl	80021de <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac_ch1);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a07      	ldr	r2, [pc, #28]	; (80010c0 <HAL_DAC_MspInit+0xcc>)
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	4a06      	ldr	r2, [pc, #24]	; (80010c0 <HAL_DAC_MspInit+0xcc>)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 80010aa:	bf00      	nop
 80010ac:	3720      	adds	r7, #32
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40007400 	.word	0x40007400
 80010b8:	40021000 	.word	0x40021000
 80010bc:	40010800 	.word	0x40010800
 80010c0:	200001c4 	.word	0x200001c4
 80010c4:	40020430 	.word	0x40020430

080010c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010ce:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <MX_DMA_Init+0x38>)
 80010d0:	695b      	ldr	r3, [r3, #20]
 80010d2:	4a0b      	ldr	r2, [pc, #44]	; (8001100 <MX_DMA_Init+0x38>)
 80010d4:	f043 0302 	orr.w	r3, r3, #2
 80010d8:	6153      	str	r3, [r2, #20]
 80010da:	4b09      	ldr	r3, [pc, #36]	; (8001100 <MX_DMA_Init+0x38>)
 80010dc:	695b      	ldr	r3, [r3, #20]
 80010de:	f003 0302 	and.w	r3, r3, #2
 80010e2:	607b      	str	r3, [r7, #4]
 80010e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 80010e6:	2200      	movs	r2, #0
 80010e8:	2100      	movs	r1, #0
 80010ea:	203a      	movs	r0, #58	; 0x3a
 80010ec:	f002 fb8e 	bl	800380c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 80010f0:	203a      	movs	r0, #58	; 0x3a
 80010f2:	f002 fbb7 	bl	8003864 <HAL_NVIC_EnableIRQ>

}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40021000 	.word	0x40021000

08001104 <drv8880_init>:
volatile uint32_t shot_cnt = 1;
uint16_t accel_tbl[TBL_SIZE] = {0};
uint16_t mode = 8;

void drv8880_init()
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
	// Smart Tune mode Enable
	HAL_GPIO_WritePin(M_ATE_GPIO_Port, M_ATE_Pin, GPIO_PIN_SET);
 800110a:	2201      	movs	r2, #1
 800110c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001110:	4829      	ldr	r0, [pc, #164]	; (80011b8 <drv8880_init+0xb4>)
 8001112:	f003 fded 	bl	8004cf0 <HAL_GPIO_WritePin>

	// driver disable
	HAL_GPIO_WritePin(M_EN_GPIO_Port, M_EN_Pin, GPIO_PIN_SET);//GPIO_PIN_RESET);
 8001116:	2201      	movs	r2, #1
 8001118:	2110      	movs	r1, #16
 800111a:	4828      	ldr	r0, [pc, #160]	; (80011bc <drv8880_init+0xb8>)
 800111c:	f003 fde8 	bl	8004cf0 <HAL_GPIO_WritePin>

	// sleep mode
	HAL_GPIO_WritePin(M_nSLEEP_GPIO_Port, M_nSLEEP_Pin, GPIO_PIN_RESET);
 8001120:	2200      	movs	r2, #0
 8001122:	2108      	movs	r1, #8
 8001124:	4825      	ldr	r0, [pc, #148]	; (80011bc <drv8880_init+0xb8>)
 8001126:	f003 fde3 	bl	8004cf0 <HAL_GPIO_WritePin>

	// Microstepping 1/8 step
	HAL_GPIO_WritePin(M_M0_GPIO_Port, M_M0_Pin, GPIO_PIN_RESET);
 800112a:	2200      	movs	r2, #0
 800112c:	2120      	movs	r1, #32
 800112e:	4823      	ldr	r0, [pc, #140]	; (80011bc <drv8880_init+0xb8>)
 8001130:	f003 fdde 	bl	8004cf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M_M1_GPIO_Port, M_M1_Pin, GPIO_PIN_RESET);
 8001134:	2200      	movs	r2, #0
 8001136:	2140      	movs	r1, #64	; 0x40
 8001138:	4820      	ldr	r0, [pc, #128]	; (80011bc <drv8880_init+0xb8>)
 800113a:	f003 fdd9 	bl	8004cf0 <HAL_GPIO_WritePin>

	// Torque 50%
	HAL_GPIO_WritePin(M_TRQ0_GPIO_Port, M_TRQ0_Pin, GPIO_PIN_RESET);
 800113e:	2200      	movs	r2, #0
 8001140:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001144:	481d      	ldr	r0, [pc, #116]	; (80011bc <drv8880_init+0xb8>)
 8001146:	f003 fdd3 	bl	8004cf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M_TRQ1_GPIO_Port, M_TRQ1_Pin, GPIO_PIN_SET);
 800114a:	2201      	movs	r2, #1
 800114c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001150:	481a      	ldr	r0, [pc, #104]	; (80011bc <drv8880_init+0xb8>)
 8001152:	f003 fdcd 	bl	8004cf0 <HAL_GPIO_WritePin>

	// Decay Slow Mode // Mixed mode 30% Fast
	HAL_GPIO_WritePin(M_DEC0_GPIO_Port, M_DEC0_Pin, GPIO_PIN_RESET);//GPIO_PIN_SET);
 8001156:	2200      	movs	r2, #0
 8001158:	2101      	movs	r1, #1
 800115a:	4818      	ldr	r0, [pc, #96]	; (80011bc <drv8880_init+0xb8>)
 800115c:	f003 fdc8 	bl	8004cf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M_DEC1_GPIO_Port, M_DEC1_Pin, GPIO_PIN_RESET);//GPIO_PIN_SET);
 8001160:	2200      	movs	r2, #0
 8001162:	2102      	movs	r1, #2
 8001164:	4815      	ldr	r0, [pc, #84]	; (80011bc <drv8880_init+0xb8>)
 8001166:	f003 fdc3 	bl	8004cf0 <HAL_GPIO_WritePin>

	// Motor Dir
	HAL_GPIO_WritePin(M_DIR_GPIO_Port, M_DIR_Pin, GPIO_PIN_SET);
 800116a:	2201      	movs	r2, #1
 800116c:	2180      	movs	r1, #128	; 0x80
 800116e:	4813      	ldr	r0, [pc, #76]	; (80011bc <drv8880_init+0xb8>)
 8001170:	f003 fdbe 	bl	8004cf0 <HAL_GPIO_WritePin>

	for(int i=0;i<TBL_SIZE;i++)
 8001174:	2300      	movs	r3, #0
 8001176:	607b      	str	r3, [r7, #4]
 8001178:	e015      	b.n	80011a6 <drv8880_init+0xa2>
	{
		accel_tbl[i] = 2100+i*100;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	b29b      	uxth	r3, r3
 800117e:	461a      	mov	r2, r3
 8001180:	0092      	lsls	r2, r2, #2
 8001182:	4413      	add	r3, r2
 8001184:	461a      	mov	r2, r3
 8001186:	0091      	lsls	r1, r2, #2
 8001188:	461a      	mov	r2, r3
 800118a:	460b      	mov	r3, r1
 800118c:	4413      	add	r3, r2
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	b29b      	uxth	r3, r3
 8001192:	f603 0334 	addw	r3, r3, #2100	; 0x834
 8001196:	b299      	uxth	r1, r3
 8001198:	4a09      	ldr	r2, [pc, #36]	; (80011c0 <drv8880_init+0xbc>)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=0;i<TBL_SIZE;i++)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	3301      	adds	r3, #1
 80011a4:	607b      	str	r3, [r7, #4]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2b63      	cmp	r3, #99	; 0x63
 80011aa:	dde6      	ble.n	800117a <drv8880_init+0x76>
//		printf("accel_tbl[i] = %d\n", accel_tbl[i]);
	}
}
 80011ac:	bf00      	nop
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40010800 	.word	0x40010800
 80011bc:	40011000 	.word	0x40011000
 80011c0:	200000a0 	.word	0x200000a0

080011c4 <drv8880_enable>:

void drv8880_enable()
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(M_EN_GPIO_Port, M_EN_Pin, GPIO_PIN_RESET);
 80011c8:	2200      	movs	r2, #0
 80011ca:	2110      	movs	r1, #16
 80011cc:	4806      	ldr	r0, [pc, #24]	; (80011e8 <drv8880_enable+0x24>)
 80011ce:	f003 fd8f 	bl	8004cf0 <HAL_GPIO_WritePin>
//	HAL_Delay(10);

	HAL_GPIO_WritePin(M_nSLEEP_GPIO_Port, M_nSLEEP_Pin, GPIO_PIN_SET);
 80011d2:	2201      	movs	r2, #1
 80011d4:	2108      	movs	r1, #8
 80011d6:	4804      	ldr	r0, [pc, #16]	; (80011e8 <drv8880_enable+0x24>)
 80011d8:	f003 fd8a 	bl	8004cf0 <HAL_GPIO_WritePin>

	drv8880_state = 1;
 80011dc:	4b03      	ldr	r3, [pc, #12]	; (80011ec <drv8880_enable+0x28>)
 80011de:	2201      	movs	r2, #1
 80011e0:	701a      	strb	r2, [r3, #0]
}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40011000 	.word	0x40011000
 80011ec:	2000009c 	.word	0x2000009c

080011f0 <drv8880_disable>:

void drv8880_disable()
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(M_EN_GPIO_Port, M_EN_Pin, GPIO_PIN_SET);
 80011f4:	2201      	movs	r2, #1
 80011f6:	2110      	movs	r1, #16
 80011f8:	4806      	ldr	r0, [pc, #24]	; (8001214 <drv8880_disable+0x24>)
 80011fa:	f003 fd79 	bl	8004cf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M_nSLEEP_GPIO_Port, M_nSLEEP_Pin, GPIO_PIN_RESET);
 80011fe:	2200      	movs	r2, #0
 8001200:	2108      	movs	r1, #8
 8001202:	4804      	ldr	r0, [pc, #16]	; (8001214 <drv8880_disable+0x24>)
 8001204:	f003 fd74 	bl	8004cf0 <HAL_GPIO_WritePin>

	drv8880_state = 0;
 8001208:	4b03      	ldr	r3, [pc, #12]	; (8001218 <drv8880_disable+0x28>)
 800120a:	2200      	movs	r2, #0
 800120c:	701a      	strb	r2, [r3, #0]
}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40011000 	.word	0x40011000
 8001218:	2000009c 	.word	0x2000009c

0800121c <drv8880_dir>:

void drv8880_dir(uint8_t dir)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	71fb      	strb	r3, [r7, #7]
	if(dir == 1)
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d105      	bne.n	8001238 <drv8880_dir+0x1c>
	{
		HAL_GPIO_WritePin(M_DIR_GPIO_Port, M_DIR_Pin, GPIO_PIN_SET);
 800122c:	2201      	movs	r2, #1
 800122e:	2180      	movs	r1, #128	; 0x80
 8001230:	4806      	ldr	r0, [pc, #24]	; (800124c <drv8880_dir+0x30>)
 8001232:	f003 fd5d 	bl	8004cf0 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(M_DIR_GPIO_Port, M_DIR_Pin, GPIO_PIN_RESET);
	}
}
 8001236:	e004      	b.n	8001242 <drv8880_dir+0x26>
		HAL_GPIO_WritePin(M_DIR_GPIO_Port, M_DIR_Pin, GPIO_PIN_RESET);
 8001238:	2200      	movs	r2, #0
 800123a:	2180      	movs	r1, #128	; 0x80
 800123c:	4803      	ldr	r0, [pc, #12]	; (800124c <drv8880_dir+0x30>)
 800123e:	f003 fd57 	bl	8004cf0 <HAL_GPIO_WritePin>
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40011000 	.word	0x40011000

08001250 <drv8880_sleep>:

void drv8880_sleep(uint8_t status)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	71fb      	strb	r3, [r7, #7]
	if(status == 1)
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	2b01      	cmp	r3, #1
 800125e:	d105      	bne.n	800126c <drv8880_sleep+0x1c>
	{
		HAL_GPIO_WritePin(M_nSLEEP_GPIO_Port, M_nSLEEP_Pin, GPIO_PIN_SET);
 8001260:	2201      	movs	r2, #1
 8001262:	2108      	movs	r1, #8
 8001264:	4806      	ldr	r0, [pc, #24]	; (8001280 <drv8880_sleep+0x30>)
 8001266:	f003 fd43 	bl	8004cf0 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(M_nSLEEP_GPIO_Port, M_nSLEEP_Pin, GPIO_PIN_RESET);
	}
}
 800126a:	e004      	b.n	8001276 <drv8880_sleep+0x26>
		HAL_GPIO_WritePin(M_nSLEEP_GPIO_Port, M_nSLEEP_Pin, GPIO_PIN_RESET);
 800126c:	2200      	movs	r2, #0
 800126e:	2108      	movs	r1, #8
 8001270:	4803      	ldr	r0, [pc, #12]	; (8001280 <drv8880_sleep+0x30>)
 8001272:	f003 fd3d 	bl	8004cf0 <HAL_GPIO_WritePin>
}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40011000 	.word	0x40011000

08001284 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b088      	sub	sp, #32
 8001288:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128a:	f107 0310 	add.w	r3, r7, #16
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001298:	4b70      	ldr	r3, [pc, #448]	; (800145c <MX_GPIO_Init+0x1d8>)
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	4a6f      	ldr	r2, [pc, #444]	; (800145c <MX_GPIO_Init+0x1d8>)
 800129e:	f043 0310 	orr.w	r3, r3, #16
 80012a2:	6193      	str	r3, [r2, #24]
 80012a4:	4b6d      	ldr	r3, [pc, #436]	; (800145c <MX_GPIO_Init+0x1d8>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	f003 0310 	and.w	r3, r3, #16
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b0:	4b6a      	ldr	r3, [pc, #424]	; (800145c <MX_GPIO_Init+0x1d8>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	4a69      	ldr	r2, [pc, #420]	; (800145c <MX_GPIO_Init+0x1d8>)
 80012b6:	f043 0304 	orr.w	r3, r3, #4
 80012ba:	6193      	str	r3, [r2, #24]
 80012bc:	4b67      	ldr	r3, [pc, #412]	; (800145c <MX_GPIO_Init+0x1d8>)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	f003 0304 	and.w	r3, r3, #4
 80012c4:	60bb      	str	r3, [r7, #8]
 80012c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c8:	4b64      	ldr	r3, [pc, #400]	; (800145c <MX_GPIO_Init+0x1d8>)
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	4a63      	ldr	r2, [pc, #396]	; (800145c <MX_GPIO_Init+0x1d8>)
 80012ce:	f043 0308 	orr.w	r3, r3, #8
 80012d2:	6193      	str	r3, [r2, #24]
 80012d4:	4b61      	ldr	r3, [pc, #388]	; (800145c <MX_GPIO_Init+0x1d8>)
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	f003 0308 	and.w	r3, r3, #8
 80012dc:	607b      	str	r3, [r7, #4]
 80012de:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012e0:	4b5e      	ldr	r3, [pc, #376]	; (800145c <MX_GPIO_Init+0x1d8>)
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	4a5d      	ldr	r2, [pc, #372]	; (800145c <MX_GPIO_Init+0x1d8>)
 80012e6:	f043 0320 	orr.w	r3, r3, #32
 80012ea:	6193      	str	r3, [r2, #24]
 80012ec:	4b5b      	ldr	r3, [pc, #364]	; (800145c <MX_GPIO_Init+0x1d8>)
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	f003 0320 	and.w	r3, r3, #32
 80012f4:	603b      	str	r3, [r7, #0]
 80012f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STATUS0_Pin|STATUS1_Pin|M_DEC0_Pin|M_DEC1_Pin
 80012f8:	2200      	movs	r2, #0
 80012fa:	f24c 61fb 	movw	r1, #50939	; 0xc6fb
 80012fe:	4858      	ldr	r0, [pc, #352]	; (8001460 <MX_GPIO_Init+0x1dc>)
 8001300:	f003 fcf6 	bl	8004cf0 <HAL_GPIO_WritePin>
                          |M_nSLEEP_Pin|M_EN_Pin|M_M0_Pin|M_M1_Pin
                          |M_DIR_Pin|M_TRQ0_Pin|M_TRQ1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8001304:	2201      	movs	r2, #1
 8001306:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800130a:	4856      	ldr	r0, [pc, #344]	; (8001464 <MX_GPIO_Init+0x1e0>)
 800130c:	f003 fcf0 	bl	8004cf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M_ATE_GPIO_Port, M_ATE_Pin, GPIO_PIN_SET);
 8001310:	2201      	movs	r2, #1
 8001312:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001316:	4854      	ldr	r0, [pc, #336]	; (8001468 <MX_GPIO_Init+0x1e4>)
 8001318:	f003 fcea 	bl	8004cf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = U_LIMIT_Pin;
 800131c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001320:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001322:	4b52      	ldr	r3, [pc, #328]	; (800146c <MX_GPIO_Init+0x1e8>)
 8001324:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(U_LIMIT_GPIO_Port, &GPIO_InitStruct);
 800132a:	f107 0310 	add.w	r3, r7, #16
 800132e:	4619      	mov	r1, r3
 8001330:	484b      	ldr	r0, [pc, #300]	; (8001460 <MX_GPIO_Init+0x1dc>)
 8001332:	f003 fa23 	bl	800477c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = STATUS0_Pin|STATUS1_Pin;
 8001336:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800133a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133c:	2301      	movs	r3, #1
 800133e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001344:	2303      	movs	r3, #3
 8001346:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001348:	f107 0310 	add.w	r3, r7, #16
 800134c:	4619      	mov	r1, r3
 800134e:	4844      	ldr	r0, [pc, #272]	; (8001460 <MX_GPIO_Init+0x1dc>)
 8001350:	f003 fa14 	bl	800477c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = M_DEC0_Pin|M_DEC1_Pin|M_nSLEEP_Pin|M_EN_Pin
 8001354:	f240 63fb 	movw	r3, #1787	; 0x6fb
 8001358:	613b      	str	r3, [r7, #16]
                          |M_M0_Pin|M_M1_Pin|M_DIR_Pin|M_TRQ0_Pin
                          |M_TRQ1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800135a:	2301      	movs	r3, #1
 800135c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001362:	2302      	movs	r3, #2
 8001364:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001366:	f107 0310 	add.w	r3, r7, #16
 800136a:	4619      	mov	r1, r3
 800136c:	483c      	ldr	r0, [pc, #240]	; (8001460 <MX_GPIO_Init+0x1dc>)
 800136e:	f003 fa05 	bl	800477c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = M_FAULTn_Pin|CART_nDET_Pin;
 8001372:	f640 0304 	movw	r3, #2052	; 0x804
 8001376:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001378:	2300      	movs	r3, #0
 800137a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001380:	f107 0310 	add.w	r3, r7, #16
 8001384:	4619      	mov	r1, r3
 8001386:	4836      	ldr	r0, [pc, #216]	; (8001460 <MX_GPIO_Init+0x1dc>)
 8001388:	f003 f9f8 	bl	800477c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin;
 800138c:	2303      	movs	r3, #3
 800138e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001390:	4b37      	ldr	r3, [pc, #220]	; (8001470 <MX_GPIO_Init+0x1ec>)
 8001392:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001398:	f107 0310 	add.w	r3, r7, #16
 800139c:	4619      	mov	r1, r3
 800139e:	4831      	ldr	r0, [pc, #196]	; (8001464 <MX_GPIO_Init+0x1e0>)
 80013a0:	f003 f9ec 	bl	800477c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 80013a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013aa:	2301      	movs	r3, #1
 80013ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013b2:	2303      	movs	r3, #3
 80013b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 80013b6:	f107 0310 	add.w	r3, r7, #16
 80013ba:	4619      	mov	r1, r3
 80013bc:	4829      	ldr	r0, [pc, #164]	; (8001464 <MX_GPIO_Init+0x1e0>)
 80013be:	f003 f9dd 	bl	800477c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M_ATE_Pin;
 80013c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c8:	2301      	movs	r3, #1
 80013ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d0:	2302      	movs	r3, #2
 80013d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(M_ATE_GPIO_Port, &GPIO_InitStruct);
 80013d4:	f107 0310 	add.w	r3, r7, #16
 80013d8:	4619      	mov	r1, r3
 80013da:	4823      	ldr	r0, [pc, #140]	; (8001468 <MX_GPIO_Init+0x1e4>)
 80013dc:	f003 f9ce 	bl	800477c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = L_LIMIT_Pin;
 80013e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80013e6:	4b23      	ldr	r3, [pc, #140]	; (8001474 <MX_GPIO_Init+0x1f0>)
 80013e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(L_LIMIT_GPIO_Port, &GPIO_InitStruct);
 80013ee:	f107 0310 	add.w	r3, r7, #16
 80013f2:	4619      	mov	r1, r3
 80013f4:	481a      	ldr	r0, [pc, #104]	; (8001460 <MX_GPIO_Init+0x1dc>)
 80013f6:	f003 f9c1 	bl	800477c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SHOT_SWn_Pin;
 80013fa:	2304      	movs	r3, #4
 80013fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013fe:	4b1b      	ldr	r3, [pc, #108]	; (800146c <MX_GPIO_Init+0x1e8>)
 8001400:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SHOT_SWn_GPIO_Port, &GPIO_InitStruct);
 8001406:	f107 0310 	add.w	r3, r7, #16
 800140a:	4619      	mov	r1, r3
 800140c:	481a      	ldr	r0, [pc, #104]	; (8001478 <MX_GPIO_Init+0x1f4>)
 800140e:	f003 f9b5 	bl	800477c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001412:	2200      	movs	r2, #0
 8001414:	2100      	movs	r1, #0
 8001416:	2006      	movs	r0, #6
 8001418:	f002 f9f8 	bl	800380c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800141c:	2006      	movs	r0, #6
 800141e:	f002 fa21 	bl	8003864 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001422:	2200      	movs	r2, #0
 8001424:	2100      	movs	r1, #0
 8001426:	2007      	movs	r0, #7
 8001428:	f002 f9f0 	bl	800380c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800142c:	2007      	movs	r0, #7
 800142e:	f002 fa19 	bl	8003864 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 8001432:	2200      	movs	r2, #0
 8001434:	2101      	movs	r1, #1
 8001436:	2008      	movs	r0, #8
 8001438:	f002 f9e8 	bl	800380c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800143c:	2008      	movs	r0, #8
 800143e:	f002 fa11 	bl	8003864 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001442:	2200      	movs	r2, #0
 8001444:	2100      	movs	r1, #0
 8001446:	2028      	movs	r0, #40	; 0x28
 8001448:	f002 f9e0 	bl	800380c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800144c:	2028      	movs	r0, #40	; 0x28
 800144e:	f002 fa09 	bl	8003864 <HAL_NVIC_EnableIRQ>

}
 8001452:	bf00      	nop
 8001454:	3720      	adds	r7, #32
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	40021000 	.word	0x40021000
 8001460:	40011000 	.word	0x40011000
 8001464:	40010c00 	.word	0x40010c00
 8001468:	40010800 	.word	0x40010800
 800146c:	10210000 	.word	0x10210000
 8001470:	10110000 	.word	0x10110000
 8001474:	10310000 	.word	0x10310000
 8001478:	40011400 	.word	0x40011400

0800147c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == L_LIMIT_Pin)
 8001486:	88fb      	ldrh	r3, [r7, #6]
 8001488:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800148c:	d11f      	bne.n	80014ce <HAL_GPIO_EXTI_Callback+0x52>
	{
		if(HAL_GPIO_ReadPin(L_LIMIT_GPIO_Port, L_LIMIT_Pin))
 800148e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001492:	4838      	ldr	r0, [pc, #224]	; (8001574 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001494:	f003 fc06 	bl	8004ca4 <HAL_GPIO_ReadPin>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d005      	beq.n	80014aa <HAL_GPIO_EXTI_Callback+0x2e>
		{// rising edge
			tick_start = HAL_GetTick();
 800149e:	f001 fcf3 	bl	8002e88 <HAL_GetTick>
 80014a2:	4603      	mov	r3, r0
 80014a4:	4a34      	ldr	r2, [pc, #208]	; (8001578 <HAL_GPIO_EXTI_Callback+0xfc>)
 80014a6:	6013      	str	r3, [r2, #0]
	}
	else if(GPIO_Pin == MEMS_INT1_Pin || MEMS_INT2_Pin)
	{

	}
}
 80014a8:	e05f      	b.n	800156a <HAL_GPIO_EXTI_Callback+0xee>
			cnt = 0;
 80014aa:	4b34      	ldr	r3, [pc, #208]	; (800157c <HAL_GPIO_EXTI_Callback+0x100>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
			dir = 1;
 80014b0:	4b33      	ldr	r3, [pc, #204]	; (8001580 <HAL_GPIO_EXTI_Callback+0x104>)
 80014b2:	2201      	movs	r2, #1
 80014b4:	701a      	strb	r2, [r3, #0]
			tbl_index = 0;
 80014b6:	4b33      	ldr	r3, [pc, #204]	; (8001584 <HAL_GPIO_EXTI_Callback+0x108>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	801a      	strh	r2, [r3, #0]
			shot_cnt--;
 80014bc:	4b32      	ldr	r3, [pc, #200]	; (8001588 <HAL_GPIO_EXTI_Callback+0x10c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	3b01      	subs	r3, #1
 80014c2:	4a31      	ldr	r2, [pc, #196]	; (8001588 <HAL_GPIO_EXTI_Callback+0x10c>)
 80014c4:	6013      	str	r3, [r2, #0]
			GPIOC->BSRR = M_DIR_Pin;
 80014c6:	4b2b      	ldr	r3, [pc, #172]	; (8001574 <HAL_GPIO_EXTI_Callback+0xf8>)
 80014c8:	2280      	movs	r2, #128	; 0x80
 80014ca:	611a      	str	r2, [r3, #16]
}
 80014cc:	e04d      	b.n	800156a <HAL_GPIO_EXTI_Callback+0xee>
	else if(GPIO_Pin == U_LIMIT_Pin)
 80014ce:	88fb      	ldrh	r3, [r7, #6]
 80014d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014d4:	d11a      	bne.n	800150c <HAL_GPIO_EXTI_Callback+0x90>
		tick_stop = HAL_GetTick();
 80014d6:	f001 fcd7 	bl	8002e88 <HAL_GetTick>
 80014da:	4603      	mov	r3, r0
 80014dc:	4a2b      	ldr	r2, [pc, #172]	; (800158c <HAL_GPIO_EXTI_Callback+0x110>)
 80014de:	6013      	str	r3, [r2, #0]
		cnt = 0;
 80014e0:	4b26      	ldr	r3, [pc, #152]	; (800157c <HAL_GPIO_EXTI_Callback+0x100>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
		dir = 0;
 80014e6:	4b26      	ldr	r3, [pc, #152]	; (8001580 <HAL_GPIO_EXTI_Callback+0x104>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	701a      	strb	r2, [r3, #0]
		tbl_index = 0;
 80014ec:	4b25      	ldr	r3, [pc, #148]	; (8001584 <HAL_GPIO_EXTI_Callback+0x108>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	801a      	strh	r2, [r3, #0]
		GPIOC->BRR = M_DIR_Pin;
 80014f2:	4b20      	ldr	r3, [pc, #128]	; (8001574 <HAL_GPIO_EXTI_Callback+0xf8>)
 80014f4:	2280      	movs	r2, #128	; 0x80
 80014f6:	615a      	str	r2, [r3, #20]
		printf("tick = %d\n", tick_stop-tick_start);
 80014f8:	4b24      	ldr	r3, [pc, #144]	; (800158c <HAL_GPIO_EXTI_Callback+0x110>)
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	4b1e      	ldr	r3, [pc, #120]	; (8001578 <HAL_GPIO_EXTI_Callback+0xfc>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	4619      	mov	r1, r3
 8001504:	4822      	ldr	r0, [pc, #136]	; (8001590 <HAL_GPIO_EXTI_Callback+0x114>)
 8001506:	f007 fffd 	bl	8009504 <iprintf>
}
 800150a:	e02e      	b.n	800156a <HAL_GPIO_EXTI_Callback+0xee>
	else if(GPIO_Pin == SHOT_SWn_Pin)
 800150c:	88fb      	ldrh	r3, [r7, #6]
 800150e:	2b04      	cmp	r3, #4
 8001510:	d12b      	bne.n	800156a <HAL_GPIO_EXTI_Callback+0xee>
		switch(mode)
 8001512:	4b20      	ldr	r3, [pc, #128]	; (8001594 <HAL_GPIO_EXTI_Callback+0x118>)
 8001514:	881b      	ldrh	r3, [r3, #0]
 8001516:	2b40      	cmp	r3, #64	; 0x40
 8001518:	d019      	beq.n	800154e <HAL_GPIO_EXTI_Callback+0xd2>
 800151a:	2b40      	cmp	r3, #64	; 0x40
 800151c:	dc1c      	bgt.n	8001558 <HAL_GPIO_EXTI_Callback+0xdc>
 800151e:	2b20      	cmp	r3, #32
 8001520:	d010      	beq.n	8001544 <HAL_GPIO_EXTI_Callback+0xc8>
 8001522:	2b20      	cmp	r3, #32
 8001524:	dc18      	bgt.n	8001558 <HAL_GPIO_EXTI_Callback+0xdc>
 8001526:	2b08      	cmp	r3, #8
 8001528:	d002      	beq.n	8001530 <HAL_GPIO_EXTI_Callback+0xb4>
 800152a:	2b10      	cmp	r3, #16
 800152c:	d005      	beq.n	800153a <HAL_GPIO_EXTI_Callback+0xbe>
 800152e:	e013      	b.n	8001558 <HAL_GPIO_EXTI_Callback+0xdc>
				step_cnt = 3333;//1667;// 14K2110Q4
 8001530:	4b19      	ldr	r3, [pc, #100]	; (8001598 <HAL_GPIO_EXTI_Callback+0x11c>)
 8001532:	f640 5205 	movw	r2, #3333	; 0xd05
 8001536:	601a      	str	r2, [r3, #0]
				break;
 8001538:	e00e      	b.n	8001558 <HAL_GPIO_EXTI_Callback+0xdc>
				step_cnt = 6667;//3334;// 14K2110Q4
 800153a:	4b17      	ldr	r3, [pc, #92]	; (8001598 <HAL_GPIO_EXTI_Callback+0x11c>)
 800153c:	f641 220b 	movw	r2, #6667	; 0x1a0b
 8001540:	601a      	str	r2, [r3, #0]
				break;
 8001542:	e009      	b.n	8001558 <HAL_GPIO_EXTI_Callback+0xdc>
				step_cnt = 13334;//6667;// 14K2110Q4
 8001544:	4b14      	ldr	r3, [pc, #80]	; (8001598 <HAL_GPIO_EXTI_Callback+0x11c>)
 8001546:	f243 4216 	movw	r2, #13334	; 0x3416
 800154a:	601a      	str	r2, [r3, #0]
				break;
 800154c:	e004      	b.n	8001558 <HAL_GPIO_EXTI_Callback+0xdc>
				step_cnt = 26668;//13334;// 14K2110Q4
 800154e:	4b12      	ldr	r3, [pc, #72]	; (8001598 <HAL_GPIO_EXTI_Callback+0x11c>)
 8001550:	f646 022c 	movw	r2, #26668	; 0x682c
 8001554:	601a      	str	r2, [r3, #0]
				break;
 8001556:	bf00      	nop
		shot_cnt = 1;
 8001558:	4b0b      	ldr	r3, [pc, #44]	; (8001588 <HAL_GPIO_EXTI_Callback+0x10c>)
 800155a:	2201      	movs	r2, #1
 800155c:	601a      	str	r2, [r3, #0]
		drv8880_enable();
 800155e:	f7ff fe31 	bl	80011c4 <drv8880_enable>
		HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_3);//interrupt priority change EXTI_Line2 interrupt priority 0 -> 1
 8001562:	2108      	movs	r1, #8
 8001564:	480d      	ldr	r0, [pc, #52]	; (800159c <HAL_GPIO_EXTI_Callback+0x120>)
 8001566:	f005 ff91 	bl	800748c <HAL_TIM_PWM_Start_IT>
}
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	40011000 	.word	0x40011000
 8001578:	2000016c 	.word	0x2000016c
 800157c:	20000178 	.word	0x20000178
 8001580:	20000010 	.word	0x20000010
 8001584:	2000017c 	.word	0x2000017c
 8001588:	20000004 	.word	0x20000004
 800158c:	20000170 	.word	0x20000170
 8001590:	0800bb84 	.word	0x0800bb84
 8001594:	20000008 	.word	0x20000008
 8001598:	20000000 	.word	0x20000000
 800159c:	2000031c 	.word	0x2000031c

080015a0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015a4:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <MX_I2C1_Init+0x50>)
 80015a6:	4a13      	ldr	r2, [pc, #76]	; (80015f4 <MX_I2C1_Init+0x54>)
 80015a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80015aa:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <MX_I2C1_Init+0x50>)
 80015ac:	4a12      	ldr	r2, [pc, #72]	; (80015f8 <MX_I2C1_Init+0x58>)
 80015ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015b0:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <MX_I2C1_Init+0x50>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015b6:	4b0e      	ldr	r3, [pc, #56]	; (80015f0 <MX_I2C1_Init+0x50>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015bc:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <MX_I2C1_Init+0x50>)
 80015be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015c4:	4b0a      	ldr	r3, [pc, #40]	; (80015f0 <MX_I2C1_Init+0x50>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015ca:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <MX_I2C1_Init+0x50>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015d0:	4b07      	ldr	r3, [pc, #28]	; (80015f0 <MX_I2C1_Init+0x50>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015d6:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <MX_I2C1_Init+0x50>)
 80015d8:	2200      	movs	r2, #0
 80015da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015dc:	4804      	ldr	r0, [pc, #16]	; (80015f0 <MX_I2C1_Init+0x50>)
 80015de:	f003 fbd1 	bl	8004d84 <HAL_I2C_Init>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015e8:	f000 fdf9 	bl	80021de <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015ec:	bf00      	nop
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	2000021c 	.word	0x2000021c
 80015f4:	40005400 	.word	0x40005400
 80015f8:	000186a0 	.word	0x000186a0

080015fc <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001600:	4b12      	ldr	r3, [pc, #72]	; (800164c <MX_I2C2_Init+0x50>)
 8001602:	4a13      	ldr	r2, [pc, #76]	; (8001650 <MX_I2C2_Init+0x54>)
 8001604:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001606:	4b11      	ldr	r3, [pc, #68]	; (800164c <MX_I2C2_Init+0x50>)
 8001608:	4a12      	ldr	r2, [pc, #72]	; (8001654 <MX_I2C2_Init+0x58>)
 800160a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800160c:	4b0f      	ldr	r3, [pc, #60]	; (800164c <MX_I2C2_Init+0x50>)
 800160e:	2200      	movs	r2, #0
 8001610:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001612:	4b0e      	ldr	r3, [pc, #56]	; (800164c <MX_I2C2_Init+0x50>)
 8001614:	2200      	movs	r2, #0
 8001616:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001618:	4b0c      	ldr	r3, [pc, #48]	; (800164c <MX_I2C2_Init+0x50>)
 800161a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800161e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001620:	4b0a      	ldr	r3, [pc, #40]	; (800164c <MX_I2C2_Init+0x50>)
 8001622:	2200      	movs	r2, #0
 8001624:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001626:	4b09      	ldr	r3, [pc, #36]	; (800164c <MX_I2C2_Init+0x50>)
 8001628:	2200      	movs	r2, #0
 800162a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800162c:	4b07      	ldr	r3, [pc, #28]	; (800164c <MX_I2C2_Init+0x50>)
 800162e:	2200      	movs	r2, #0
 8001630:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001632:	4b06      	ldr	r3, [pc, #24]	; (800164c <MX_I2C2_Init+0x50>)
 8001634:	2200      	movs	r2, #0
 8001636:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001638:	4804      	ldr	r0, [pc, #16]	; (800164c <MX_I2C2_Init+0x50>)
 800163a:	f003 fba3 	bl	8004d84 <HAL_I2C_Init>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001644:	f000 fdcb 	bl	80021de <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001648:	bf00      	nop
 800164a:	bd80      	pop	{r7, pc}
 800164c:	20000270 	.word	0x20000270
 8001650:	40005800 	.word	0x40005800
 8001654:	000186a0 	.word	0x000186a0

08001658 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b08a      	sub	sp, #40	; 0x28
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001660:	f107 0318 	add.w	r3, r7, #24
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a2b      	ldr	r2, [pc, #172]	; (8001720 <HAL_I2C_MspInit+0xc8>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d124      	bne.n	80016c2 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001678:	4b2a      	ldr	r3, [pc, #168]	; (8001724 <HAL_I2C_MspInit+0xcc>)
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	4a29      	ldr	r2, [pc, #164]	; (8001724 <HAL_I2C_MspInit+0xcc>)
 800167e:	f043 0308 	orr.w	r3, r3, #8
 8001682:	6193      	str	r3, [r2, #24]
 8001684:	4b27      	ldr	r3, [pc, #156]	; (8001724 <HAL_I2C_MspInit+0xcc>)
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	f003 0308 	and.w	r3, r3, #8
 800168c:	617b      	str	r3, [r7, #20]
 800168e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001690:	23c0      	movs	r3, #192	; 0xc0
 8001692:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001694:	2312      	movs	r3, #18
 8001696:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001698:	2303      	movs	r3, #3
 800169a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800169c:	f107 0318 	add.w	r3, r7, #24
 80016a0:	4619      	mov	r1, r3
 80016a2:	4821      	ldr	r0, [pc, #132]	; (8001728 <HAL_I2C_MspInit+0xd0>)
 80016a4:	f003 f86a 	bl	800477c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016a8:	4b1e      	ldr	r3, [pc, #120]	; (8001724 <HAL_I2C_MspInit+0xcc>)
 80016aa:	69db      	ldr	r3, [r3, #28]
 80016ac:	4a1d      	ldr	r2, [pc, #116]	; (8001724 <HAL_I2C_MspInit+0xcc>)
 80016ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016b2:	61d3      	str	r3, [r2, #28]
 80016b4:	4b1b      	ldr	r3, [pc, #108]	; (8001724 <HAL_I2C_MspInit+0xcc>)
 80016b6:	69db      	ldr	r3, [r3, #28]
 80016b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016bc:	613b      	str	r3, [r7, #16]
 80016be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80016c0:	e029      	b.n	8001716 <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a19      	ldr	r2, [pc, #100]	; (800172c <HAL_I2C_MspInit+0xd4>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d124      	bne.n	8001716 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016cc:	4b15      	ldr	r3, [pc, #84]	; (8001724 <HAL_I2C_MspInit+0xcc>)
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	4a14      	ldr	r2, [pc, #80]	; (8001724 <HAL_I2C_MspInit+0xcc>)
 80016d2:	f043 0308 	orr.w	r3, r3, #8
 80016d6:	6193      	str	r3, [r2, #24]
 80016d8:	4b12      	ldr	r3, [pc, #72]	; (8001724 <HAL_I2C_MspInit+0xcc>)
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	f003 0308 	and.w	r3, r3, #8
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80016e4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80016e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016ea:	2312      	movs	r3, #18
 80016ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016ee:	2303      	movs	r3, #3
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f2:	f107 0318 	add.w	r3, r7, #24
 80016f6:	4619      	mov	r1, r3
 80016f8:	480b      	ldr	r0, [pc, #44]	; (8001728 <HAL_I2C_MspInit+0xd0>)
 80016fa:	f003 f83f 	bl	800477c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80016fe:	4b09      	ldr	r3, [pc, #36]	; (8001724 <HAL_I2C_MspInit+0xcc>)
 8001700:	69db      	ldr	r3, [r3, #28]
 8001702:	4a08      	ldr	r2, [pc, #32]	; (8001724 <HAL_I2C_MspInit+0xcc>)
 8001704:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001708:	61d3      	str	r3, [r2, #28]
 800170a:	4b06      	ldr	r3, [pc, #24]	; (8001724 <HAL_I2C_MspInit+0xcc>)
 800170c:	69db      	ldr	r3, [r3, #28]
 800170e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001712:	60bb      	str	r3, [r7, #8]
 8001714:	68bb      	ldr	r3, [r7, #8]
}
 8001716:	bf00      	nop
 8001718:	3728      	adds	r7, #40	; 0x28
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40005400 	.word	0x40005400
 8001724:	40021000 	.word	0x40021000
 8001728:	40010c00 	.word	0x40010c00
 800172c:	40005800 	.word	0x40005800

08001730 <read_tca1_reg>:
  }
}

/* USER CODE BEGIN 1 */
uint16_t read_tca1_reg(uint16_t reg_addr)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b088      	sub	sp, #32
 8001734:	af04      	add	r7, sp, #16
 8001736:	4603      	mov	r3, r0
 8001738:	80fb      	strh	r3, [r7, #6]
	uint16_t data = 0;
 800173a:	2300      	movs	r3, #0
 800173c:	81fb      	strh	r3, [r7, #14]

	if(HAL_I2C_Mem_Read(&hi2c2, TCA9539_1, reg_addr, 1, &data, 1, 10) != HAL_OK)
 800173e:	88fa      	ldrh	r2, [r7, #6]
 8001740:	230a      	movs	r3, #10
 8001742:	9302      	str	r3, [sp, #8]
 8001744:	2301      	movs	r3, #1
 8001746:	9301      	str	r3, [sp, #4]
 8001748:	f107 030e 	add.w	r3, r7, #14
 800174c:	9300      	str	r3, [sp, #0]
 800174e:	2301      	movs	r3, #1
 8001750:	21e8      	movs	r1, #232	; 0xe8
 8001752:	4807      	ldr	r0, [pc, #28]	; (8001770 <read_tca1_reg+0x40>)
 8001754:	f003 fde2 	bl	800531c <HAL_I2C_Mem_Read>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d002      	beq.n	8001764 <read_tca1_reg+0x34>
	{
		printf("I2C Read Error...\n");
 800175e:	4805      	ldr	r0, [pc, #20]	; (8001774 <read_tca1_reg+0x44>)
 8001760:	f007 ff56 	bl	8009610 <puts>
	}

	return data;
 8001764:	89fb      	ldrh	r3, [r7, #14]
}
 8001766:	4618      	mov	r0, r3
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	20000270 	.word	0x20000270
 8001774:	0800bb90 	.word	0x0800bb90

08001778 <write_tca1_reg>:

uint16_t write_tca1_reg(uint16_t reg_addr, uint16_t data)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af04      	add	r7, sp, #16
 800177e:	4603      	mov	r3, r0
 8001780:	460a      	mov	r2, r1
 8001782:	80fb      	strh	r3, [r7, #6]
 8001784:	4613      	mov	r3, r2
 8001786:	80bb      	strh	r3, [r7, #4]
	if(HAL_I2C_Mem_Write(&hi2c2, TCA9539_1, reg_addr, 1, &data, 1, 100) != HAL_OK)
 8001788:	88fa      	ldrh	r2, [r7, #6]
 800178a:	2364      	movs	r3, #100	; 0x64
 800178c:	9302      	str	r3, [sp, #8]
 800178e:	2301      	movs	r3, #1
 8001790:	9301      	str	r3, [sp, #4]
 8001792:	1d3b      	adds	r3, r7, #4
 8001794:	9300      	str	r3, [sp, #0]
 8001796:	2301      	movs	r3, #1
 8001798:	21e8      	movs	r1, #232	; 0xe8
 800179a:	4807      	ldr	r0, [pc, #28]	; (80017b8 <write_tca1_reg+0x40>)
 800179c:	f003 fcb8 	bl	8005110 <HAL_I2C_Mem_Write>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d002      	beq.n	80017ac <write_tca1_reg+0x34>
	{
		printf("I2C Write Error...\n");
 80017a6:	4805      	ldr	r0, [pc, #20]	; (80017bc <write_tca1_reg+0x44>)
 80017a8:	f007 ff32 	bl	8009610 <puts>
	}

	return HAL_OK;
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	20000270 	.word	0x20000270
 80017bc:	0800bba4 	.word	0x0800bba4

080017c0 <read_tca2_reg>:

uint16_t read_tca2_reg(uint16_t reg_addr)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b088      	sub	sp, #32
 80017c4:	af04      	add	r7, sp, #16
 80017c6:	4603      	mov	r3, r0
 80017c8:	80fb      	strh	r3, [r7, #6]
	uint16_t data = 0;
 80017ca:	2300      	movs	r3, #0
 80017cc:	81fb      	strh	r3, [r7, #14]

	if(HAL_I2C_Mem_Read(&hi2c2, TCA9539_2, reg_addr, 1, &data, 1, 10) != HAL_OK)
 80017ce:	88fa      	ldrh	r2, [r7, #6]
 80017d0:	230a      	movs	r3, #10
 80017d2:	9302      	str	r3, [sp, #8]
 80017d4:	2301      	movs	r3, #1
 80017d6:	9301      	str	r3, [sp, #4]
 80017d8:	f107 030e 	add.w	r3, r7, #14
 80017dc:	9300      	str	r3, [sp, #0]
 80017de:	2301      	movs	r3, #1
 80017e0:	21ea      	movs	r1, #234	; 0xea
 80017e2:	4807      	ldr	r0, [pc, #28]	; (8001800 <read_tca2_reg+0x40>)
 80017e4:	f003 fd9a 	bl	800531c <HAL_I2C_Mem_Read>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d002      	beq.n	80017f4 <read_tca2_reg+0x34>
	{
		printf("I2C Read Error...\n");
 80017ee:	4805      	ldr	r0, [pc, #20]	; (8001804 <read_tca2_reg+0x44>)
 80017f0:	f007 ff0e 	bl	8009610 <puts>
	}

	return data;
 80017f4:	89fb      	ldrh	r3, [r7, #14]
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3710      	adds	r7, #16
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000270 	.word	0x20000270
 8001804:	0800bb90 	.word	0x0800bb90

08001808 <write_tca2_reg>:

uint16_t write_tca2_reg(uint16_t reg_addr, uint16_t data)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af04      	add	r7, sp, #16
 800180e:	4603      	mov	r3, r0
 8001810:	460a      	mov	r2, r1
 8001812:	80fb      	strh	r3, [r7, #6]
 8001814:	4613      	mov	r3, r2
 8001816:	80bb      	strh	r3, [r7, #4]
	if(HAL_I2C_Mem_Write(&hi2c2, TCA9539_2, reg_addr, 1, &data, 1, 100) != HAL_OK)
 8001818:	88fa      	ldrh	r2, [r7, #6]
 800181a:	2364      	movs	r3, #100	; 0x64
 800181c:	9302      	str	r3, [sp, #8]
 800181e:	2301      	movs	r3, #1
 8001820:	9301      	str	r3, [sp, #4]
 8001822:	1d3b      	adds	r3, r7, #4
 8001824:	9300      	str	r3, [sp, #0]
 8001826:	2301      	movs	r3, #1
 8001828:	21ea      	movs	r1, #234	; 0xea
 800182a:	4807      	ldr	r0, [pc, #28]	; (8001848 <write_tca2_reg+0x40>)
 800182c:	f003 fc70 	bl	8005110 <HAL_I2C_Mem_Write>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d002      	beq.n	800183c <write_tca2_reg+0x34>
	{
		printf("I2C Write Error...\n");
 8001836:	4805      	ldr	r0, [pc, #20]	; (800184c <write_tca2_reg+0x44>)
 8001838:	f007 feea 	bl	8009610 <puts>
	}

	return HAL_OK;
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	20000270 	.word	0x20000270
 800184c:	0800bba4 	.word	0x0800bba4

08001850 <read_eeprom>:

uint16_t read_eeprom(uint16_t addr)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b088      	sub	sp, #32
 8001854:	af04      	add	r7, sp, #16
 8001856:	4603      	mov	r3, r0
 8001858:	80fb      	strh	r3, [r7, #6]
	uint16_t data = 0;
 800185a:	2300      	movs	r3, #0
 800185c:	81fb      	strh	r3, [r7, #14]

	if(HAL_I2C_Mem_Read(&hi2c1, AT24C_ADDR, addr, 2, &data, 1, 100) != HAL_OK)
 800185e:	88fa      	ldrh	r2, [r7, #6]
 8001860:	2364      	movs	r3, #100	; 0x64
 8001862:	9302      	str	r3, [sp, #8]
 8001864:	2301      	movs	r3, #1
 8001866:	9301      	str	r3, [sp, #4]
 8001868:	f107 030e 	add.w	r3, r7, #14
 800186c:	9300      	str	r3, [sp, #0]
 800186e:	2302      	movs	r3, #2
 8001870:	21a0      	movs	r1, #160	; 0xa0
 8001872:	4807      	ldr	r0, [pc, #28]	; (8001890 <read_eeprom+0x40>)
 8001874:	f003 fd52 	bl	800531c <HAL_I2C_Mem_Read>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d002      	beq.n	8001884 <read_eeprom+0x34>
	{
		printf("I2C Read Error...\n");
 800187e:	4805      	ldr	r0, [pc, #20]	; (8001894 <read_eeprom+0x44>)
 8001880:	f007 fec6 	bl	8009610 <puts>
	}

	return data;
 8001884:	89fb      	ldrh	r3, [r7, #14]
}
 8001886:	4618      	mov	r0, r3
 8001888:	3710      	adds	r7, #16
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	2000021c 	.word	0x2000021c
 8001894:	0800bb90 	.word	0x0800bb90

08001898 <write_eeprom>:

uint16_t write_eeprom(uint16_t addr, uint16_t data)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af04      	add	r7, sp, #16
 800189e:	4603      	mov	r3, r0
 80018a0:	460a      	mov	r2, r1
 80018a2:	80fb      	strh	r3, [r7, #6]
 80018a4:	4613      	mov	r3, r2
 80018a6:	80bb      	strh	r3, [r7, #4]
	if(HAL_I2C_Mem_Write(&hi2c1, AT24C_ADDR, addr, 2, &data, 1, 100) != HAL_OK)
 80018a8:	88fa      	ldrh	r2, [r7, #6]
 80018aa:	2364      	movs	r3, #100	; 0x64
 80018ac:	9302      	str	r3, [sp, #8]
 80018ae:	2301      	movs	r3, #1
 80018b0:	9301      	str	r3, [sp, #4]
 80018b2:	1d3b      	adds	r3, r7, #4
 80018b4:	9300      	str	r3, [sp, #0]
 80018b6:	2302      	movs	r3, #2
 80018b8:	21a0      	movs	r1, #160	; 0xa0
 80018ba:	4807      	ldr	r0, [pc, #28]	; (80018d8 <write_eeprom+0x40>)
 80018bc:	f003 fc28 	bl	8005110 <HAL_I2C_Mem_Write>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d002      	beq.n	80018cc <write_eeprom+0x34>
	{
		printf("I2C Write Error...\n");
 80018c6:	4805      	ldr	r0, [pc, #20]	; (80018dc <write_eeprom+0x44>)
 80018c8:	f007 fea2 	bl	8009610 <puts>
	}

	return HAL_OK;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	2000021c 	.word	0x2000021c
 80018dc:	0800bba4 	.word	0x0800bba4

080018e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018e0:	b590      	push	{r4, r7, lr}
 80018e2:	b0c5      	sub	sp, #276	; 0x114
 80018e4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	char commandline[25];
	uint16_t tmp = 0;
 80018e6:	2300      	movs	r3, #0
 80018e8:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
	uint16_t freq = 0;
 80018ec:	2300      	movs	r3, #0
 80018ee:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4

	uint16_t value=0;
 80018f2:	2300      	movs	r3, #0
 80018f4:	f8a7 3102 	strh.w	r3, [r7, #258]	; 0x102
	uint16_t buffer[BUF_SIZE];

	for(int i=0;i<BUF_SIZE;i++)
 80018f8:	2300      	movs	r3, #0
 80018fa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80018fe:	e046      	b.n	800198e <main+0xae>
	{
		value = (uint16_t)rint((sinf(((2*3.141592)/BUF_SIZE)*i)+1)*2048);
 8001900:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 8001904:	f7fe ffc8 	bl	8000898 <__aeabi_i2d>
 8001908:	a3bb      	add	r3, pc, #748	; (adr r3, 8001bf8 <main+0x318>)
 800190a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800190e:	f7fe fc93 	bl	8000238 <__aeabi_dmul>
 8001912:	4602      	mov	r2, r0
 8001914:	460b      	mov	r3, r1
 8001916:	4610      	mov	r0, r2
 8001918:	4619      	mov	r1, r3
 800191a:	f7ff f847 	bl	80009ac <__aeabi_d2f>
 800191e:	4603      	mov	r3, r0
 8001920:	4618      	mov	r0, r3
 8001922:	f009 fb4d 	bl	800afc0 <sinf>
 8001926:	4603      	mov	r3, r0
 8001928:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff f893 	bl	8000a58 <__addsf3>
 8001932:	4603      	mov	r3, r0
 8001934:	f04f 418a 	mov.w	r1, #1157627904	; 0x45000000
 8001938:	4618      	mov	r0, r3
 800193a:	f7fe fda7 	bl	800048c <__aeabi_fmul>
 800193e:	4603      	mov	r3, r0
 8001940:	4618      	mov	r0, r3
 8001942:	f7fe ffbb 	bl	80008bc <__aeabi_f2d>
 8001946:	4602      	mov	r2, r0
 8001948:	460b      	mov	r3, r1
 800194a:	4610      	mov	r0, r2
 800194c:	4619      	mov	r1, r3
 800194e:	f009 faad 	bl	800aeac <rint>
 8001952:	4602      	mov	r2, r0
 8001954:	460b      	mov	r3, r1
 8001956:	4610      	mov	r0, r2
 8001958:	4619      	mov	r1, r3
 800195a:	f7ff f807 	bl	800096c <__aeabi_d2uiz>
 800195e:	4603      	mov	r3, r0
 8001960:	f8a7 3102 	strh.w	r3, [r7, #258]	; 0x102
		buffer[i]=value <4096 ? value : 4095;
 8001964:	f8b7 3102 	ldrh.w	r3, [r7, #258]	; 0x102
 8001968:	f640 72ff 	movw	r2, #4095	; 0xfff
 800196c:	4293      	cmp	r3, r2
 800196e:	bf28      	it	cs
 8001970:	4613      	movcs	r3, r2
 8001972:	b29a      	uxth	r2, r3
 8001974:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	f507 7184 	add.w	r1, r7, #264	; 0x108
 800197e:	440b      	add	r3, r1
 8001980:	f823 2cec 	strh.w	r2, [r3, #-236]
	for(int i=0;i<BUF_SIZE;i++)
 8001984:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001988:	3301      	adds	r3, #1
 800198a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800198e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001992:	2b63      	cmp	r3, #99	; 0x63
 8001994:	ddb4      	ble.n	8001900 <main+0x20>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001996:	f001 fa1f 	bl	8002dd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800199a:	f000 fbc7 	bl	800212c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800199e:	f7ff fc71 	bl	8001284 <MX_GPIO_Init>
  MX_DMA_Init();
 80019a2:	f7ff fb91 	bl	80010c8 <MX_DMA_Init>
  MX_ADC1_Init();
 80019a6:	f7ff f9fb 	bl	8000da0 <MX_ADC1_Init>
  MX_TIM3_Init();
 80019aa:	f000 fdf3 	bl	8002594 <MX_TIM3_Init>
  MX_DAC_Init();
 80019ae:	f7ff faf7 	bl	8000fa0 <MX_DAC_Init>
  MX_I2C1_Init();
 80019b2:	f7ff fdf5 	bl	80015a0 <MX_I2C1_Init>
  MX_SPI2_Init();
 80019b6:	f000 fc23 	bl	8002200 <MX_SPI2_Init>
  MX_TIM6_Init();
 80019ba:	f000 fe45 	bl	8002648 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 80019be:	f000 ffeb 	bl	8002998 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80019c2:	f001 f813 	bl	80029ec <MX_USART2_UART_Init>
  MX_I2C2_Init();
 80019c6:	f7ff fe19 	bl	80015fc <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  printf("\n\nSTM32F103RG Test Ver0.1\n");
 80019ca:	488d      	ldr	r0, [pc, #564]	; (8001c00 <main+0x320>)
 80019cc:	f007 fe20 	bl	8009610 <puts>

  printf(" - SysClk Freq. : %d\n", HAL_RCC_GetSysClockFreq());
 80019d0:	f004 ff72 	bl	80068b8 <HAL_RCC_GetSysClockFreq>
 80019d4:	4603      	mov	r3, r0
 80019d6:	4619      	mov	r1, r3
 80019d8:	488a      	ldr	r0, [pc, #552]	; (8001c04 <main+0x324>)
 80019da:	f007 fd93 	bl	8009504 <iprintf>
  printf(" - HCLK Freq. : %d\n", HAL_RCC_GetHCLKFreq());
 80019de:	f004 ffcb 	bl	8006978 <HAL_RCC_GetHCLKFreq>
 80019e2:	4603      	mov	r3, r0
 80019e4:	4619      	mov	r1, r3
 80019e6:	4888      	ldr	r0, [pc, #544]	; (8001c08 <main+0x328>)
 80019e8:	f007 fd8c 	bl	8009504 <iprintf>
  printf(" - PCLK1 Freq. : %d\n", HAL_RCC_GetPCLK1Freq());
 80019ec:	f004 ffce 	bl	800698c <HAL_RCC_GetPCLK1Freq>
 80019f0:	4603      	mov	r3, r0
 80019f2:	4619      	mov	r1, r3
 80019f4:	4885      	ldr	r0, [pc, #532]	; (8001c0c <main+0x32c>)
 80019f6:	f007 fd85 	bl	8009504 <iprintf>
  printf(" - PCLK2 Freq. : %d\n", HAL_RCC_GetPCLK2Freq());
 80019fa:	f004 ffdb 	bl	80069b4 <HAL_RCC_GetPCLK2Freq>
 80019fe:	4603      	mov	r3, r0
 8001a00:	4619      	mov	r1, r3
 8001a02:	4883      	ldr	r0, [pc, #524]	; (8001c10 <main+0x330>)
 8001a04:	f007 fd7e 	bl	8009504 <iprintf>

  HAL_GPIO_WritePin(STATUS0_GPIO_Port, STATUS0_Pin, GPIO_PIN_SET);
 8001a08:	2201      	movs	r2, #1
 8001a0a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a0e:	4881      	ldr	r0, [pc, #516]	; (8001c14 <main+0x334>)
 8001a10:	f003 f96e 	bl	8004cf0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(STATUS1_GPIO_Port, STATUS1_Pin, GPIO_PIN_RESET);
 8001a14:	2200      	movs	r2, #0
 8001a16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a1a:	487e      	ldr	r0, [pc, #504]	; (8001c14 <main+0x334>)
 8001a1c:	f003 f968 	bl	8004cf0 <HAL_GPIO_WritePin>

  HAL_Delay(100);
 8001a20:	2064      	movs	r0, #100	; 0x64
 8001a22:	f001 fa3b 	bl	8002e9c <HAL_Delay>

  // Step Motor driver initial
  drv8880_init();
 8001a26:	f7ff fb6d 	bl	8001104 <drv8880_init>

  printf("DAC_OUT1 Start...\n");
 8001a2a:	487b      	ldr	r0, [pc, #492]	; (8001c18 <main+0x338>)
 8001a2c:	f007 fdf0 	bl	8009610 <puts>
  /* TIM6 : DAC Trigger */
  HAL_TIM_Base_Start(&htim6);
 8001a30:	487a      	ldr	r0, [pc, #488]	; (8001c1c <main+0x33c>)
 8001a32:	f005 fb7d 	bl	8007130 <HAL_TIM_Base_Start>
//  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)buffer, BUF_SIZE, DAC_ALIGN_12B_R);
 8001a36:	f107 021c 	add.w	r2, r7, #28
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	9300      	str	r3, [sp, #0]
 8001a3e:	2364      	movs	r3, #100	; 0x64
 8001a40:	2100      	movs	r1, #0
 8001a42:	4877      	ldr	r0, [pc, #476]	; (8001c20 <main+0x340>)
 8001a44:	f001 ff62 	bl	800390c <HAL_DAC_Start_DMA>
//  printf("TIM3 OC Start...\n");
//  HAL_TIM_Base_Start_IT(&htim3);
//  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
//  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_2);

  if(HAL_GPIO_ReadPin(L_LIMIT_GPIO_Port, L_LIMIT_Pin))
 8001a48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a4c:	4871      	ldr	r0, [pc, #452]	; (8001c14 <main+0x334>)
 8001a4e:	f003 f929 	bl	8004ca4 <HAL_GPIO_ReadPin>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d009      	beq.n	8001a6c <main+0x18c>
  {
	  motor_dir = 1;
 8001a58:	4b72      	ldr	r3, [pc, #456]	; (8001c24 <main+0x344>)
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	701a      	strb	r2, [r3, #0]
	  printf("motor dir %d\n", motor_dir);
 8001a5e:	4b71      	ldr	r3, [pc, #452]	; (8001c24 <main+0x344>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	4619      	mov	r1, r3
 8001a64:	4870      	ldr	r0, [pc, #448]	; (8001c28 <main+0x348>)
 8001a66:	f007 fd4d 	bl	8009504 <iprintf>
 8001a6a:	e010      	b.n	8001a8e <main+0x1ae>
  }
  else if(HAL_GPIO_ReadPin(U_LIMIT_GPIO_Port, U_LIMIT_Pin))
 8001a6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a70:	4868      	ldr	r0, [pc, #416]	; (8001c14 <main+0x334>)
 8001a72:	f003 f917 	bl	8004ca4 <HAL_GPIO_ReadPin>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d008      	beq.n	8001a8e <main+0x1ae>
  {
	  motor_dir = 0;
 8001a7c:	4b69      	ldr	r3, [pc, #420]	; (8001c24 <main+0x344>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	701a      	strb	r2, [r3, #0]
	  printf("motor dir %d\n", motor_dir);
 8001a82:	4b68      	ldr	r3, [pc, #416]	; (8001c24 <main+0x344>)
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	4619      	mov	r1, r3
 8001a88:	4867      	ldr	r0, [pc, #412]	; (8001c28 <main+0x348>)
 8001a8a:	f007 fd3b 	bl	8009504 <iprintf>
  }

  HAL_UART_Receive_IT(&huart2, nexMessage, 10);
 8001a8e:	220a      	movs	r2, #10
 8001a90:	4966      	ldr	r1, [pc, #408]	; (8001c2c <main+0x34c>)
 8001a92:	4867      	ldr	r0, [pc, #412]	; (8001c30 <main+0x350>)
 8001a94:	f007 f96d 	bl	8008d72 <HAL_UART_Receive_IT>
		HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_3);
	}
*/

	  //If there is no '\n' in Ture Studio, printf will not be printed.
	  DebugUart_PutStr("\nTEST> ");
 8001a98:	4866      	ldr	r0, [pc, #408]	; (8001c34 <main+0x354>)
 8001a9a:	f001 f94d 	bl	8002d38 <DebugUart_PutStr>
	  GetCommand(commandline, 25);
 8001a9e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001aa2:	2119      	movs	r1, #25
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff f9f5 	bl	8000e94 <GetCommand>
	  if(MyStrNCmp(commandline, "led", 3) == 0)
 8001aaa:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001aae:	2203      	movs	r2, #3
 8001ab0:	4961      	ldr	r1, [pc, #388]	; (8001c38 <main+0x358>)
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff fa40 	bl	8000f38 <MyStrNCmp>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d119      	bne.n	8001af2 <main+0x212>
	  {
	  	  sscanf(commandline, "%*s %d", &tmp);
 8001abe:	f107 02e6 	add.w	r2, r7, #230	; 0xe6
 8001ac2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001ac6:	495d      	ldr	r1, [pc, #372]	; (8001c3c <main+0x35c>)
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f007 fda9 	bl	8009620 <siscanf>
	  	  if(tmp==1)
 8001ace:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d106      	bne.n	8001ae4 <main+0x204>
	  		HAL_GPIO_WritePin(STATUS0_GPIO_Port, STATUS0_Pin, GPIO_PIN_SET);
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001adc:	484d      	ldr	r0, [pc, #308]	; (8001c14 <main+0x334>)
 8001ade:	f003 f907 	bl	8004cf0 <HAL_GPIO_WritePin>
 8001ae2:	e7d9      	b.n	8001a98 <main+0x1b8>
	  	  else
	  		  HAL_GPIO_WritePin(STATUS0_GPIO_Port, STATUS0_Pin, GPIO_PIN_RESET);
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001aea:	484a      	ldr	r0, [pc, #296]	; (8001c14 <main+0x334>)
 8001aec:	f003 f900 	bl	8004cf0 <HAL_GPIO_WritePin>
 8001af0:	e7d2      	b.n	8001a98 <main+0x1b8>
	  }
	  else if(MyStrNCmp(commandline, "motor", 5) == 0)
 8001af2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001af6:	2205      	movs	r2, #5
 8001af8:	4951      	ldr	r1, [pc, #324]	; (8001c40 <main+0x360>)
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff fa1c 	bl	8000f38 <MyStrNCmp>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d12b      	bne.n	8001b5e <main+0x27e>
	  {
		  printf("motor step_cnt %d\n", step_cnt);
 8001b06:	4b4f      	ldr	r3, [pc, #316]	; (8001c44 <main+0x364>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	484e      	ldr	r0, [pc, #312]	; (8001c48 <main+0x368>)
 8001b0e:	f007 fcf9 	bl	8009504 <iprintf>
		  HAL_GPIO_WritePin(STATUS1_GPIO_Port, STATUS1_Pin, GPIO_PIN_SET);
 8001b12:	2201      	movs	r2, #1
 8001b14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b18:	483e      	ldr	r0, [pc, #248]	; (8001c14 <main+0x334>)
 8001b1a:	f003 f8e9 	bl	8004cf0 <HAL_GPIO_WritePin>

	  	  sscanf(commandline, "%*s %d", &tmp);
 8001b1e:	f107 02e6 	add.w	r2, r7, #230	; 0xe6
 8001b22:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001b26:	4945      	ldr	r1, [pc, #276]	; (8001c3c <main+0x35c>)
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f007 fd79 	bl	8009620 <siscanf>
	  	  if(tmp==1)
 8001b2e:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d109      	bne.n	8001b4a <main+0x26a>
	  	  {
			  printf("drv8880 enable\n");
 8001b36:	4845      	ldr	r0, [pc, #276]	; (8001c4c <main+0x36c>)
 8001b38:	f007 fd6a 	bl	8009610 <puts>
			  drv8880_enable();
 8001b3c:	f7ff fb42 	bl	80011c4 <drv8880_enable>
			  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_3);
 8001b40:	2108      	movs	r1, #8
 8001b42:	4843      	ldr	r0, [pc, #268]	; (8001c50 <main+0x370>)
 8001b44:	f005 fca2 	bl	800748c <HAL_TIM_PWM_Start_IT>
 8001b48:	e7a6      	b.n	8001a98 <main+0x1b8>
		//	  tick_start = HAL_GetTick();
	  	  }
	  	  else
	  	  {
	  		  HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_3);
 8001b4a:	2108      	movs	r1, #8
 8001b4c:	4840      	ldr	r0, [pc, #256]	; (8001c50 <main+0x370>)
 8001b4e:	f005 fe6b 	bl	8007828 <HAL_TIM_PWM_Stop_IT>
	  		  printf("drv8880 disable\n");
 8001b52:	4840      	ldr	r0, [pc, #256]	; (8001c54 <main+0x374>)
 8001b54:	f007 fd5c 	bl	8009610 <puts>
	  		  drv8880_disable();
 8001b58:	f7ff fb4a 	bl	80011f0 <drv8880_disable>
 8001b5c:	e79c      	b.n	8001a98 <main+0x1b8>
	  	  }
	  }
	  else if(MyStrNCmp(commandline, "dir", 3) == 0)
 8001b5e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001b62:	2203      	movs	r2, #3
 8001b64:	493c      	ldr	r1, [pc, #240]	; (8001c58 <main+0x378>)
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff f9e6 	bl	8000f38 <MyStrNCmp>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d112      	bne.n	8001b98 <main+0x2b8>
	  {
	  	  sscanf(commandline, "%*s %d", &motor_dir);
 8001b72:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001b76:	4a2b      	ldr	r2, [pc, #172]	; (8001c24 <main+0x344>)
 8001b78:	4930      	ldr	r1, [pc, #192]	; (8001c3c <main+0x35c>)
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f007 fd50 	bl	8009620 <siscanf>
	  	  printf("motor dir is %d\n", motor_dir);
 8001b80:	4b28      	ldr	r3, [pc, #160]	; (8001c24 <main+0x344>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	4619      	mov	r1, r3
 8001b86:	4835      	ldr	r0, [pc, #212]	; (8001c5c <main+0x37c>)
 8001b88:	f007 fcbc 	bl	8009504 <iprintf>
	  	  drv8880_dir(motor_dir);
 8001b8c:	4b25      	ldr	r3, [pc, #148]	; (8001c24 <main+0x344>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff fb43 	bl	800121c <drv8880_dir>
 8001b96:	e77f      	b.n	8001a98 <main+0x1b8>
	  }
	  else if(MyStrNCmp(commandline, "step", 4) == 0)
 8001b98:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001b9c:	2204      	movs	r2, #4
 8001b9e:	4930      	ldr	r1, [pc, #192]	; (8001c60 <main+0x380>)
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff f9c9 	bl	8000f38 <MyStrNCmp>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d10d      	bne.n	8001bc8 <main+0x2e8>
	  {
	  	  sscanf(commandline, "%*s %d", &step_cnt);
 8001bac:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001bb0:	4a24      	ldr	r2, [pc, #144]	; (8001c44 <main+0x364>)
 8001bb2:	4922      	ldr	r1, [pc, #136]	; (8001c3c <main+0x35c>)
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f007 fd33 	bl	8009620 <siscanf>
	  	  printf("motor step cnt is %d\n", step_cnt);
 8001bba:	4b22      	ldr	r3, [pc, #136]	; (8001c44 <main+0x364>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4828      	ldr	r0, [pc, #160]	; (8001c64 <main+0x384>)
 8001bc2:	f007 fc9f 	bl	8009504 <iprintf>
 8001bc6:	e767      	b.n	8001a98 <main+0x1b8>
	  }
	  else if(MyStrNCmp(commandline, "shot", 4) == 0)
 8001bc8:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001bcc:	2204      	movs	r2, #4
 8001bce:	4926      	ldr	r1, [pc, #152]	; (8001c68 <main+0x388>)
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff f9b1 	bl	8000f38 <MyStrNCmp>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d14b      	bne.n	8001c74 <main+0x394>
	  {
	  	  sscanf(commandline, "%*s %d", &shot_cnt);
 8001bdc:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001be0:	4a22      	ldr	r2, [pc, #136]	; (8001c6c <main+0x38c>)
 8001be2:	4916      	ldr	r1, [pc, #88]	; (8001c3c <main+0x35c>)
 8001be4:	4618      	mov	r0, r3
 8001be6:	f007 fd1b 	bl	8009620 <siscanf>
	  	  printf("shot cnt is %d\n", shot_cnt);
 8001bea:	4b20      	ldr	r3, [pc, #128]	; (8001c6c <main+0x38c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4619      	mov	r1, r3
 8001bf0:	481f      	ldr	r0, [pc, #124]	; (8001c70 <main+0x390>)
 8001bf2:	f007 fc87 	bl	8009504 <iprintf>
 8001bf6:	e74f      	b.n	8001a98 <main+0x1b8>
 8001bf8:	59f28faa 	.word	0x59f28faa
 8001bfc:	3fb015bf 	.word	0x3fb015bf
 8001c00:	0800bbb8 	.word	0x0800bbb8
 8001c04:	0800bbd4 	.word	0x0800bbd4
 8001c08:	0800bbec 	.word	0x0800bbec
 8001c0c:	0800bc00 	.word	0x0800bc00
 8001c10:	0800bc18 	.word	0x0800bc18
 8001c14:	40011000 	.word	0x40011000
 8001c18:	0800bc30 	.word	0x0800bc30
 8001c1c:	20000364 	.word	0x20000364
 8001c20:	20000208 	.word	0x20000208
 8001c24:	20000168 	.word	0x20000168
 8001c28:	0800bc44 	.word	0x0800bc44
 8001c2c:	20000180 	.word	0x20000180
 8001c30:	200003ec 	.word	0x200003ec
 8001c34:	0800bc54 	.word	0x0800bc54
 8001c38:	0800bc5c 	.word	0x0800bc5c
 8001c3c:	0800bc60 	.word	0x0800bc60
 8001c40:	0800bc68 	.word	0x0800bc68
 8001c44:	20000000 	.word	0x20000000
 8001c48:	0800bc70 	.word	0x0800bc70
 8001c4c:	0800bc84 	.word	0x0800bc84
 8001c50:	2000031c 	.word	0x2000031c
 8001c54:	0800bc94 	.word	0x0800bc94
 8001c58:	0800bca4 	.word	0x0800bca4
 8001c5c:	0800bca8 	.word	0x0800bca8
 8001c60:	0800bcbc 	.word	0x0800bcbc
 8001c64:	0800bcc4 	.word	0x0800bcc4
 8001c68:	0800bcdc 	.word	0x0800bcdc
 8001c6c:	20000004 	.word	0x20000004
 8001c70:	0800bce4 	.word	0x0800bce4
	  }
	  else if(MyStrNCmp(commandline, "freq", 4) == 0)
 8001c74:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001c78:	2204      	movs	r2, #4
 8001c7a:	49c1      	ldr	r1, [pc, #772]	; (8001f80 <main+0x6a0>)
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff f95b 	bl	8000f38 <MyStrNCmp>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d12f      	bne.n	8001ce8 <main+0x408>
	  {
	  	  sscanf(commandline, "%*s %d", &freq);
 8001c88:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8001c8c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001c90:	49bc      	ldr	r1, [pc, #752]	; (8001f84 <main+0x6a4>)
 8001c92:	4618      	mov	r0, r3
 8001c94:	f007 fcc4 	bl	8009620 <siscanf>

	  	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, (1000000/freq)/2);
 8001c98:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	4bba      	ldr	r3, [pc, #744]	; (8001f88 <main+0x6a8>)
 8001ca0:	fb93 f3f2 	sdiv	r3, r3, r2
 8001ca4:	0fda      	lsrs	r2, r3, #31
 8001ca6:	4413      	add	r3, r2
 8001ca8:	105b      	asrs	r3, r3, #1
 8001caa:	461a      	mov	r2, r3
 8001cac:	4bb7      	ldr	r3, [pc, #732]	; (8001f8c <main+0x6ac>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	63da      	str	r2, [r3, #60]	; 0x3c
//	  	  htim3.Instance->CCR3 = (1000000/freq)/2;
	  	  __HAL_TIM_SET_AUTORELOAD(&htim3, 1000000/freq - 1);
 8001cb2:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	4bb3      	ldr	r3, [pc, #716]	; (8001f88 <main+0x6a8>)
 8001cba:	fb93 f3f2 	sdiv	r3, r3, r2
 8001cbe:	1e5a      	subs	r2, r3, #1
 8001cc0:	4bb2      	ldr	r3, [pc, #712]	; (8001f8c <main+0x6ac>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	62da      	str	r2, [r3, #44]	; 0x2c
 8001cc6:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8001cca:	461a      	mov	r2, r3
 8001ccc:	4bae      	ldr	r3, [pc, #696]	; (8001f88 <main+0x6a8>)
 8001cce:	fb93 f3f2 	sdiv	r3, r3, r2
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	4bad      	ldr	r3, [pc, #692]	; (8001f8c <main+0x6ac>)
 8001cd8:	60da      	str	r2, [r3, #12]
//	  	  htim3.Instance->ARR = 1000000/freq - 1;

	  	  printf("motor freq is %d Hz\n", freq);
 8001cda:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8001cde:	4619      	mov	r1, r3
 8001ce0:	48ab      	ldr	r0, [pc, #684]	; (8001f90 <main+0x6b0>)
 8001ce2:	f007 fc0f 	bl	8009504 <iprintf>
 8001ce6:	e6d7      	b.n	8001a98 <main+0x1b8>
	  }
	  else if(MyStrNCmp(commandline, "sleep", 5) == 0)
 8001ce8:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001cec:	2205      	movs	r2, #5
 8001cee:	49a9      	ldr	r1, [pc, #676]	; (8001f94 <main+0x6b4>)
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff f921 	bl	8000f38 <MyStrNCmp>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d114      	bne.n	8001d26 <main+0x446>
	  {
	  	  sscanf(commandline, "%*s %d", &tmp);
 8001cfc:	f107 02e6 	add.w	r2, r7, #230	; 0xe6
 8001d00:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001d04:	499f      	ldr	r1, [pc, #636]	; (8001f84 <main+0x6a4>)
 8001d06:	4618      	mov	r0, r3
 8001d08:	f007 fc8a 	bl	8009620 <siscanf>
	  	  printf("Motor Sleep is %d\n", tmp);
 8001d0c:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8001d10:	4619      	mov	r1, r3
 8001d12:	48a1      	ldr	r0, [pc, #644]	; (8001f98 <main+0x6b8>)
 8001d14:	f007 fbf6 	bl	8009504 <iprintf>
	  	  drv8880_sleep(tmp);
 8001d18:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff fa96 	bl	8001250 <drv8880_sleep>
 8001d24:	e6b8      	b.n	8001a98 <main+0x1b8>
	  }
	  else if(MyStrNCmp(commandline, "microstep", 9) == 0)
 8001d26:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001d2a:	2209      	movs	r2, #9
 8001d2c:	499b      	ldr	r1, [pc, #620]	; (8001f9c <main+0x6bc>)
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff f902 	bl	8000f38 <MyStrNCmp>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d15e      	bne.n	8001df8 <main+0x518>
	  {
		  sscanf(commandline, "%*s %d", &tmp);
 8001d3a:	f107 02e6 	add.w	r2, r7, #230	; 0xe6
 8001d3e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001d42:	4990      	ldr	r1, [pc, #576]	; (8001f84 <main+0x6a4>)
 8001d44:	4618      	mov	r0, r3
 8001d46:	f007 fc6b 	bl	8009620 <siscanf>
		  switch(tmp)
 8001d4a:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8001d4e:	2b40      	cmp	r3, #64	; 0x40
 8001d50:	d01b      	beq.n	8001d8a <main+0x4aa>
 8001d52:	2b40      	cmp	r3, #64	; 0x40
 8001d54:	dc4c      	bgt.n	8001df0 <main+0x510>
 8001d56:	2b20      	cmp	r3, #32
 8001d58:	d039      	beq.n	8001dce <main+0x4ee>
 8001d5a:	2b20      	cmp	r3, #32
 8001d5c:	dc48      	bgt.n	8001df0 <main+0x510>
 8001d5e:	2b08      	cmp	r3, #8
 8001d60:	d002      	beq.n	8001d68 <main+0x488>
 8001d62:	2b10      	cmp	r3, #16
 8001d64:	d022      	beq.n	8001dac <main+0x4cc>
 8001d66:	e043      	b.n	8001df0 <main+0x510>
		  {
		  	  case 8:
		  		  HAL_GPIO_WritePin(M_M0_GPIO_Port, M_M0_Pin, GPIO_PIN_RESET);
 8001d68:	2200      	movs	r2, #0
 8001d6a:	2120      	movs	r1, #32
 8001d6c:	488c      	ldr	r0, [pc, #560]	; (8001fa0 <main+0x6c0>)
 8001d6e:	f002 ffbf 	bl	8004cf0 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(M_M1_GPIO_Port, M_M1_Pin, GPIO_PIN_RESET);
 8001d72:	2200      	movs	r2, #0
 8001d74:	2140      	movs	r1, #64	; 0x40
 8001d76:	488a      	ldr	r0, [pc, #552]	; (8001fa0 <main+0x6c0>)
 8001d78:	f002 ffba 	bl	8004cf0 <HAL_GPIO_WritePin>
		  		  mode = 8;
 8001d7c:	4b89      	ldr	r3, [pc, #548]	; (8001fa4 <main+0x6c4>)
 8001d7e:	2208      	movs	r2, #8
 8001d80:	801a      	strh	r2, [r3, #0]
		  		  printf("1/8 step mode\n");
 8001d82:	4889      	ldr	r0, [pc, #548]	; (8001fa8 <main+0x6c8>)
 8001d84:	f007 fc44 	bl	8009610 <puts>
		  		  break;
 8001d88:	e1b8      	b.n	80020fc <main+0x81c>
		  	  case 64:
		  		  HAL_GPIO_WritePin(M_M0_GPIO_Port, M_M0_Pin, GPIO_PIN_RESET);
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	2120      	movs	r1, #32
 8001d8e:	4884      	ldr	r0, [pc, #528]	; (8001fa0 <main+0x6c0>)
 8001d90:	f002 ffae 	bl	8004cf0 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(M_M1_GPIO_Port, M_M1_Pin, GPIO_PIN_SET);
 8001d94:	2201      	movs	r2, #1
 8001d96:	2140      	movs	r1, #64	; 0x40
 8001d98:	4881      	ldr	r0, [pc, #516]	; (8001fa0 <main+0x6c0>)
 8001d9a:	f002 ffa9 	bl	8004cf0 <HAL_GPIO_WritePin>
		  		  mode = 64;
 8001d9e:	4b81      	ldr	r3, [pc, #516]	; (8001fa4 <main+0x6c4>)
 8001da0:	2240      	movs	r2, #64	; 0x40
 8001da2:	801a      	strh	r2, [r3, #0]
		  		  printf("1/64 step mode\n");
 8001da4:	4881      	ldr	r0, [pc, #516]	; (8001fac <main+0x6cc>)
 8001da6:	f007 fc33 	bl	8009610 <puts>
		  		  break;
 8001daa:	e1a7      	b.n	80020fc <main+0x81c>
		  	  case 16:
		  		  HAL_GPIO_WritePin(M_M0_GPIO_Port, M_M0_Pin, GPIO_PIN_SET);
 8001dac:	2201      	movs	r2, #1
 8001dae:	2120      	movs	r1, #32
 8001db0:	487b      	ldr	r0, [pc, #492]	; (8001fa0 <main+0x6c0>)
 8001db2:	f002 ff9d 	bl	8004cf0 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(M_M1_GPIO_Port, M_M1_Pin, GPIO_PIN_SET);
 8001db6:	2201      	movs	r2, #1
 8001db8:	2140      	movs	r1, #64	; 0x40
 8001dba:	4879      	ldr	r0, [pc, #484]	; (8001fa0 <main+0x6c0>)
 8001dbc:	f002 ff98 	bl	8004cf0 <HAL_GPIO_WritePin>
		  		  mode = 16;
 8001dc0:	4b78      	ldr	r3, [pc, #480]	; (8001fa4 <main+0x6c4>)
 8001dc2:	2210      	movs	r2, #16
 8001dc4:	801a      	strh	r2, [r3, #0]
		  		  printf("1/16 step mode\n");
 8001dc6:	487a      	ldr	r0, [pc, #488]	; (8001fb0 <main+0x6d0>)
 8001dc8:	f007 fc22 	bl	8009610 <puts>
		  		  break;
 8001dcc:	e196      	b.n	80020fc <main+0x81c>
		  	  case 32:
		  		  HAL_GPIO_WritePin(M_M0_GPIO_Port, M_M0_Pin, GPIO_PIN_SET);
 8001dce:	2201      	movs	r2, #1
 8001dd0:	2120      	movs	r1, #32
 8001dd2:	4873      	ldr	r0, [pc, #460]	; (8001fa0 <main+0x6c0>)
 8001dd4:	f002 ff8c 	bl	8004cf0 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(M_M1_GPIO_Port, M_M1_Pin, GPIO_PIN_RESET);
 8001dd8:	2200      	movs	r2, #0
 8001dda:	2140      	movs	r1, #64	; 0x40
 8001ddc:	4870      	ldr	r0, [pc, #448]	; (8001fa0 <main+0x6c0>)
 8001dde:	f002 ff87 	bl	8004cf0 <HAL_GPIO_WritePin>
		  		  mode = 32;
 8001de2:	4b70      	ldr	r3, [pc, #448]	; (8001fa4 <main+0x6c4>)
 8001de4:	2220      	movs	r2, #32
 8001de6:	801a      	strh	r2, [r3, #0]
		  		  printf("1/32 step mode\n");
 8001de8:	4872      	ldr	r0, [pc, #456]	; (8001fb4 <main+0x6d4>)
 8001dea:	f007 fc11 	bl	8009610 <puts>
		  		  break;
 8001dee:	e185      	b.n	80020fc <main+0x81c>
		  	  default:
		  		  printf("select 8(1/8 step), 16(1/16 step), 32(1/32 step), 64(1/64 step)\n");
 8001df0:	4871      	ldr	r0, [pc, #452]	; (8001fb8 <main+0x6d8>)
 8001df2:	f007 fc0d 	bl	8009610 <puts>
		  		  break;
 8001df6:	e181      	b.n	80020fc <main+0x81c>
		  }
	  }
	  else if(MyStrNCmp(commandline, "torq", 4) == 0)
 8001df8:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001dfc:	2204      	movs	r2, #4
 8001dfe:	496f      	ldr	r1, [pc, #444]	; (8001fbc <main+0x6dc>)
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff f899 	bl	8000f38 <MyStrNCmp>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d15a      	bne.n	8001ec2 <main+0x5e2>
	  {
		  sscanf(commandline, "%*s %d", &tmp);
 8001e0c:	f107 02e6 	add.w	r2, r7, #230	; 0xe6
 8001e10:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001e14:	495b      	ldr	r1, [pc, #364]	; (8001f84 <main+0x6a4>)
 8001e16:	4618      	mov	r0, r3
 8001e18:	f007 fc02 	bl	8009620 <siscanf>
		  switch(tmp)
 8001e1c:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8001e20:	2b64      	cmp	r3, #100	; 0x64
 8001e22:	d03a      	beq.n	8001e9a <main+0x5ba>
 8001e24:	2b64      	cmp	r3, #100	; 0x64
 8001e26:	dc48      	bgt.n	8001eba <main+0x5da>
 8001e28:	2b4b      	cmp	r3, #75	; 0x4b
 8001e2a:	d026      	beq.n	8001e7a <main+0x59a>
 8001e2c:	2b4b      	cmp	r3, #75	; 0x4b
 8001e2e:	dc44      	bgt.n	8001eba <main+0x5da>
 8001e30:	2b19      	cmp	r3, #25
 8001e32:	d002      	beq.n	8001e3a <main+0x55a>
 8001e34:	2b32      	cmp	r3, #50	; 0x32
 8001e36:	d010      	beq.n	8001e5a <main+0x57a>
 8001e38:	e03f      	b.n	8001eba <main+0x5da>
		  {
		  	  case 25:
		  		  HAL_GPIO_WritePin(M_TRQ0_GPIO_Port, M_TRQ0_Pin, GPIO_PIN_SET);
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e40:	4857      	ldr	r0, [pc, #348]	; (8001fa0 <main+0x6c0>)
 8001e42:	f002 ff55 	bl	8004cf0 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(M_TRQ1_GPIO_Port, M_TRQ1_Pin, GPIO_PIN_SET);
 8001e46:	2201      	movs	r2, #1
 8001e48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e4c:	4854      	ldr	r0, [pc, #336]	; (8001fa0 <main+0x6c0>)
 8001e4e:	f002 ff4f 	bl	8004cf0 <HAL_GPIO_WritePin>
		  		  printf("torque 25%%\n");
 8001e52:	485b      	ldr	r0, [pc, #364]	; (8001fc0 <main+0x6e0>)
 8001e54:	f007 fb56 	bl	8009504 <iprintf>
		  		  break;
 8001e58:	e150      	b.n	80020fc <main+0x81c>
		  	  case 50:
		  		  HAL_GPIO_WritePin(M_TRQ0_GPIO_Port, M_TRQ0_Pin, GPIO_PIN_RESET);
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e60:	484f      	ldr	r0, [pc, #316]	; (8001fa0 <main+0x6c0>)
 8001e62:	f002 ff45 	bl	8004cf0 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(M_TRQ1_GPIO_Port, M_TRQ1_Pin, GPIO_PIN_SET);
 8001e66:	2201      	movs	r2, #1
 8001e68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e6c:	484c      	ldr	r0, [pc, #304]	; (8001fa0 <main+0x6c0>)
 8001e6e:	f002 ff3f 	bl	8004cf0 <HAL_GPIO_WritePin>
		  		  printf("torque 50%%\n");
 8001e72:	4854      	ldr	r0, [pc, #336]	; (8001fc4 <main+0x6e4>)
 8001e74:	f007 fb46 	bl	8009504 <iprintf>
		  		  break;
 8001e78:	e140      	b.n	80020fc <main+0x81c>
		  	  case 75:
		  		  HAL_GPIO_WritePin(M_TRQ0_GPIO_Port, M_TRQ0_Pin, GPIO_PIN_SET);
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e80:	4847      	ldr	r0, [pc, #284]	; (8001fa0 <main+0x6c0>)
 8001e82:	f002 ff35 	bl	8004cf0 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(M_TRQ1_GPIO_Port, M_TRQ1_Pin, GPIO_PIN_RESET);
 8001e86:	2200      	movs	r2, #0
 8001e88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e8c:	4844      	ldr	r0, [pc, #272]	; (8001fa0 <main+0x6c0>)
 8001e8e:	f002 ff2f 	bl	8004cf0 <HAL_GPIO_WritePin>
		  		  printf("torque 75%%\n");
 8001e92:	484d      	ldr	r0, [pc, #308]	; (8001fc8 <main+0x6e8>)
 8001e94:	f007 fb36 	bl	8009504 <iprintf>
		  		  break;
 8001e98:	e130      	b.n	80020fc <main+0x81c>
		  	  case 100:
		  		  HAL_GPIO_WritePin(M_TRQ0_GPIO_Port, M_TRQ0_Pin, GPIO_PIN_RESET);
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ea0:	483f      	ldr	r0, [pc, #252]	; (8001fa0 <main+0x6c0>)
 8001ea2:	f002 ff25 	bl	8004cf0 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(M_TRQ1_GPIO_Port, M_TRQ1_Pin, GPIO_PIN_RESET);
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001eac:	483c      	ldr	r0, [pc, #240]	; (8001fa0 <main+0x6c0>)
 8001eae:	f002 ff1f 	bl	8004cf0 <HAL_GPIO_WritePin>
		  		  printf("torque 100%%\n");
 8001eb2:	4846      	ldr	r0, [pc, #280]	; (8001fcc <main+0x6ec>)
 8001eb4:	f007 fb26 	bl	8009504 <iprintf>
		  		  break;
 8001eb8:	e120      	b.n	80020fc <main+0x81c>
		  	  default:
		  		  printf("select 25, 50, 75, 100\n");
 8001eba:	4845      	ldr	r0, [pc, #276]	; (8001fd0 <main+0x6f0>)
 8001ebc:	f007 fba8 	bl	8009610 <puts>
		  		  break;
 8001ec0:	e11c      	b.n	80020fc <main+0x81c>
		  }
	  }
	  else if(MyStrNCmp(commandline, "tca1r", 5) == 0)
 8001ec2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001ec6:	2205      	movs	r2, #5
 8001ec8:	4942      	ldr	r1, [pc, #264]	; (8001fd4 <main+0x6f4>)
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7ff f834 	bl	8000f38 <MyStrNCmp>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d114      	bne.n	8001f00 <main+0x620>
	  {
		  uint16_t addr;

	  	  sscanf(commandline, "%*s %x", &addr);
 8001ed6:	f107 021a 	add.w	r2, r7, #26
 8001eda:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001ede:	493e      	ldr	r1, [pc, #248]	; (8001fd8 <main+0x6f8>)
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f007 fb9d 	bl	8009620 <siscanf>
	  	  printf("reg[%x] data[%x]\n",addr, read_tca1_reg(addr));
 8001ee6:	8b7b      	ldrh	r3, [r7, #26]
 8001ee8:	461c      	mov	r4, r3
 8001eea:	8b7b      	ldrh	r3, [r7, #26]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff fc1f 	bl	8001730 <read_tca1_reg>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	4621      	mov	r1, r4
 8001ef8:	4838      	ldr	r0, [pc, #224]	; (8001fdc <main+0x6fc>)
 8001efa:	f007 fb03 	bl	8009504 <iprintf>
 8001efe:	e5cb      	b.n	8001a98 <main+0x1b8>
	  }
	  else if(MyStrNCmp(commandline, "tca1w", 5) == 0)
 8001f00:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001f04:	2205      	movs	r2, #5
 8001f06:	4936      	ldr	r1, [pc, #216]	; (8001fe0 <main+0x700>)
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7ff f815 	bl	8000f38 <MyStrNCmp>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d116      	bne.n	8001f42 <main+0x662>
	  {
		  uint16_t addr, data;

	  	  sscanf(commandline, "%*s %x %x", &addr, &data);
 8001f14:	f107 0316 	add.w	r3, r7, #22
 8001f18:	f107 0218 	add.w	r2, r7, #24
 8001f1c:	f107 00e8 	add.w	r0, r7, #232	; 0xe8
 8001f20:	4930      	ldr	r1, [pc, #192]	; (8001fe4 <main+0x704>)
 8001f22:	f007 fb7d 	bl	8009620 <siscanf>
	  	  printf("addr = %x\ndata = %x\n", addr, data);
 8001f26:	8b3b      	ldrh	r3, [r7, #24]
 8001f28:	4619      	mov	r1, r3
 8001f2a:	8afb      	ldrh	r3, [r7, #22]
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	482e      	ldr	r0, [pc, #184]	; (8001fe8 <main+0x708>)
 8001f30:	f007 fae8 	bl	8009504 <iprintf>
	  	  write_tca1_reg(addr, data);
 8001f34:	8b3b      	ldrh	r3, [r7, #24]
 8001f36:	8afa      	ldrh	r2, [r7, #22]
 8001f38:	4611      	mov	r1, r2
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7ff fc1c 	bl	8001778 <write_tca1_reg>
 8001f40:	e5aa      	b.n	8001a98 <main+0x1b8>
	  }
	  else if(MyStrNCmp(commandline, "tca2r", 5) == 0)
 8001f42:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001f46:	2205      	movs	r2, #5
 8001f48:	4928      	ldr	r1, [pc, #160]	; (8001fec <main+0x70c>)
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7fe fff4 	bl	8000f38 <MyStrNCmp>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d14c      	bne.n	8001ff0 <main+0x710>
	  {
		  uint16_t addr;

	  	  sscanf(commandline, "%*s %x", &addr);
 8001f56:	f107 0214 	add.w	r2, r7, #20
 8001f5a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001f5e:	491e      	ldr	r1, [pc, #120]	; (8001fd8 <main+0x6f8>)
 8001f60:	4618      	mov	r0, r3
 8001f62:	f007 fb5d 	bl	8009620 <siscanf>
	  	  printf("reg[%x] data[%x]\n",addr, read_tca2_reg(addr));
 8001f66:	8abb      	ldrh	r3, [r7, #20]
 8001f68:	461c      	mov	r4, r3
 8001f6a:	8abb      	ldrh	r3, [r7, #20]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff fc27 	bl	80017c0 <read_tca2_reg>
 8001f72:	4603      	mov	r3, r0
 8001f74:	461a      	mov	r2, r3
 8001f76:	4621      	mov	r1, r4
 8001f78:	4818      	ldr	r0, [pc, #96]	; (8001fdc <main+0x6fc>)
 8001f7a:	f007 fac3 	bl	8009504 <iprintf>
 8001f7e:	e58b      	b.n	8001a98 <main+0x1b8>
 8001f80:	0800bcf4 	.word	0x0800bcf4
 8001f84:	0800bc60 	.word	0x0800bc60
 8001f88:	000f4240 	.word	0x000f4240
 8001f8c:	2000031c 	.word	0x2000031c
 8001f90:	0800bcfc 	.word	0x0800bcfc
 8001f94:	0800bd14 	.word	0x0800bd14
 8001f98:	0800bd1c 	.word	0x0800bd1c
 8001f9c:	0800bd30 	.word	0x0800bd30
 8001fa0:	40011000 	.word	0x40011000
 8001fa4:	20000008 	.word	0x20000008
 8001fa8:	0800bd3c 	.word	0x0800bd3c
 8001fac:	0800bd4c 	.word	0x0800bd4c
 8001fb0:	0800bd5c 	.word	0x0800bd5c
 8001fb4:	0800bd6c 	.word	0x0800bd6c
 8001fb8:	0800bd7c 	.word	0x0800bd7c
 8001fbc:	0800bdbc 	.word	0x0800bdbc
 8001fc0:	0800bdc4 	.word	0x0800bdc4
 8001fc4:	0800bdd4 	.word	0x0800bdd4
 8001fc8:	0800bde4 	.word	0x0800bde4
 8001fcc:	0800bdf4 	.word	0x0800bdf4
 8001fd0:	0800be04 	.word	0x0800be04
 8001fd4:	0800be1c 	.word	0x0800be1c
 8001fd8:	0800be24 	.word	0x0800be24
 8001fdc:	0800be2c 	.word	0x0800be2c
 8001fe0:	0800be40 	.word	0x0800be40
 8001fe4:	0800be48 	.word	0x0800be48
 8001fe8:	0800be54 	.word	0x0800be54
 8001fec:	0800be6c 	.word	0x0800be6c
	  }
	  else if(MyStrNCmp(commandline, "tca2w", 5) == 0)
 8001ff0:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001ff4:	2205      	movs	r2, #5
 8001ff6:	4942      	ldr	r1, [pc, #264]	; (8002100 <main+0x820>)
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7fe ff9d 	bl	8000f38 <MyStrNCmp>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d116      	bne.n	8002032 <main+0x752>
	  {
		  uint16_t addr, data;

	  	  sscanf(commandline, "%*s %x %x", &addr, &data);
 8002004:	f107 0310 	add.w	r3, r7, #16
 8002008:	f107 0212 	add.w	r2, r7, #18
 800200c:	f107 00e8 	add.w	r0, r7, #232	; 0xe8
 8002010:	493c      	ldr	r1, [pc, #240]	; (8002104 <main+0x824>)
 8002012:	f007 fb05 	bl	8009620 <siscanf>
	  	  printf("addr = %x\ndata = %x\n", addr, data);
 8002016:	8a7b      	ldrh	r3, [r7, #18]
 8002018:	4619      	mov	r1, r3
 800201a:	8a3b      	ldrh	r3, [r7, #16]
 800201c:	461a      	mov	r2, r3
 800201e:	483a      	ldr	r0, [pc, #232]	; (8002108 <main+0x828>)
 8002020:	f007 fa70 	bl	8009504 <iprintf>
	  	  write_tca2_reg(addr, data);
 8002024:	8a7b      	ldrh	r3, [r7, #18]
 8002026:	8a3a      	ldrh	r2, [r7, #16]
 8002028:	4611      	mov	r1, r2
 800202a:	4618      	mov	r0, r3
 800202c:	f7ff fbec 	bl	8001808 <write_tca2_reg>
 8002030:	e532      	b.n	8001a98 <main+0x1b8>
	  }
	  else if(MyStrNCmp(commandline, "eepr", 4) == 0)
 8002032:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002036:	2204      	movs	r2, #4
 8002038:	4934      	ldr	r1, [pc, #208]	; (800210c <main+0x82c>)
 800203a:	4618      	mov	r0, r3
 800203c:	f7fe ff7c 	bl	8000f38 <MyStrNCmp>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d114      	bne.n	8002070 <main+0x790>
	  {
		  uint16_t addr;

	  	  sscanf(commandline, "%*s %x", &addr);
 8002046:	f107 020e 	add.w	r2, r7, #14
 800204a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800204e:	4930      	ldr	r1, [pc, #192]	; (8002110 <main+0x830>)
 8002050:	4618      	mov	r0, r3
 8002052:	f007 fae5 	bl	8009620 <siscanf>
	  	  printf("Addr[%x] data[%x]\n",addr, read_eeprom(addr));
 8002056:	89fb      	ldrh	r3, [r7, #14]
 8002058:	461c      	mov	r4, r3
 800205a:	89fb      	ldrh	r3, [r7, #14]
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff fbf7 	bl	8001850 <read_eeprom>
 8002062:	4603      	mov	r3, r0
 8002064:	461a      	mov	r2, r3
 8002066:	4621      	mov	r1, r4
 8002068:	482a      	ldr	r0, [pc, #168]	; (8002114 <main+0x834>)
 800206a:	f007 fa4b 	bl	8009504 <iprintf>
 800206e:	e513      	b.n	8001a98 <main+0x1b8>
	  }
	  else if(MyStrNCmp(commandline, "eepw", 4) == 0)
 8002070:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002074:	2204      	movs	r2, #4
 8002076:	4928      	ldr	r1, [pc, #160]	; (8002118 <main+0x838>)
 8002078:	4618      	mov	r0, r3
 800207a:	f7fe ff5d 	bl	8000f38 <MyStrNCmp>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d116      	bne.n	80020b2 <main+0x7d2>
	  {
		  uint16_t addr, data;

	  	  sscanf(commandline, "%*s %x %x", &addr, &data);
 8002084:	f107 030a 	add.w	r3, r7, #10
 8002088:	f107 020c 	add.w	r2, r7, #12
 800208c:	f107 00e8 	add.w	r0, r7, #232	; 0xe8
 8002090:	491c      	ldr	r1, [pc, #112]	; (8002104 <main+0x824>)
 8002092:	f007 fac5 	bl	8009620 <siscanf>
	  	  printf("addr = %x\ndata = %x\n", addr, data);
 8002096:	89bb      	ldrh	r3, [r7, #12]
 8002098:	4619      	mov	r1, r3
 800209a:	897b      	ldrh	r3, [r7, #10]
 800209c:	461a      	mov	r2, r3
 800209e:	481a      	ldr	r0, [pc, #104]	; (8002108 <main+0x828>)
 80020a0:	f007 fa30 	bl	8009504 <iprintf>
	  	  write_eeprom(addr, data);
 80020a4:	89bb      	ldrh	r3, [r7, #12]
 80020a6:	897a      	ldrh	r2, [r7, #10]
 80020a8:	4611      	mov	r1, r2
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7ff fbf4 	bl	8001898 <write_eeprom>
 80020b0:	e4f2      	b.n	8001a98 <main+0x1b8>
	  }
	  else if(MyStrNCmp(commandline, "scan", 4) == 0)
 80020b2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80020b6:	2204      	movs	r2, #4
 80020b8:	4918      	ldr	r1, [pc, #96]	; (800211c <main+0x83c>)
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7fe ff3c 	bl	8000f38 <MyStrNCmp>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d117      	bne.n	80020f6 <main+0x816>
	  {
		  uint16_t data1, data2, data3;

	  	  sscanf(commandline, "%*s %d %d %d", &data1, &data2, &data3);
 80020c6:	1db9      	adds	r1, r7, #6
 80020c8:	f107 0208 	add.w	r2, r7, #8
 80020cc:	f107 00e8 	add.w	r0, r7, #232	; 0xe8
 80020d0:	1d3b      	adds	r3, r7, #4
 80020d2:	9300      	str	r3, [sp, #0]
 80020d4:	460b      	mov	r3, r1
 80020d6:	4912      	ldr	r1, [pc, #72]	; (8002120 <main+0x840>)
 80020d8:	f007 faa2 	bl	8009620 <siscanf>
	  	  printf("data1 = %x\ndata2 = %x\ndata3 = %x\n", data1, data2, data3);
 80020dc:	f107 0308 	add.w	r3, r7, #8
 80020e0:	881b      	ldrh	r3, [r3, #0]
 80020e2:	4619      	mov	r1, r3
 80020e4:	1dbb      	adds	r3, r7, #6
 80020e6:	881b      	ldrh	r3, [r3, #0]
 80020e8:	461a      	mov	r2, r3
 80020ea:	1d3b      	adds	r3, r7, #4
 80020ec:	881b      	ldrh	r3, [r3, #0]
 80020ee:	480d      	ldr	r0, [pc, #52]	; (8002124 <main+0x844>)
 80020f0:	f007 fa08 	bl	8009504 <iprintf>
 80020f4:	e4d0      	b.n	8001a98 <main+0x1b8>
	  }
	  else
	  {
	  	  printf("command error\n");
 80020f6:	480c      	ldr	r0, [pc, #48]	; (8002128 <main+0x848>)
 80020f8:	f007 fa8a 	bl	8009610 <puts>
  {
 80020fc:	e4cc      	b.n	8001a98 <main+0x1b8>
 80020fe:	bf00      	nop
 8002100:	0800be74 	.word	0x0800be74
 8002104:	0800be48 	.word	0x0800be48
 8002108:	0800be54 	.word	0x0800be54
 800210c:	0800be7c 	.word	0x0800be7c
 8002110:	0800be24 	.word	0x0800be24
 8002114:	0800be84 	.word	0x0800be84
 8002118:	0800be98 	.word	0x0800be98
 800211c:	0800bea0 	.word	0x0800bea0
 8002120:	0800bea8 	.word	0x0800bea8
 8002124:	0800beb8 	.word	0x0800beb8
 8002128:	0800bedc 	.word	0x0800bedc

0800212c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b096      	sub	sp, #88	; 0x58
 8002130:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002132:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002136:	2228      	movs	r2, #40	; 0x28
 8002138:	2100      	movs	r1, #0
 800213a:	4618      	mov	r0, r3
 800213c:	f007 f9da 	bl	80094f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002140:	f107 031c 	add.w	r3, r7, #28
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]
 8002148:	605a      	str	r2, [r3, #4]
 800214a:	609a      	str	r2, [r3, #8]
 800214c:	60da      	str	r2, [r3, #12]
 800214e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002150:	1d3b      	adds	r3, r7, #4
 8002152:	2200      	movs	r2, #0
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	605a      	str	r2, [r3, #4]
 8002158:	609a      	str	r2, [r3, #8]
 800215a:	60da      	str	r2, [r3, #12]
 800215c:	611a      	str	r2, [r3, #16]
 800215e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002160:	2302      	movs	r3, #2
 8002162:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002164:	2301      	movs	r3, #1
 8002166:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002168:	2310      	movs	r3, #16
 800216a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800216c:	2302      	movs	r3, #2
 800216e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8002170:	2300      	movs	r3, #0
 8002172:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8002174:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8002178:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800217a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800217e:	4618      	mov	r0, r3
 8002180:	f003 fe9a 	bl	8005eb8 <HAL_RCC_OscConfig>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800218a:	f000 f828 	bl	80021de <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800218e:	230f      	movs	r3, #15
 8002190:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002192:	2302      	movs	r3, #2
 8002194:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002196:	2300      	movs	r3, #0
 8002198:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800219a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800219e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021a0:	2300      	movs	r3, #0
 80021a2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80021a4:	f107 031c 	add.w	r3, r7, #28
 80021a8:	2102      	movs	r1, #2
 80021aa:	4618      	mov	r0, r3
 80021ac:	f004 f9f4 	bl	8006598 <HAL_RCC_ClockConfig>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80021b6:	f000 f812 	bl	80021de <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80021ba:	2302      	movs	r3, #2
 80021bc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80021be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021c2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021c4:	1d3b      	adds	r3, r7, #4
 80021c6:	4618      	mov	r0, r3
 80021c8:	f004 fc26 	bl	8006a18 <HAL_RCCEx_PeriphCLKConfig>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80021d2:	f000 f804 	bl	80021de <Error_Handler>
  }
}
 80021d6:	bf00      	nop
 80021d8:	3758      	adds	r7, #88	; 0x58
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021de:	b480      	push	{r7}
 80021e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80021e2:	bf00      	nop
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bc80      	pop	{r7}
 80021e8:	4770      	bx	lr

080021ea <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b083      	sub	sp, #12
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
 80021f2:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80021f4:	bf00      	nop
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bc80      	pop	{r7}
 80021fc:	4770      	bx	lr
	...

08002200 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002204:	4b17      	ldr	r3, [pc, #92]	; (8002264 <MX_SPI2_Init+0x64>)
 8002206:	4a18      	ldr	r2, [pc, #96]	; (8002268 <MX_SPI2_Init+0x68>)
 8002208:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800220a:	4b16      	ldr	r3, [pc, #88]	; (8002264 <MX_SPI2_Init+0x64>)
 800220c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002210:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002212:	4b14      	ldr	r3, [pc, #80]	; (8002264 <MX_SPI2_Init+0x64>)
 8002214:	2200      	movs	r2, #0
 8002216:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002218:	4b12      	ldr	r3, [pc, #72]	; (8002264 <MX_SPI2_Init+0x64>)
 800221a:	2200      	movs	r2, #0
 800221c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800221e:	4b11      	ldr	r3, [pc, #68]	; (8002264 <MX_SPI2_Init+0x64>)
 8002220:	2200      	movs	r2, #0
 8002222:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002224:	4b0f      	ldr	r3, [pc, #60]	; (8002264 <MX_SPI2_Init+0x64>)
 8002226:	2200      	movs	r2, #0
 8002228:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800222a:	4b0e      	ldr	r3, [pc, #56]	; (8002264 <MX_SPI2_Init+0x64>)
 800222c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002230:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002232:	4b0c      	ldr	r3, [pc, #48]	; (8002264 <MX_SPI2_Init+0x64>)
 8002234:	2200      	movs	r2, #0
 8002236:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002238:	4b0a      	ldr	r3, [pc, #40]	; (8002264 <MX_SPI2_Init+0x64>)
 800223a:	2200      	movs	r2, #0
 800223c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800223e:	4b09      	ldr	r3, [pc, #36]	; (8002264 <MX_SPI2_Init+0x64>)
 8002240:	2200      	movs	r2, #0
 8002242:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002244:	4b07      	ldr	r3, [pc, #28]	; (8002264 <MX_SPI2_Init+0x64>)
 8002246:	2200      	movs	r2, #0
 8002248:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800224a:	4b06      	ldr	r3, [pc, #24]	; (8002264 <MX_SPI2_Init+0x64>)
 800224c:	220a      	movs	r2, #10
 800224e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002250:	4804      	ldr	r0, [pc, #16]	; (8002264 <MX_SPI2_Init+0x64>)
 8002252:	f004 fcf7 	bl	8006c44 <HAL_SPI_Init>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800225c:	f7ff ffbf 	bl	80021de <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002260:	bf00      	nop
 8002262:	bd80      	pop	{r7, pc}
 8002264:	200002c4 	.word	0x200002c4
 8002268:	40003800 	.word	0x40003800

0800226c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b088      	sub	sp, #32
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002274:	f107 0310 	add.w	r3, r7, #16
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	605a      	str	r2, [r3, #4]
 800227e:	609a      	str	r2, [r3, #8]
 8002280:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a1c      	ldr	r2, [pc, #112]	; (80022f8 <HAL_SPI_MspInit+0x8c>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d131      	bne.n	80022f0 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800228c:	4b1b      	ldr	r3, [pc, #108]	; (80022fc <HAL_SPI_MspInit+0x90>)
 800228e:	69db      	ldr	r3, [r3, #28]
 8002290:	4a1a      	ldr	r2, [pc, #104]	; (80022fc <HAL_SPI_MspInit+0x90>)
 8002292:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002296:	61d3      	str	r3, [r2, #28]
 8002298:	4b18      	ldr	r3, [pc, #96]	; (80022fc <HAL_SPI_MspInit+0x90>)
 800229a:	69db      	ldr	r3, [r3, #28]
 800229c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022a0:	60fb      	str	r3, [r7, #12]
 80022a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022a4:	4b15      	ldr	r3, [pc, #84]	; (80022fc <HAL_SPI_MspInit+0x90>)
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	4a14      	ldr	r2, [pc, #80]	; (80022fc <HAL_SPI_MspInit+0x90>)
 80022aa:	f043 0308 	orr.w	r3, r3, #8
 80022ae:	6193      	str	r3, [r2, #24]
 80022b0:	4b12      	ldr	r3, [pc, #72]	; (80022fc <HAL_SPI_MspInit+0x90>)
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	f003 0308 	and.w	r3, r3, #8
 80022b8:	60bb      	str	r3, [r7, #8]
 80022ba:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80022bc:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80022c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c2:	2302      	movs	r3, #2
 80022c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022c6:	2303      	movs	r3, #3
 80022c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ca:	f107 0310 	add.w	r3, r7, #16
 80022ce:	4619      	mov	r1, r3
 80022d0:	480b      	ldr	r0, [pc, #44]	; (8002300 <HAL_SPI_MspInit+0x94>)
 80022d2:	f002 fa53 	bl	800477c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80022d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022dc:	2300      	movs	r3, #0
 80022de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e0:	2300      	movs	r3, #0
 80022e2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022e4:	f107 0310 	add.w	r3, r7, #16
 80022e8:	4619      	mov	r1, r3
 80022ea:	4805      	ldr	r0, [pc, #20]	; (8002300 <HAL_SPI_MspInit+0x94>)
 80022ec:	f002 fa46 	bl	800477c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80022f0:	bf00      	nop
 80022f2:	3720      	adds	r7, #32
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40003800 	.word	0x40003800
 80022fc:	40021000 	.word	0x40021000
 8002300:	40010c00 	.word	0x40010c00

08002304 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002304:	b480      	push	{r7}
 8002306:	b085      	sub	sp, #20
 8002308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800230a:	4b15      	ldr	r3, [pc, #84]	; (8002360 <HAL_MspInit+0x5c>)
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	4a14      	ldr	r2, [pc, #80]	; (8002360 <HAL_MspInit+0x5c>)
 8002310:	f043 0301 	orr.w	r3, r3, #1
 8002314:	6193      	str	r3, [r2, #24]
 8002316:	4b12      	ldr	r3, [pc, #72]	; (8002360 <HAL_MspInit+0x5c>)
 8002318:	699b      	ldr	r3, [r3, #24]
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	60bb      	str	r3, [r7, #8]
 8002320:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002322:	4b0f      	ldr	r3, [pc, #60]	; (8002360 <HAL_MspInit+0x5c>)
 8002324:	69db      	ldr	r3, [r3, #28]
 8002326:	4a0e      	ldr	r2, [pc, #56]	; (8002360 <HAL_MspInit+0x5c>)
 8002328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800232c:	61d3      	str	r3, [r2, #28]
 800232e:	4b0c      	ldr	r3, [pc, #48]	; (8002360 <HAL_MspInit+0x5c>)
 8002330:	69db      	ldr	r3, [r3, #28]
 8002332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002336:	607b      	str	r3, [r7, #4]
 8002338:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800233a:	4b0a      	ldr	r3, [pc, #40]	; (8002364 <HAL_MspInit+0x60>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	60fb      	str	r3, [r7, #12]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002346:	60fb      	str	r3, [r7, #12]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800234e:	60fb      	str	r3, [r7, #12]
 8002350:	4a04      	ldr	r2, [pc, #16]	; (8002364 <HAL_MspInit+0x60>)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002356:	bf00      	nop
 8002358:	3714      	adds	r7, #20
 800235a:	46bd      	mov	sp, r7
 800235c:	bc80      	pop	{r7}
 800235e:	4770      	bx	lr
 8002360:	40021000 	.word	0x40021000
 8002364:	40010000 	.word	0x40010000

08002368 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800236c:	bf00      	nop
 800236e:	46bd      	mov	sp, r7
 8002370:	bc80      	pop	{r7}
 8002372:	4770      	bx	lr

08002374 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002378:	e7fe      	b.n	8002378 <HardFault_Handler+0x4>

0800237a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800237a:	b480      	push	{r7}
 800237c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800237e:	e7fe      	b.n	800237e <MemManage_Handler+0x4>

08002380 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002384:	e7fe      	b.n	8002384 <BusFault_Handler+0x4>

08002386 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002386:	b480      	push	{r7}
 8002388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800238a:	e7fe      	b.n	800238a <UsageFault_Handler+0x4>

0800238c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002390:	bf00      	nop
 8002392:	46bd      	mov	sp, r7
 8002394:	bc80      	pop	{r7}
 8002396:	4770      	bx	lr

08002398 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800239c:	bf00      	nop
 800239e:	46bd      	mov	sp, r7
 80023a0:	bc80      	pop	{r7}
 80023a2:	4770      	bx	lr

080023a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023a8:	bf00      	nop
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bc80      	pop	{r7}
 80023ae:	4770      	bx	lr

080023b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023b4:	f000 fd56 	bl	8002e64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023b8:	bf00      	nop
 80023ba:	bd80      	pop	{r7, pc}

080023bc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80023c0:	2001      	movs	r0, #1
 80023c2:	f002 fcc7 	bl	8004d54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80023c6:	bf00      	nop
 80023c8:	bd80      	pop	{r7, pc}

080023ca <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80023ce:	2002      	movs	r0, #2
 80023d0:	f002 fcc0 	bl	8004d54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80023d4:	bf00      	nop
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80023dc:	2004      	movs	r0, #4
 80023de:	f002 fcb9 	bl	8004d54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80023e2:	bf00      	nop
 80023e4:	bd80      	pop	{r7, pc}
	...

080023e8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80023ec:	4802      	ldr	r0, [pc, #8]	; (80023f8 <TIM3_IRQHandler+0x10>)
 80023ee:	f005 fb8f 	bl	8007b10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80023f2:	bf00      	nop
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	2000031c 	.word	0x2000031c

080023fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002400:	4804      	ldr	r0, [pc, #16]	; (8002414 <USART2_IRQHandler+0x18>)
 8002402:	f006 fd0b 	bl	8008e1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  HAL_UART_Receive_IT(&huart2, nexMessage, 10);
 8002406:	220a      	movs	r2, #10
 8002408:	4903      	ldr	r1, [pc, #12]	; (8002418 <USART2_IRQHandler+0x1c>)
 800240a:	4802      	ldr	r0, [pc, #8]	; (8002414 <USART2_IRQHandler+0x18>)
 800240c:	f006 fcb1 	bl	8008d72 <HAL_UART_Receive_IT>
  /* USER CODE END USART2_IRQn 1 */
}
 8002410:	bf00      	nop
 8002412:	bd80      	pop	{r7, pc}
 8002414:	200003ec 	.word	0x200003ec
 8002418:	20000180 	.word	0x20000180

0800241c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002420:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002424:	f002 fc96 	bl	8004d54 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002428:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800242c:	f002 fc92 	bl	8004d54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002430:	bf00      	nop
 8002432:	bd80      	pop	{r7, pc}

08002434 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8002438:	4802      	ldr	r0, [pc, #8]	; (8002444 <DMA2_Channel3_IRQHandler+0x10>)
 800243a:	f001 ff35 	bl	80042a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 800243e:	bf00      	nop
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	200001c4 	.word	0x200001c4

08002448 <_read>:
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
 8002454:	2300      	movs	r3, #0
 8002456:	617b      	str	r3, [r7, #20]
 8002458:	e00a      	b.n	8002470 <_read+0x28>
 800245a:	f3af 8000 	nop.w
 800245e:	4601      	mov	r1, r0
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	1c5a      	adds	r2, r3, #1
 8002464:	60ba      	str	r2, [r7, #8]
 8002466:	b2ca      	uxtb	r2, r1
 8002468:	701a      	strb	r2, [r3, #0]
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	3301      	adds	r3, #1
 800246e:	617b      	str	r3, [r7, #20]
 8002470:	697a      	ldr	r2, [r7, #20]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	429a      	cmp	r2, r3
 8002476:	dbf0      	blt.n	800245a <_read+0x12>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4618      	mov	r0, r3
 800247c:	3718      	adds	r7, #24
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <_write>:
 8002482:	b580      	push	{r7, lr}
 8002484:	b086      	sub	sp, #24
 8002486:	af00      	add	r7, sp, #0
 8002488:	60f8      	str	r0, [r7, #12]
 800248a:	60b9      	str	r1, [r7, #8]
 800248c:	607a      	str	r2, [r7, #4]
 800248e:	2300      	movs	r3, #0
 8002490:	617b      	str	r3, [r7, #20]
 8002492:	e009      	b.n	80024a8 <_write+0x26>
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	1c5a      	adds	r2, r3, #1
 8002498:	60ba      	str	r2, [r7, #8]
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	4618      	mov	r0, r3
 800249e:	f000 fc61 	bl	8002d64 <__io_putchar>
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	3301      	adds	r3, #1
 80024a6:	617b      	str	r3, [r7, #20]
 80024a8:	697a      	ldr	r2, [r7, #20]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	dbf1      	blt.n	8002494 <_write+0x12>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	4618      	mov	r0, r3
 80024b4:	3718      	adds	r7, #24
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <_close>:
 80024ba:	b480      	push	{r7}
 80024bc:	b083      	sub	sp, #12
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
 80024c2:	f04f 33ff 	mov.w	r3, #4294967295
 80024c6:	4618      	mov	r0, r3
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bc80      	pop	{r7}
 80024ce:	4770      	bx	lr

080024d0 <_fstat>:
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024e0:	605a      	str	r2, [r3, #4]
 80024e2:	2300      	movs	r3, #0
 80024e4:	4618      	mov	r0, r3
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bc80      	pop	{r7}
 80024ec:	4770      	bx	lr

080024ee <_isatty>:
 80024ee:	b480      	push	{r7}
 80024f0:	b083      	sub	sp, #12
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
 80024f6:	2301      	movs	r3, #1
 80024f8:	4618      	mov	r0, r3
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bc80      	pop	{r7}
 8002500:	4770      	bx	lr

08002502 <_lseek>:
 8002502:	b480      	push	{r7}
 8002504:	b085      	sub	sp, #20
 8002506:	af00      	add	r7, sp, #0
 8002508:	60f8      	str	r0, [r7, #12]
 800250a:	60b9      	str	r1, [r7, #8]
 800250c:	607a      	str	r2, [r7, #4]
 800250e:	2300      	movs	r3, #0
 8002510:	4618      	mov	r0, r3
 8002512:	3714      	adds	r7, #20
 8002514:	46bd      	mov	sp, r7
 8002516:	bc80      	pop	{r7}
 8002518:	4770      	bx	lr
	...

0800251c <_sbrk>:
 800251c:	b580      	push	{r7, lr}
 800251e:	b086      	sub	sp, #24
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	4a14      	ldr	r2, [pc, #80]	; (8002578 <_sbrk+0x5c>)
 8002526:	4b15      	ldr	r3, [pc, #84]	; (800257c <_sbrk+0x60>)
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	617b      	str	r3, [r7, #20]
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	613b      	str	r3, [r7, #16]
 8002530:	4b13      	ldr	r3, [pc, #76]	; (8002580 <_sbrk+0x64>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d102      	bne.n	800253e <_sbrk+0x22>
 8002538:	4b11      	ldr	r3, [pc, #68]	; (8002580 <_sbrk+0x64>)
 800253a:	4a12      	ldr	r2, [pc, #72]	; (8002584 <_sbrk+0x68>)
 800253c:	601a      	str	r2, [r3, #0]
 800253e:	4b10      	ldr	r3, [pc, #64]	; (8002580 <_sbrk+0x64>)
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4413      	add	r3, r2
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	429a      	cmp	r2, r3
 800254a:	d207      	bcs.n	800255c <_sbrk+0x40>
 800254c:	f006 ffa8 	bl	80094a0 <__errno>
 8002550:	4603      	mov	r3, r0
 8002552:	220c      	movs	r2, #12
 8002554:	601a      	str	r2, [r3, #0]
 8002556:	f04f 33ff 	mov.w	r3, #4294967295
 800255a:	e009      	b.n	8002570 <_sbrk+0x54>
 800255c:	4b08      	ldr	r3, [pc, #32]	; (8002580 <_sbrk+0x64>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	60fb      	str	r3, [r7, #12]
 8002562:	4b07      	ldr	r3, [pc, #28]	; (8002580 <_sbrk+0x64>)
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4413      	add	r3, r2
 800256a:	4a05      	ldr	r2, [pc, #20]	; (8002580 <_sbrk+0x64>)
 800256c:	6013      	str	r3, [r2, #0]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	4618      	mov	r0, r3
 8002572:	3718      	adds	r7, #24
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	20018000 	.word	0x20018000
 800257c:	00001000 	.word	0x00001000
 8002580:	20000174 	.word	0x20000174
 8002584:	20000440 	.word	0x20000440

08002588 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800258c:	bf00      	nop
 800258e:	46bd      	mov	sp, r7
 8002590:	bc80      	pop	{r7}
 8002592:	4770      	bx	lr

08002594 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b08a      	sub	sp, #40	; 0x28
 8002598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800259a:	f107 0320 	add.w	r3, r7, #32
 800259e:	2200      	movs	r2, #0
 80025a0:	601a      	str	r2, [r3, #0]
 80025a2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025a4:	1d3b      	adds	r3, r7, #4
 80025a6:	2200      	movs	r2, #0
 80025a8:	601a      	str	r2, [r3, #0]
 80025aa:	605a      	str	r2, [r3, #4]
 80025ac:	609a      	str	r2, [r3, #8]
 80025ae:	60da      	str	r2, [r3, #12]
 80025b0:	611a      	str	r2, [r3, #16]
 80025b2:	615a      	str	r2, [r3, #20]
 80025b4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80025b6:	4b22      	ldr	r3, [pc, #136]	; (8002640 <MX_TIM3_Init+0xac>)
 80025b8:	4a22      	ldr	r2, [pc, #136]	; (8002644 <MX_TIM3_Init+0xb0>)
 80025ba:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 80025bc:	4b20      	ldr	r3, [pc, #128]	; (8002640 <MX_TIM3_Init+0xac>)
 80025be:	223f      	movs	r2, #63	; 0x3f
 80025c0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025c2:	4b1f      	ldr	r3, [pc, #124]	; (8002640 <MX_TIM3_Init+0xac>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 499;
 80025c8:	4b1d      	ldr	r3, [pc, #116]	; (8002640 <MX_TIM3_Init+0xac>)
 80025ca:	f240 12f3 	movw	r2, #499	; 0x1f3
 80025ce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025d0:	4b1b      	ldr	r3, [pc, #108]	; (8002640 <MX_TIM3_Init+0xac>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025d6:	4b1a      	ldr	r3, [pc, #104]	; (8002640 <MX_TIM3_Init+0xac>)
 80025d8:	2200      	movs	r2, #0
 80025da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80025dc:	4818      	ldr	r0, [pc, #96]	; (8002640 <MX_TIM3_Init+0xac>)
 80025de:	f004 fe65 	bl	80072ac <HAL_TIM_PWM_Init>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80025e8:	f7ff fdf9 	bl	80021de <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80025ec:	2320      	movs	r3, #32
 80025ee:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025f0:	2300      	movs	r3, #0
 80025f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80025f4:	f107 0320 	add.w	r3, r7, #32
 80025f8:	4619      	mov	r1, r3
 80025fa:	4811      	ldr	r0, [pc, #68]	; (8002640 <MX_TIM3_Init+0xac>)
 80025fc:	f006 f8dc 	bl	80087b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002606:	f7ff fdea 	bl	80021de <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800260a:	2360      	movs	r3, #96	; 0x60
 800260c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 250;
 800260e:	23fa      	movs	r3, #250	; 0xfa
 8002610:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002612:	2302      	movs	r3, #2
 8002614:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002616:	2300      	movs	r3, #0
 8002618:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800261a:	1d3b      	adds	r3, r7, #4
 800261c:	2208      	movs	r2, #8
 800261e:	4619      	mov	r1, r3
 8002620:	4807      	ldr	r0, [pc, #28]	; (8002640 <MX_TIM3_Init+0xac>)
 8002622:	f005 fb7d 	bl	8007d20 <HAL_TIM_PWM_ConfigChannel>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800262c:	f7ff fdd7 	bl	80021de <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002630:	4803      	ldr	r0, [pc, #12]	; (8002640 <MX_TIM3_Init+0xac>)
 8002632:	f000 f881 	bl	8002738 <HAL_TIM_MspPostInit>

}
 8002636:	bf00      	nop
 8002638:	3728      	adds	r7, #40	; 0x28
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	2000031c 	.word	0x2000031c
 8002644:	40000400 	.word	0x40000400

08002648 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800264e:	463b      	mov	r3, r7
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002656:	4b14      	ldr	r3, [pc, #80]	; (80026a8 <MX_TIM6_Init+0x60>)
 8002658:	4a14      	ldr	r2, [pc, #80]	; (80026ac <MX_TIM6_Init+0x64>)
 800265a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1;
 800265c:	4b12      	ldr	r3, [pc, #72]	; (80026a8 <MX_TIM6_Init+0x60>)
 800265e:	2201      	movs	r2, #1
 8002660:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002662:	4b11      	ldr	r3, [pc, #68]	; (80026a8 <MX_TIM6_Init+0x60>)
 8002664:	2200      	movs	r2, #0
 8002666:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 8002668:	4b0f      	ldr	r3, [pc, #60]	; (80026a8 <MX_TIM6_Init+0x60>)
 800266a:	2263      	movs	r2, #99	; 0x63
 800266c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800266e:	4b0e      	ldr	r3, [pc, #56]	; (80026a8 <MX_TIM6_Init+0x60>)
 8002670:	2280      	movs	r2, #128	; 0x80
 8002672:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002674:	480c      	ldr	r0, [pc, #48]	; (80026a8 <MX_TIM6_Init+0x60>)
 8002676:	f004 fc6b 	bl	8006f50 <HAL_TIM_Base_Init>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 8002680:	f7ff fdad 	bl	80021de <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002684:	2320      	movs	r3, #32
 8002686:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002688:	2300      	movs	r3, #0
 800268a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800268c:	463b      	mov	r3, r7
 800268e:	4619      	mov	r1, r3
 8002690:	4805      	ldr	r0, [pc, #20]	; (80026a8 <MX_TIM6_Init+0x60>)
 8002692:	f006 f891 	bl	80087b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 800269c:	f7ff fd9f 	bl	80021de <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80026a0:	bf00      	nop
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	20000364 	.word	0x20000364
 80026ac:	40001000 	.word	0x40001000

080026b0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a0d      	ldr	r2, [pc, #52]	; (80026f4 <HAL_TIM_PWM_MspInit+0x44>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d113      	bne.n	80026ea <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026c2:	4b0d      	ldr	r3, [pc, #52]	; (80026f8 <HAL_TIM_PWM_MspInit+0x48>)
 80026c4:	69db      	ldr	r3, [r3, #28]
 80026c6:	4a0c      	ldr	r2, [pc, #48]	; (80026f8 <HAL_TIM_PWM_MspInit+0x48>)
 80026c8:	f043 0302 	orr.w	r3, r3, #2
 80026cc:	61d3      	str	r3, [r2, #28]
 80026ce:	4b0a      	ldr	r3, [pc, #40]	; (80026f8 <HAL_TIM_PWM_MspInit+0x48>)
 80026d0:	69db      	ldr	r3, [r3, #28]
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	60fb      	str	r3, [r7, #12]
 80026d8:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80026da:	2200      	movs	r2, #0
 80026dc:	2100      	movs	r1, #0
 80026de:	201d      	movs	r0, #29
 80026e0:	f001 f894 	bl	800380c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80026e4:	201d      	movs	r0, #29
 80026e6:	f001 f8bd 	bl	8003864 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80026ea:	bf00      	nop
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	40000400 	.word	0x40000400
 80026f8:	40021000 	.word	0x40021000

080026fc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a09      	ldr	r2, [pc, #36]	; (8002730 <HAL_TIM_Base_MspInit+0x34>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d10b      	bne.n	8002726 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800270e:	4b09      	ldr	r3, [pc, #36]	; (8002734 <HAL_TIM_Base_MspInit+0x38>)
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	4a08      	ldr	r2, [pc, #32]	; (8002734 <HAL_TIM_Base_MspInit+0x38>)
 8002714:	f043 0310 	orr.w	r3, r3, #16
 8002718:	61d3      	str	r3, [r2, #28]
 800271a:	4b06      	ldr	r3, [pc, #24]	; (8002734 <HAL_TIM_Base_MspInit+0x38>)
 800271c:	69db      	ldr	r3, [r3, #28]
 800271e:	f003 0310 	and.w	r3, r3, #16
 8002722:	60fb      	str	r3, [r7, #12]
 8002724:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8002726:	bf00      	nop
 8002728:	3714      	adds	r7, #20
 800272a:	46bd      	mov	sp, r7
 800272c:	bc80      	pop	{r7}
 800272e:	4770      	bx	lr
 8002730:	40001000 	.word	0x40001000
 8002734:	40021000 	.word	0x40021000

08002738 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b088      	sub	sp, #32
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002740:	f107 030c 	add.w	r3, r7, #12
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	605a      	str	r2, [r3, #4]
 800274a:	609a      	str	r2, [r3, #8]
 800274c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a19      	ldr	r2, [pc, #100]	; (80027b8 <HAL_TIM_MspPostInit+0x80>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d12a      	bne.n	80027ae <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002758:	4b18      	ldr	r3, [pc, #96]	; (80027bc <HAL_TIM_MspPostInit+0x84>)
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	4a17      	ldr	r2, [pc, #92]	; (80027bc <HAL_TIM_MspPostInit+0x84>)
 800275e:	f043 0310 	orr.w	r3, r3, #16
 8002762:	6193      	str	r3, [r2, #24]
 8002764:	4b15      	ldr	r3, [pc, #84]	; (80027bc <HAL_TIM_MspPostInit+0x84>)
 8002766:	699b      	ldr	r3, [r3, #24]
 8002768:	f003 0310 	and.w	r3, r3, #16
 800276c:	60bb      	str	r3, [r7, #8]
 800276e:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = M_STEP_Pin;
 8002770:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002774:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002776:	2302      	movs	r3, #2
 8002778:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800277a:	2302      	movs	r3, #2
 800277c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(M_STEP_GPIO_Port, &GPIO_InitStruct);
 800277e:	f107 030c 	add.w	r3, r7, #12
 8002782:	4619      	mov	r1, r3
 8002784:	480e      	ldr	r0, [pc, #56]	; (80027c0 <HAL_TIM_MspPostInit+0x88>)
 8002786:	f001 fff9 	bl	800477c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_ENABLE();
 800278a:	4b0e      	ldr	r3, [pc, #56]	; (80027c4 <HAL_TIM_MspPostInit+0x8c>)
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	61fb      	str	r3, [r7, #28]
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002796:	61fb      	str	r3, [r7, #28]
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800279e:	61fb      	str	r3, [r7, #28]
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 80027a6:	61fb      	str	r3, [r7, #28]
 80027a8:	4a06      	ldr	r2, [pc, #24]	; (80027c4 <HAL_TIM_MspPostInit+0x8c>)
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80027ae:	bf00      	nop
 80027b0:	3720      	adds	r7, #32
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	40000400 	.word	0x40000400
 80027bc:	40021000 	.word	0x40021000
 80027c0:	40011000 	.word	0x40011000
 80027c4:	40010000 	.word	0x40010000

080027c8 <HAL_TIM_PWM_PulseFinishedCallback>:
}

/* USER CODE BEGIN 1 */

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
//	printf("PulseFinishedCallback\n");
	if(htim->Instance == TIM3)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a2e      	ldr	r2, [pc, #184]	; (8002890 <HAL_TIM_PWM_PulseFinishedCallback+0xc8>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d154      	bne.n	8002884 <HAL_TIM_PWM_PulseFinishedCallback+0xbc>
	{
		if(cnt > step_cnt-TBL_SIZE) //deceleration
 80027da:	4b2e      	ldr	r3, [pc, #184]	; (8002894 <HAL_TIM_PWM_PulseFinishedCallback+0xcc>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80027e2:	4b2d      	ldr	r3, [pc, #180]	; (8002898 <HAL_TIM_PWM_PulseFinishedCallback+0xd0>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d225      	bcs.n	8002836 <HAL_TIM_PWM_PulseFinishedCallback+0x6e>
		{
//			printf("decleration-- [%d]\n",accel_tbl[--tbl_index]);

			htim3.Instance->CCR3 = (1000000/accel_tbl[--tbl_index])/2;
 80027ea:	4b2c      	ldr	r3, [pc, #176]	; (800289c <HAL_TIM_PWM_PulseFinishedCallback+0xd4>)
 80027ec:	881b      	ldrh	r3, [r3, #0]
 80027ee:	3b01      	subs	r3, #1
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	4b2a      	ldr	r3, [pc, #168]	; (800289c <HAL_TIM_PWM_PulseFinishedCallback+0xd4>)
 80027f4:	801a      	strh	r2, [r3, #0]
 80027f6:	4b29      	ldr	r3, [pc, #164]	; (800289c <HAL_TIM_PWM_PulseFinishedCallback+0xd4>)
 80027f8:	881b      	ldrh	r3, [r3, #0]
 80027fa:	461a      	mov	r2, r3
 80027fc:	4b28      	ldr	r3, [pc, #160]	; (80028a0 <HAL_TIM_PWM_PulseFinishedCallback+0xd8>)
 80027fe:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002802:	461a      	mov	r2, r3
 8002804:	4b27      	ldr	r3, [pc, #156]	; (80028a4 <HAL_TIM_PWM_PulseFinishedCallback+0xdc>)
 8002806:	fb93 f3f2 	sdiv	r3, r3, r2
 800280a:	0fda      	lsrs	r2, r3, #31
 800280c:	4413      	add	r3, r2
 800280e:	105b      	asrs	r3, r3, #1
 8002810:	461a      	mov	r2, r3
 8002812:	4b25      	ldr	r3, [pc, #148]	; (80028a8 <HAL_TIM_PWM_PulseFinishedCallback+0xe0>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	63da      	str	r2, [r3, #60]	; 0x3c
			htim3.Instance->ARR = 1000000/accel_tbl[tbl_index] - 1;
 8002818:	4b20      	ldr	r3, [pc, #128]	; (800289c <HAL_TIM_PWM_PulseFinishedCallback+0xd4>)
 800281a:	881b      	ldrh	r3, [r3, #0]
 800281c:	461a      	mov	r2, r3
 800281e:	4b20      	ldr	r3, [pc, #128]	; (80028a0 <HAL_TIM_PWM_PulseFinishedCallback+0xd8>)
 8002820:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002824:	461a      	mov	r2, r3
 8002826:	4b1f      	ldr	r3, [pc, #124]	; (80028a4 <HAL_TIM_PWM_PulseFinishedCallback+0xdc>)
 8002828:	fb93 f3f2 	sdiv	r3, r3, r2
 800282c:	1e5a      	subs	r2, r3, #1
 800282e:	4b1e      	ldr	r3, [pc, #120]	; (80028a8 <HAL_TIM_PWM_PulseFinishedCallback+0xe0>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	62da      	str	r2, [r3, #44]	; 0x2c

			htim3.Instance->CCR3 = (1000000/accel_tbl[tbl_index])/2;
			htim3.Instance->ARR = 1000000/accel_tbl[tbl_index++] - 1;
		}
	}
}
 8002834:	e026      	b.n	8002884 <HAL_TIM_PWM_PulseFinishedCallback+0xbc>
		else if(tbl_index < TBL_SIZE) // acceleration
 8002836:	4b19      	ldr	r3, [pc, #100]	; (800289c <HAL_TIM_PWM_PulseFinishedCallback+0xd4>)
 8002838:	881b      	ldrh	r3, [r3, #0]
 800283a:	2b63      	cmp	r3, #99	; 0x63
 800283c:	d822      	bhi.n	8002884 <HAL_TIM_PWM_PulseFinishedCallback+0xbc>
			htim3.Instance->CCR3 = (1000000/accel_tbl[tbl_index])/2;
 800283e:	4b17      	ldr	r3, [pc, #92]	; (800289c <HAL_TIM_PWM_PulseFinishedCallback+0xd4>)
 8002840:	881b      	ldrh	r3, [r3, #0]
 8002842:	461a      	mov	r2, r3
 8002844:	4b16      	ldr	r3, [pc, #88]	; (80028a0 <HAL_TIM_PWM_PulseFinishedCallback+0xd8>)
 8002846:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800284a:	461a      	mov	r2, r3
 800284c:	4b15      	ldr	r3, [pc, #84]	; (80028a4 <HAL_TIM_PWM_PulseFinishedCallback+0xdc>)
 800284e:	fb93 f3f2 	sdiv	r3, r3, r2
 8002852:	0fda      	lsrs	r2, r3, #31
 8002854:	4413      	add	r3, r2
 8002856:	105b      	asrs	r3, r3, #1
 8002858:	461a      	mov	r2, r3
 800285a:	4b13      	ldr	r3, [pc, #76]	; (80028a8 <HAL_TIM_PWM_PulseFinishedCallback+0xe0>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	63da      	str	r2, [r3, #60]	; 0x3c
			htim3.Instance->ARR = 1000000/accel_tbl[tbl_index++] - 1;
 8002860:	4b0e      	ldr	r3, [pc, #56]	; (800289c <HAL_TIM_PWM_PulseFinishedCallback+0xd4>)
 8002862:	881b      	ldrh	r3, [r3, #0]
 8002864:	1c5a      	adds	r2, r3, #1
 8002866:	b291      	uxth	r1, r2
 8002868:	4a0c      	ldr	r2, [pc, #48]	; (800289c <HAL_TIM_PWM_PulseFinishedCallback+0xd4>)
 800286a:	8011      	strh	r1, [r2, #0]
 800286c:	461a      	mov	r2, r3
 800286e:	4b0c      	ldr	r3, [pc, #48]	; (80028a0 <HAL_TIM_PWM_PulseFinishedCallback+0xd8>)
 8002870:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002874:	461a      	mov	r2, r3
 8002876:	4b0b      	ldr	r3, [pc, #44]	; (80028a4 <HAL_TIM_PWM_PulseFinishedCallback+0xdc>)
 8002878:	fb93 f3f2 	sdiv	r3, r3, r2
 800287c:	1e5a      	subs	r2, r3, #1
 800287e:	4b0a      	ldr	r3, [pc, #40]	; (80028a8 <HAL_TIM_PWM_PulseFinishedCallback+0xe0>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	bc80      	pop	{r7}
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	40000400 	.word	0x40000400
 8002894:	20000000 	.word	0x20000000
 8002898:	20000178 	.word	0x20000178
 800289c:	2000017c 	.word	0x2000017c
 80028a0:	200000a0 	.word	0x200000a0
 80028a4:	000f4240 	.word	0x000f4240
 80028a8:	2000031c 	.word	0x2000031c

080028ac <HAL_TIM_OC_DelayElapsedCallback>:
//	printf("PeriodElapsedCallback\n");

}
*/
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
//	printf("OC_DelayElapsedCallback\n");
	if(htim->Instance == TIM3)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a2e      	ldr	r2, [pc, #184]	; (8002974 <HAL_TIM_OC_DelayElapsedCallback+0xc8>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d156      	bne.n	800296c <HAL_TIM_OC_DelayElapsedCallback+0xc0>
	{
		if(drv8880_state == 1)
 80028be:	4b2e      	ldr	r3, [pc, #184]	; (8002978 <HAL_TIM_OC_DelayElapsedCallback+0xcc>)
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d152      	bne.n	800296c <HAL_TIM_OC_DelayElapsedCallback+0xc0>
		{
			if(dir == 1)
 80028c6:	4b2d      	ldr	r3, [pc, #180]	; (800297c <HAL_TIM_OC_DelayElapsedCallback+0xd0>)
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d118      	bne.n	8002900 <HAL_TIM_OC_DelayElapsedCallback+0x54>
			{
				if(cnt < step_cnt)
 80028ce:	4b2c      	ldr	r3, [pc, #176]	; (8002980 <HAL_TIM_OC_DelayElapsedCallback+0xd4>)
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	4b2c      	ldr	r3, [pc, #176]	; (8002984 <HAL_TIM_OC_DelayElapsedCallback+0xd8>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d205      	bcs.n	80028e6 <HAL_TIM_OC_DelayElapsedCallback+0x3a>
				{
					cnt++;
 80028da:	4b29      	ldr	r3, [pc, #164]	; (8002980 <HAL_TIM_OC_DelayElapsedCallback+0xd4>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	3301      	adds	r3, #1
 80028e0:	4a27      	ldr	r2, [pc, #156]	; (8002980 <HAL_TIM_OC_DelayElapsedCallback+0xd4>)
 80028e2:	6013      	str	r3, [r2, #0]
					}
				}
			}
		}
	}
}
 80028e4:	e042      	b.n	800296c <HAL_TIM_OC_DelayElapsedCallback+0xc0>
					cnt = 0;
 80028e6:	4b26      	ldr	r3, [pc, #152]	; (8002980 <HAL_TIM_OC_DelayElapsedCallback+0xd4>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]
					dir = 0;
 80028ec:	4b23      	ldr	r3, [pc, #140]	; (800297c <HAL_TIM_OC_DelayElapsedCallback+0xd0>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	701a      	strb	r2, [r3, #0]
					tbl_index = 0;
 80028f2:	4b25      	ldr	r3, [pc, #148]	; (8002988 <HAL_TIM_OC_DelayElapsedCallback+0xdc>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	801a      	strh	r2, [r3, #0]
					GPIOC->BRR = M_DIR_Pin;
 80028f8:	4b24      	ldr	r3, [pc, #144]	; (800298c <HAL_TIM_OC_DelayElapsedCallback+0xe0>)
 80028fa:	2280      	movs	r2, #128	; 0x80
 80028fc:	615a      	str	r2, [r3, #20]
}
 80028fe:	e035      	b.n	800296c <HAL_TIM_OC_DelayElapsedCallback+0xc0>
				if(cnt < step_cnt)
 8002900:	4b1f      	ldr	r3, [pc, #124]	; (8002980 <HAL_TIM_OC_DelayElapsedCallback+0xd4>)
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	4b1f      	ldr	r3, [pc, #124]	; (8002984 <HAL_TIM_OC_DelayElapsedCallback+0xd8>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	429a      	cmp	r2, r3
 800290a:	d205      	bcs.n	8002918 <HAL_TIM_OC_DelayElapsedCallback+0x6c>
					cnt++;
 800290c:	4b1c      	ldr	r3, [pc, #112]	; (8002980 <HAL_TIM_OC_DelayElapsedCallback+0xd4>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	3301      	adds	r3, #1
 8002912:	4a1b      	ldr	r2, [pc, #108]	; (8002980 <HAL_TIM_OC_DelayElapsedCallback+0xd4>)
 8002914:	6013      	str	r3, [r2, #0]
}
 8002916:	e029      	b.n	800296c <HAL_TIM_OC_DelayElapsedCallback+0xc0>
					cnt = 0;
 8002918:	4b19      	ldr	r3, [pc, #100]	; (8002980 <HAL_TIM_OC_DelayElapsedCallback+0xd4>)
 800291a:	2200      	movs	r2, #0
 800291c:	601a      	str	r2, [r3, #0]
					dir = 1;
 800291e:	4b17      	ldr	r3, [pc, #92]	; (800297c <HAL_TIM_OC_DelayElapsedCallback+0xd0>)
 8002920:	2201      	movs	r2, #1
 8002922:	701a      	strb	r2, [r3, #0]
					tbl_index = 0;
 8002924:	4b18      	ldr	r3, [pc, #96]	; (8002988 <HAL_TIM_OC_DelayElapsedCallback+0xdc>)
 8002926:	2200      	movs	r2, #0
 8002928:	801a      	strh	r2, [r3, #0]
					shot_cnt--;
 800292a:	4b19      	ldr	r3, [pc, #100]	; (8002990 <HAL_TIM_OC_DelayElapsedCallback+0xe4>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	3b01      	subs	r3, #1
 8002930:	4a17      	ldr	r2, [pc, #92]	; (8002990 <HAL_TIM_OC_DelayElapsedCallback+0xe4>)
 8002932:	6013      	str	r3, [r2, #0]
					GPIOC->BSRR = M_DIR_Pin;
 8002934:	4b15      	ldr	r3, [pc, #84]	; (800298c <HAL_TIM_OC_DelayElapsedCallback+0xe0>)
 8002936:	2280      	movs	r2, #128	; 0x80
 8002938:	611a      	str	r2, [r3, #16]
					if(shot_cnt == 0)
 800293a:	4b15      	ldr	r3, [pc, #84]	; (8002990 <HAL_TIM_OC_DelayElapsedCallback+0xe4>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d114      	bne.n	800296c <HAL_TIM_OC_DelayElapsedCallback+0xc0>
						HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_3);
 8002942:	2108      	movs	r1, #8
 8002944:	4813      	ldr	r0, [pc, #76]	; (8002994 <HAL_TIM_OC_DelayElapsedCallback+0xe8>)
 8002946:	f004 ff6f 	bl	8007828 <HAL_TIM_PWM_Stop_IT>
						drv8880_disable();
 800294a:	f7fe fc51 	bl	80011f0 <drv8880_disable>
						tbl_index = 0;
 800294e:	4b0e      	ldr	r3, [pc, #56]	; (8002988 <HAL_TIM_OC_DelayElapsedCallback+0xdc>)
 8002950:	2200      	movs	r2, #0
 8002952:	801a      	strh	r2, [r3, #0]
						htim3.Instance->CCR3 = 250;
 8002954:	4b0f      	ldr	r3, [pc, #60]	; (8002994 <HAL_TIM_OC_DelayElapsedCallback+0xe8>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	22fa      	movs	r2, #250	; 0xfa
 800295a:	63da      	str	r2, [r3, #60]	; 0x3c
						htim3.Instance->ARR = 499;
 800295c:	4b0d      	ldr	r3, [pc, #52]	; (8002994 <HAL_TIM_OC_DelayElapsedCallback+0xe8>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002964:	62da      	str	r2, [r3, #44]	; 0x2c
						shot_cnt = 1; //default value
 8002966:	4b0a      	ldr	r3, [pc, #40]	; (8002990 <HAL_TIM_OC_DelayElapsedCallback+0xe4>)
 8002968:	2201      	movs	r2, #1
 800296a:	601a      	str	r2, [r3, #0]
}
 800296c:	bf00      	nop
 800296e:	3708      	adds	r7, #8
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	40000400 	.word	0x40000400
 8002978:	2000009c 	.word	0x2000009c
 800297c:	20000010 	.word	0x20000010
 8002980:	20000178 	.word	0x20000178
 8002984:	20000000 	.word	0x20000000
 8002988:	2000017c 	.word	0x2000017c
 800298c:	40011000 	.word	0x40011000
 8002990:	20000004 	.word	0x20000004
 8002994:	2000031c 	.word	0x2000031c

08002998 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800299c:	4b11      	ldr	r3, [pc, #68]	; (80029e4 <MX_USART1_UART_Init+0x4c>)
 800299e:	4a12      	ldr	r2, [pc, #72]	; (80029e8 <MX_USART1_UART_Init+0x50>)
 80029a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80029a2:	4b10      	ldr	r3, [pc, #64]	; (80029e4 <MX_USART1_UART_Init+0x4c>)
 80029a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80029aa:	4b0e      	ldr	r3, [pc, #56]	; (80029e4 <MX_USART1_UART_Init+0x4c>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80029b0:	4b0c      	ldr	r3, [pc, #48]	; (80029e4 <MX_USART1_UART_Init+0x4c>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80029b6:	4b0b      	ldr	r3, [pc, #44]	; (80029e4 <MX_USART1_UART_Init+0x4c>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80029bc:	4b09      	ldr	r3, [pc, #36]	; (80029e4 <MX_USART1_UART_Init+0x4c>)
 80029be:	220c      	movs	r2, #12
 80029c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029c2:	4b08      	ldr	r3, [pc, #32]	; (80029e4 <MX_USART1_UART_Init+0x4c>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80029c8:	4b06      	ldr	r3, [pc, #24]	; (80029e4 <MX_USART1_UART_Init+0x4c>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80029ce:	4805      	ldr	r0, [pc, #20]	; (80029e4 <MX_USART1_UART_Init+0x4c>)
 80029d0:	f005 ffe8 	bl	80089a4 <HAL_UART_Init>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80029da:	f7ff fc00 	bl	80021de <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80029de:	bf00      	nop
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	200003ac 	.word	0x200003ac
 80029e8:	40013800 	.word	0x40013800

080029ec <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80029f0:	4b11      	ldr	r3, [pc, #68]	; (8002a38 <MX_USART2_UART_Init+0x4c>)
 80029f2:	4a12      	ldr	r2, [pc, #72]	; (8002a3c <MX_USART2_UART_Init+0x50>)
 80029f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80029f6:	4b10      	ldr	r3, [pc, #64]	; (8002a38 <MX_USART2_UART_Init+0x4c>)
 80029f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80029fe:	4b0e      	ldr	r3, [pc, #56]	; (8002a38 <MX_USART2_UART_Init+0x4c>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a04:	4b0c      	ldr	r3, [pc, #48]	; (8002a38 <MX_USART2_UART_Init+0x4c>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a0a:	4b0b      	ldr	r3, [pc, #44]	; (8002a38 <MX_USART2_UART_Init+0x4c>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a10:	4b09      	ldr	r3, [pc, #36]	; (8002a38 <MX_USART2_UART_Init+0x4c>)
 8002a12:	220c      	movs	r2, #12
 8002a14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a16:	4b08      	ldr	r3, [pc, #32]	; (8002a38 <MX_USART2_UART_Init+0x4c>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a1c:	4b06      	ldr	r3, [pc, #24]	; (8002a38 <MX_USART2_UART_Init+0x4c>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a22:	4805      	ldr	r0, [pc, #20]	; (8002a38 <MX_USART2_UART_Init+0x4c>)
 8002a24:	f005 ffbe 	bl	80089a4 <HAL_UART_Init>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002a2e:	f7ff fbd6 	bl	80021de <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002a32:	bf00      	nop
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	200003ec 	.word	0x200003ec
 8002a3c:	40004400 	.word	0x40004400

08002a40 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b08a      	sub	sp, #40	; 0x28
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a48:	f107 0318 	add.w	r3, r7, #24
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	605a      	str	r2, [r3, #4]
 8002a52:	609a      	str	r2, [r3, #8]
 8002a54:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a3b      	ldr	r2, [pc, #236]	; (8002b48 <HAL_UART_MspInit+0x108>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d132      	bne.n	8002ac6 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a60:	4b3a      	ldr	r3, [pc, #232]	; (8002b4c <HAL_UART_MspInit+0x10c>)
 8002a62:	699b      	ldr	r3, [r3, #24]
 8002a64:	4a39      	ldr	r2, [pc, #228]	; (8002b4c <HAL_UART_MspInit+0x10c>)
 8002a66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a6a:	6193      	str	r3, [r2, #24]
 8002a6c:	4b37      	ldr	r3, [pc, #220]	; (8002b4c <HAL_UART_MspInit+0x10c>)
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a74:	617b      	str	r3, [r7, #20]
 8002a76:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a78:	4b34      	ldr	r3, [pc, #208]	; (8002b4c <HAL_UART_MspInit+0x10c>)
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	4a33      	ldr	r2, [pc, #204]	; (8002b4c <HAL_UART_MspInit+0x10c>)
 8002a7e:	f043 0304 	orr.w	r3, r3, #4
 8002a82:	6193      	str	r3, [r2, #24]
 8002a84:	4b31      	ldr	r3, [pc, #196]	; (8002b4c <HAL_UART_MspInit+0x10c>)
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	f003 0304 	and.w	r3, r3, #4
 8002a8c:	613b      	str	r3, [r7, #16]
 8002a8e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002a90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a96:	2302      	movs	r3, #2
 8002a98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a9e:	f107 0318 	add.w	r3, r7, #24
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	482a      	ldr	r0, [pc, #168]	; (8002b50 <HAL_UART_MspInit+0x110>)
 8002aa6:	f001 fe69 	bl	800477c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002aaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002aae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ab8:	f107 0318 	add.w	r3, r7, #24
 8002abc:	4619      	mov	r1, r3
 8002abe:	4824      	ldr	r0, [pc, #144]	; (8002b50 <HAL_UART_MspInit+0x110>)
 8002ac0:	f001 fe5c 	bl	800477c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002ac4:	e03c      	b.n	8002b40 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART2)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a22      	ldr	r2, [pc, #136]	; (8002b54 <HAL_UART_MspInit+0x114>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d137      	bne.n	8002b40 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ad0:	4b1e      	ldr	r3, [pc, #120]	; (8002b4c <HAL_UART_MspInit+0x10c>)
 8002ad2:	69db      	ldr	r3, [r3, #28]
 8002ad4:	4a1d      	ldr	r2, [pc, #116]	; (8002b4c <HAL_UART_MspInit+0x10c>)
 8002ad6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ada:	61d3      	str	r3, [r2, #28]
 8002adc:	4b1b      	ldr	r3, [pc, #108]	; (8002b4c <HAL_UART_MspInit+0x10c>)
 8002ade:	69db      	ldr	r3, [r3, #28]
 8002ae0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae4:	60fb      	str	r3, [r7, #12]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ae8:	4b18      	ldr	r3, [pc, #96]	; (8002b4c <HAL_UART_MspInit+0x10c>)
 8002aea:	699b      	ldr	r3, [r3, #24]
 8002aec:	4a17      	ldr	r2, [pc, #92]	; (8002b4c <HAL_UART_MspInit+0x10c>)
 8002aee:	f043 0304 	orr.w	r3, r3, #4
 8002af2:	6193      	str	r3, [r2, #24]
 8002af4:	4b15      	ldr	r3, [pc, #84]	; (8002b4c <HAL_UART_MspInit+0x10c>)
 8002af6:	699b      	ldr	r3, [r3, #24]
 8002af8:	f003 0304 	and.w	r3, r3, #4
 8002afc:	60bb      	str	r3, [r7, #8]
 8002afe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002b00:	2304      	movs	r3, #4
 8002b02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b04:	2302      	movs	r3, #2
 8002b06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b0c:	f107 0318 	add.w	r3, r7, #24
 8002b10:	4619      	mov	r1, r3
 8002b12:	480f      	ldr	r0, [pc, #60]	; (8002b50 <HAL_UART_MspInit+0x110>)
 8002b14:	f001 fe32 	bl	800477c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002b18:	2308      	movs	r3, #8
 8002b1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b20:	2300      	movs	r3, #0
 8002b22:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b24:	f107 0318 	add.w	r3, r7, #24
 8002b28:	4619      	mov	r1, r3
 8002b2a:	4809      	ldr	r0, [pc, #36]	; (8002b50 <HAL_UART_MspInit+0x110>)
 8002b2c:	f001 fe26 	bl	800477c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8002b30:	2200      	movs	r2, #0
 8002b32:	2101      	movs	r1, #1
 8002b34:	2026      	movs	r0, #38	; 0x26
 8002b36:	f000 fe69 	bl	800380c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002b3a:	2026      	movs	r0, #38	; 0x26
 8002b3c:	f000 fe92 	bl	8003864 <HAL_NVIC_EnableIRQ>
}
 8002b40:	bf00      	nop
 8002b42:	3728      	adds	r7, #40	; 0x28
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	40013800 	.word	0x40013800
 8002b4c:	40021000 	.word	0x40021000
 8002b50:	40010800 	.word	0x40010800
 8002b54:	40004400 	.word	0x40004400

08002b58 <HAL_UART_RxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
	uint8_t cnt[2]={0};
 8002b60:	2300      	movs	r3, #0
 8002b62:	81bb      	strh	r3, [r7, #12]

	if(huart->Instance == USART2)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a56      	ldr	r2, [pc, #344]	; (8002cc4 <HAL_UART_RxCpltCallback+0x16c>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	f040 80a5 	bne.w	8002cba <HAL_UART_RxCpltCallback+0x162>
	{
		if(nexMessage[0]==0x65 && nexMessage[1]==0x00 && (nexMessage[2]==0x01 || nexMessage[2]==0x02))
 8002b70:	4b55      	ldr	r3, [pc, #340]	; (8002cc8 <HAL_UART_RxCpltCallback+0x170>)
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	2b65      	cmp	r3, #101	; 0x65
 8002b76:	d15b      	bne.n	8002c30 <HAL_UART_RxCpltCallback+0xd8>
 8002b78:	4b53      	ldr	r3, [pc, #332]	; (8002cc8 <HAL_UART_RxCpltCallback+0x170>)
 8002b7a:	785b      	ldrb	r3, [r3, #1]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d157      	bne.n	8002c30 <HAL_UART_RxCpltCallback+0xd8>
 8002b80:	4b51      	ldr	r3, [pc, #324]	; (8002cc8 <HAL_UART_RxCpltCallback+0x170>)
 8002b82:	789b      	ldrb	r3, [r3, #2]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d003      	beq.n	8002b90 <HAL_UART_RxCpltCallback+0x38>
 8002b88:	4b4f      	ldr	r3, [pc, #316]	; (8002cc8 <HAL_UART_RxCpltCallback+0x170>)
 8002b8a:	789b      	ldrb	r3, [r3, #2]
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d14f      	bne.n	8002c30 <HAL_UART_RxCpltCallback+0xd8>
		{//UP DOWN
			cnt[0] = nexMessage[7];
 8002b90:	4b4d      	ldr	r3, [pc, #308]	; (8002cc8 <HAL_UART_RxCpltCallback+0x170>)
 8002b92:	79db      	ldrb	r3, [r3, #7]
 8002b94:	733b      	strb	r3, [r7, #12]
			cnt[1] = nexMessage[8];
 8002b96:	4b4c      	ldr	r3, [pc, #304]	; (8002cc8 <HAL_UART_RxCpltCallback+0x170>)
 8002b98:	7a1b      	ldrb	r3, [r3, #8]
 8002b9a:	737b      	strb	r3, [r7, #13]
			switch(mode)
 8002b9c:	4b4b      	ldr	r3, [pc, #300]	; (8002ccc <HAL_UART_RxCpltCallback+0x174>)
 8002b9e:	881b      	ldrh	r3, [r3, #0]
 8002ba0:	2b40      	cmp	r3, #64	; 0x40
 8002ba2:	d036      	beq.n	8002c12 <HAL_UART_RxCpltCallback+0xba>
 8002ba4:	2b40      	cmp	r3, #64	; 0x40
 8002ba6:	f300 8088 	bgt.w	8002cba <HAL_UART_RxCpltCallback+0x162>
 8002baa:	2b20      	cmp	r3, #32
 8002bac:	d023      	beq.n	8002bf6 <HAL_UART_RxCpltCallback+0x9e>
 8002bae:	2b20      	cmp	r3, #32
 8002bb0:	f300 8083 	bgt.w	8002cba <HAL_UART_RxCpltCallback+0x162>
 8002bb4:	2b08      	cmp	r3, #8
 8002bb6:	d002      	beq.n	8002bbe <HAL_UART_RxCpltCallback+0x66>
 8002bb8:	2b10      	cmp	r3, #16
 8002bba:	d00e      	beq.n	8002bda <HAL_UART_RxCpltCallback+0x82>
 8002bbc:	e07d      	b.n	8002cba <HAL_UART_RxCpltCallback+0x162>
			{
				case 8:
					step_cnt = (nexMessage[8]<<8 | nexMessage[7])*1600;
 8002bbe:	4b42      	ldr	r3, [pc, #264]	; (8002cc8 <HAL_UART_RxCpltCallback+0x170>)
 8002bc0:	7a1b      	ldrb	r3, [r3, #8]
 8002bc2:	021b      	lsls	r3, r3, #8
 8002bc4:	4a40      	ldr	r2, [pc, #256]	; (8002cc8 <HAL_UART_RxCpltCallback+0x170>)
 8002bc6:	79d2      	ldrb	r2, [r2, #7]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8002bce:	fb02 f303 	mul.w	r3, r2, r3
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	4b3e      	ldr	r3, [pc, #248]	; (8002cd0 <HAL_UART_RxCpltCallback+0x178>)
 8002bd6:	601a      	str	r2, [r3, #0]
					break;
 8002bd8:	e029      	b.n	8002c2e <HAL_UART_RxCpltCallback+0xd6>
				case 16:
					step_cnt = (nexMessage[8]<<8 | nexMessage[7])*3200;
 8002bda:	4b3b      	ldr	r3, [pc, #236]	; (8002cc8 <HAL_UART_RxCpltCallback+0x170>)
 8002bdc:	7a1b      	ldrb	r3, [r3, #8]
 8002bde:	021b      	lsls	r3, r3, #8
 8002be0:	4a39      	ldr	r2, [pc, #228]	; (8002cc8 <HAL_UART_RxCpltCallback+0x170>)
 8002be2:	79d2      	ldrb	r2, [r2, #7]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8002bea:	fb02 f303 	mul.w	r3, r2, r3
 8002bee:	461a      	mov	r2, r3
 8002bf0:	4b37      	ldr	r3, [pc, #220]	; (8002cd0 <HAL_UART_RxCpltCallback+0x178>)
 8002bf2:	601a      	str	r2, [r3, #0]
					break;
 8002bf4:	e01b      	b.n	8002c2e <HAL_UART_RxCpltCallback+0xd6>
				case 32:
					step_cnt = (nexMessage[8]<<8 | nexMessage[7])*6400;
 8002bf6:	4b34      	ldr	r3, [pc, #208]	; (8002cc8 <HAL_UART_RxCpltCallback+0x170>)
 8002bf8:	7a1b      	ldrb	r3, [r3, #8]
 8002bfa:	021b      	lsls	r3, r3, #8
 8002bfc:	4a32      	ldr	r2, [pc, #200]	; (8002cc8 <HAL_UART_RxCpltCallback+0x170>)
 8002bfe:	79d2      	ldrb	r2, [r2, #7]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8002c06:	fb02 f303 	mul.w	r3, r2, r3
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	4b30      	ldr	r3, [pc, #192]	; (8002cd0 <HAL_UART_RxCpltCallback+0x178>)
 8002c0e:	601a      	str	r2, [r3, #0]
					break;
 8002c10:	e00d      	b.n	8002c2e <HAL_UART_RxCpltCallback+0xd6>
				case 64:
					step_cnt = (nexMessage[8]<<8 | nexMessage[7])*12800;
 8002c12:	4b2d      	ldr	r3, [pc, #180]	; (8002cc8 <HAL_UART_RxCpltCallback+0x170>)
 8002c14:	7a1b      	ldrb	r3, [r3, #8]
 8002c16:	021b      	lsls	r3, r3, #8
 8002c18:	4a2b      	ldr	r2, [pc, #172]	; (8002cc8 <HAL_UART_RxCpltCallback+0x170>)
 8002c1a:	79d2      	ldrb	r2, [r2, #7]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	f44f 5248 	mov.w	r2, #12800	; 0x3200
 8002c22:	fb02 f303 	mul.w	r3, r2, r3
 8002c26:	461a      	mov	r2, r3
 8002c28:	4b29      	ldr	r3, [pc, #164]	; (8002cd0 <HAL_UART_RxCpltCallback+0x178>)
 8002c2a:	601a      	str	r2, [r3, #0]
					break;
 8002c2c:	bf00      	nop
			switch(mode)
 8002c2e:	e044      	b.n	8002cba <HAL_UART_RxCpltCallback+0x162>
			}

//			printf("step_cnt value : %d\n",step_cnt);
		}
		else if(nexMessage[0]==0x65 && nexMessage[1]==0x00 && nexMessage[2]==0x0D)
 8002c30:	4b25      	ldr	r3, [pc, #148]	; (8002cc8 <HAL_UART_RxCpltCallback+0x170>)
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	2b65      	cmp	r3, #101	; 0x65
 8002c36:	d11d      	bne.n	8002c74 <HAL_UART_RxCpltCallback+0x11c>
 8002c38:	4b23      	ldr	r3, [pc, #140]	; (8002cc8 <HAL_UART_RxCpltCallback+0x170>)
 8002c3a:	785b      	ldrb	r3, [r3, #1]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d119      	bne.n	8002c74 <HAL_UART_RxCpltCallback+0x11c>
 8002c40:	4b21      	ldr	r3, [pc, #132]	; (8002cc8 <HAL_UART_RxCpltCallback+0x170>)
 8002c42:	789b      	ldrb	r3, [r3, #2]
 8002c44:	2b0d      	cmp	r3, #13
 8002c46:	d115      	bne.n	8002c74 <HAL_UART_RxCpltCallback+0x11c>
		{//START
			cnt[0] = nexMessage[7];
 8002c48:	4b1f      	ldr	r3, [pc, #124]	; (8002cc8 <HAL_UART_RxCpltCallback+0x170>)
 8002c4a:	79db      	ldrb	r3, [r3, #7]
 8002c4c:	733b      	strb	r3, [r7, #12]
			cnt[1] = nexMessage[8];
 8002c4e:	4b1e      	ldr	r3, [pc, #120]	; (8002cc8 <HAL_UART_RxCpltCallback+0x170>)
 8002c50:	7a1b      	ldrb	r3, [r3, #8]
 8002c52:	737b      	strb	r3, [r7, #13]
			shot_cnt = nexMessage[8]<<8 | nexMessage[7];
 8002c54:	4b1c      	ldr	r3, [pc, #112]	; (8002cc8 <HAL_UART_RxCpltCallback+0x170>)
 8002c56:	7a1b      	ldrb	r3, [r3, #8]
 8002c58:	021b      	lsls	r3, r3, #8
 8002c5a:	4a1b      	ldr	r2, [pc, #108]	; (8002cc8 <HAL_UART_RxCpltCallback+0x170>)
 8002c5c:	79d2      	ldrb	r2, [r2, #7]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	461a      	mov	r2, r3
 8002c62:	4b1c      	ldr	r3, [pc, #112]	; (8002cd4 <HAL_UART_RxCpltCallback+0x17c>)
 8002c64:	601a      	str	r2, [r3, #0]
//			printf("shot_cnt value : %d\n",shot_cnt);
//			printf("drv8880 enable\n");
			drv8880_enable();
 8002c66:	f7fe faad 	bl	80011c4 <drv8880_enable>
			HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_3); //interrupt priority change USART2 interrupt priority 0 -> 1
 8002c6a:	2108      	movs	r1, #8
 8002c6c:	481a      	ldr	r0, [pc, #104]	; (8002cd8 <HAL_UART_RxCpltCallback+0x180>)
 8002c6e:	f004 fc0d 	bl	800748c <HAL_TIM_PWM_Start_IT>
 8002c72:	e022      	b.n	8002cba <HAL_UART_RxCpltCallback+0x162>
//			tick_start = HAL_GetTick();
		}
		else if(nexMessage[0]==0x65 && nexMessage[1]==0x00 && nexMessage[2]==0x10)
 8002c74:	4b14      	ldr	r3, [pc, #80]	; (8002cc8 <HAL_UART_RxCpltCallback+0x170>)
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	2b65      	cmp	r3, #101	; 0x65
 8002c7a:	d10e      	bne.n	8002c9a <HAL_UART_RxCpltCallback+0x142>
 8002c7c:	4b12      	ldr	r3, [pc, #72]	; (8002cc8 <HAL_UART_RxCpltCallback+0x170>)
 8002c7e:	785b      	ldrb	r3, [r3, #1]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d10a      	bne.n	8002c9a <HAL_UART_RxCpltCallback+0x142>
 8002c84:	4b10      	ldr	r3, [pc, #64]	; (8002cc8 <HAL_UART_RxCpltCallback+0x170>)
 8002c86:	789b      	ldrb	r3, [r3, #2]
 8002c88:	2b10      	cmp	r3, #16
 8002c8a:	d106      	bne.n	8002c9a <HAL_UART_RxCpltCallback+0x142>
		{//STOP
	  		HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_3);
 8002c8c:	2108      	movs	r1, #8
 8002c8e:	4812      	ldr	r0, [pc, #72]	; (8002cd8 <HAL_UART_RxCpltCallback+0x180>)
 8002c90:	f004 fdca 	bl	8007828 <HAL_TIM_PWM_Stop_IT>
//	  		printf("drv8880 disable\n");
	  		drv8880_disable();
 8002c94:	f7fe faac 	bl	80011f0 <drv8880_disable>
 8002c98:	e00f      	b.n	8002cba <HAL_UART_RxCpltCallback+0x162>
		}
		else if(nexMessage[0]==0x00 && nexMessage[1]==0x00 && nexMessage[2]==0x00)
 8002c9a:	4b0b      	ldr	r3, [pc, #44]	; (8002cc8 <HAL_UART_RxCpltCallback+0x170>)
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d10b      	bne.n	8002cba <HAL_UART_RxCpltCallback+0x162>
 8002ca2:	4b09      	ldr	r3, [pc, #36]	; (8002cc8 <HAL_UART_RxCpltCallback+0x170>)
 8002ca4:	785b      	ldrb	r3, [r3, #1]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d107      	bne.n	8002cba <HAL_UART_RxCpltCallback+0x162>
 8002caa:	4b07      	ldr	r3, [pc, #28]	; (8002cc8 <HAL_UART_RxCpltCallback+0x170>)
 8002cac:	789b      	ldrb	r3, [r3, #2]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d103      	bne.n	8002cba <HAL_UART_RxCpltCallback+0x162>
		{//Nextion Booting
			printf("Nextion LCD booting complete!!\n");
 8002cb2:	480a      	ldr	r0, [pc, #40]	; (8002cdc <HAL_UART_RxCpltCallback+0x184>)
 8002cb4:	f006 fcac 	bl	8009610 <puts>
		}
//		printf("%x %x %x %x %x %x %x %x %x %x\n",nexMessage[0],nexMessage[1],nexMessage[2],nexMessage[3],nexMessage[4],nexMessage[5],
//				nexMessage[6],nexMessage[7],nexMessage[8],nexMessage[9]);
	}
}
 8002cb8:	e7ff      	b.n	8002cba <HAL_UART_RxCpltCallback+0x162>
 8002cba:	bf00      	nop
 8002cbc:	3710      	adds	r7, #16
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	40004400 	.word	0x40004400
 8002cc8:	20000180 	.word	0x20000180
 8002ccc:	20000008 	.word	0x20000008
 8002cd0:	20000000 	.word	0x20000000
 8002cd4:	20000004 	.word	0x20000004
 8002cd8:	2000031c 	.word	0x2000031c
 8002cdc:	0800beec 	.word	0x0800beec

08002ce0 <DebugUart_GetChar>:

uint8_t DebugUart_GetChar(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
    uint8_t data;

    /* Loop until the end of transmission */
    while(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_RXNE) == RESET);
 8002ce6:	bf00      	nop
 8002ce8:	4b09      	ldr	r3, [pc, #36]	; (8002d10 <DebugUart_GetChar+0x30>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0320 	and.w	r3, r3, #32
 8002cf2:	2b20      	cmp	r3, #32
 8002cf4:	d1f8      	bne.n	8002ce8 <DebugUart_GetChar+0x8>

    /* Write a character to the USART */
    HAL_UART_Receive(&huart1, &data, 1, 0x100);
 8002cf6:	1df9      	adds	r1, r7, #7
 8002cf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	4804      	ldr	r0, [pc, #16]	; (8002d10 <DebugUart_GetChar+0x30>)
 8002d00:	f005 ff98 	bl	8008c34 <HAL_UART_Receive>

    return(data);
 8002d04:	79fb      	ldrb	r3, [r7, #7]
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	200003ac 	.word	0x200003ac

08002d14 <DebugUart_PutChar>:

void DebugUart_PutChar(uint8_t ch)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8002d1e:	1df9      	adds	r1, r7, #7
 8002d20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d24:	2201      	movs	r2, #1
 8002d26:	4803      	ldr	r0, [pc, #12]	; (8002d34 <DebugUart_PutChar+0x20>)
 8002d28:	f005 fef2 	bl	8008b10 <HAL_UART_Transmit>
}
 8002d2c:	bf00      	nop
 8002d2e:	3708      	adds	r7, #8
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	200003ac 	.word	0x200003ac

08002d38 <DebugUart_PutStr>:

void DebugUart_PutStr(uint8_t *string)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
    while(*string != '\0')
 8002d40:	e007      	b.n	8002d52 <DebugUart_PutStr+0x1a>
    {
        DebugUart_PutChar(*string);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7ff ffe4 	bl	8002d14 <DebugUart_PutChar>
        string++;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	3301      	adds	r3, #1
 8002d50:	607b      	str	r3, [r7, #4]
    while(*string != '\0')
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1f3      	bne.n	8002d42 <DebugUart_PutStr+0xa>
    }
}
 8002d5a:	bf00      	nop
 8002d5c:	bf00      	nop
 8002d5e:	3708      	adds	r7, #8
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <__io_putchar>:
#ifdef __GNUC__
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
	if(ch == '\n')
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2b0a      	cmp	r3, #10
 8002d70:	d102      	bne.n	8002d78 <__io_putchar+0x14>
		DebugUart_PutChar('\r');
 8002d72:	200d      	movs	r0, #13
 8002d74:	f7ff ffce 	bl	8002d14 <DebugUart_PutChar>

	DebugUart_PutChar( (uint8_t)ch );
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7ff ffc9 	bl	8002d14 <DebugUart_PutChar>

	return ch;
 8002d82:	687b      	ldr	r3, [r7, #4]

//  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0x01);
//  return ch;
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3708      	adds	r7, #8
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <Reset_Handler>:
 8002d8c:	2100      	movs	r1, #0
 8002d8e:	e003      	b.n	8002d98 <LoopCopyDataInit>

08002d90 <CopyDataInit>:
 8002d90:	4b0b      	ldr	r3, [pc, #44]	; (8002dc0 <LoopFillZerobss+0x14>)
 8002d92:	585b      	ldr	r3, [r3, r1]
 8002d94:	5043      	str	r3, [r0, r1]
 8002d96:	3104      	adds	r1, #4

08002d98 <LoopCopyDataInit>:
 8002d98:	480a      	ldr	r0, [pc, #40]	; (8002dc4 <LoopFillZerobss+0x18>)
 8002d9a:	4b0b      	ldr	r3, [pc, #44]	; (8002dc8 <LoopFillZerobss+0x1c>)
 8002d9c:	1842      	adds	r2, r0, r1
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d3f6      	bcc.n	8002d90 <CopyDataInit>
 8002da2:	4a0a      	ldr	r2, [pc, #40]	; (8002dcc <LoopFillZerobss+0x20>)
 8002da4:	e002      	b.n	8002dac <LoopFillZerobss>

08002da6 <FillZerobss>:
 8002da6:	2300      	movs	r3, #0
 8002da8:	f842 3b04 	str.w	r3, [r2], #4

08002dac <LoopFillZerobss>:
 8002dac:	4b08      	ldr	r3, [pc, #32]	; (8002dd0 <LoopFillZerobss+0x24>)
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d3f9      	bcc.n	8002da6 <FillZerobss>
 8002db2:	f7ff fbe9 	bl	8002588 <SystemInit>
 8002db6:	f006 fb79 	bl	80094ac <__libc_init_array>
 8002dba:	f7fe fd91 	bl	80018e0 <main>
 8002dbe:	4770      	bx	lr
 8002dc0:	0800c7a0 	.word	0x0800c7a0
 8002dc4:	20000000 	.word	0x20000000
 8002dc8:	20000080 	.word	0x20000080
 8002dcc:	20000080 	.word	0x20000080
 8002dd0:	20000440 	.word	0x20000440

08002dd4 <ADC1_2_IRQHandler>:
 8002dd4:	e7fe      	b.n	8002dd4 <ADC1_2_IRQHandler>
	...

08002dd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ddc:	4b08      	ldr	r3, [pc, #32]	; (8002e00 <HAL_Init+0x28>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a07      	ldr	r2, [pc, #28]	; (8002e00 <HAL_Init+0x28>)
 8002de2:	f043 0310 	orr.w	r3, r3, #16
 8002de6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002de8:	2003      	movs	r0, #3
 8002dea:	f000 fcef 	bl	80037cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dee:	2000      	movs	r0, #0
 8002df0:	f000 f808 	bl	8002e04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002df4:	f7ff fa86 	bl	8002304 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	40022000 	.word	0x40022000

08002e04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e0c:	4b12      	ldr	r3, [pc, #72]	; (8002e58 <HAL_InitTick+0x54>)
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	4b12      	ldr	r3, [pc, #72]	; (8002e5c <HAL_InitTick+0x58>)
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	4619      	mov	r1, r3
 8002e16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e22:	4618      	mov	r0, r3
 8002e24:	f000 fd36 	bl	8003894 <HAL_SYSTICK_Config>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e00e      	b.n	8002e50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2b0f      	cmp	r3, #15
 8002e36:	d80a      	bhi.n	8002e4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e38:	2200      	movs	r2, #0
 8002e3a:	6879      	ldr	r1, [r7, #4]
 8002e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e40:	f000 fce4 	bl	800380c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e44:	4a06      	ldr	r2, [pc, #24]	; (8002e60 <HAL_InitTick+0x5c>)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	e000      	b.n	8002e50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3708      	adds	r7, #8
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	2000000c 	.word	0x2000000c
 8002e5c:	20000018 	.word	0x20000018
 8002e60:	20000014 	.word	0x20000014

08002e64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e68:	4b05      	ldr	r3, [pc, #20]	; (8002e80 <HAL_IncTick+0x1c>)
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	4b05      	ldr	r3, [pc, #20]	; (8002e84 <HAL_IncTick+0x20>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4413      	add	r3, r2
 8002e74:	4a03      	ldr	r2, [pc, #12]	; (8002e84 <HAL_IncTick+0x20>)
 8002e76:	6013      	str	r3, [r2, #0]
}
 8002e78:	bf00      	nop
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bc80      	pop	{r7}
 8002e7e:	4770      	bx	lr
 8002e80:	20000018 	.word	0x20000018
 8002e84:	2000042c 	.word	0x2000042c

08002e88 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0
  return uwTick;
 8002e8c:	4b02      	ldr	r3, [pc, #8]	; (8002e98 <HAL_GetTick+0x10>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bc80      	pop	{r7}
 8002e96:	4770      	bx	lr
 8002e98:	2000042c 	.word	0x2000042c

08002e9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ea4:	f7ff fff0 	bl	8002e88 <HAL_GetTick>
 8002ea8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb4:	d005      	beq.n	8002ec2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002eb6:	4b0a      	ldr	r3, [pc, #40]	; (8002ee0 <HAL_Delay+0x44>)
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	461a      	mov	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ec2:	bf00      	nop
 8002ec4:	f7ff ffe0 	bl	8002e88 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d8f7      	bhi.n	8002ec4 <HAL_Delay+0x28>
  {
  }
}
 8002ed4:	bf00      	nop
 8002ed6:	bf00      	nop
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	20000018 	.word	0x20000018

08002ee4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002eec:	2300      	movs	r3, #0
 8002eee:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d101      	bne.n	8002f06 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e188      	b.n	8003218 <HAL_ADC_Init+0x334>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a8c      	ldr	r2, [pc, #560]	; (800313c <HAL_ADC_Init+0x258>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d00e      	beq.n	8002f2e <HAL_ADC_Init+0x4a>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a8a      	ldr	r2, [pc, #552]	; (8003140 <HAL_ADC_Init+0x25c>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d009      	beq.n	8002f2e <HAL_ADC_Init+0x4a>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a89      	ldr	r2, [pc, #548]	; (8003144 <HAL_ADC_Init+0x260>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d004      	beq.n	8002f2e <HAL_ADC_Init+0x4a>
 8002f24:	f240 11b3 	movw	r1, #435	; 0x1b3
 8002f28:	4887      	ldr	r0, [pc, #540]	; (8003148 <HAL_ADC_Init+0x264>)
 8002f2a:	f7ff f95e 	bl	80021ea <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d009      	beq.n	8002f4a <HAL_ADC_Init+0x66>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f3e:	d004      	beq.n	8002f4a <HAL_ADC_Init+0x66>
 8002f40:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 8002f44:	4880      	ldr	r0, [pc, #512]	; (8003148 <HAL_ADC_Init+0x264>)
 8002f46:	f7ff f950 	bl	80021ea <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d009      	beq.n	8002f66 <HAL_ADC_Init+0x82>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f5a:	d004      	beq.n	8002f66 <HAL_ADC_Init+0x82>
 8002f5c:	f240 11b5 	movw	r1, #437	; 0x1b5
 8002f60:	4879      	ldr	r0, [pc, #484]	; (8003148 <HAL_ADC_Init+0x264>)
 8002f62:	f7ff f942 	bl	80021ea <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	7b1b      	ldrb	r3, [r3, #12]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d008      	beq.n	8002f80 <HAL_ADC_Init+0x9c>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	7b1b      	ldrb	r3, [r3, #12]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d004      	beq.n	8002f80 <HAL_ADC_Init+0x9c>
 8002f76:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8002f7a:	4873      	ldr	r0, [pc, #460]	; (8003148 <HAL_ADC_Init+0x264>)
 8002f7c:	f7ff f935 	bl	80021ea <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	69db      	ldr	r3, [r3, #28]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d044      	beq.n	8003012 <HAL_ADC_Init+0x12e>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	69db      	ldr	r3, [r3, #28]
 8002f8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f90:	d03f      	beq.n	8003012 <HAL_ADC_Init+0x12e>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	69db      	ldr	r3, [r3, #28]
 8002f96:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8002f9a:	d03a      	beq.n	8003012 <HAL_ADC_Init+0x12e>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	69db      	ldr	r3, [r3, #28]
 8002fa0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002fa4:	d035      	beq.n	8003012 <HAL_ADC_Init+0x12e>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	69db      	ldr	r3, [r3, #28]
 8002faa:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 8002fae:	d030      	beq.n	8003012 <HAL_ADC_Init+0x12e>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	69db      	ldr	r3, [r3, #28]
 8002fb4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002fb8:	d02b      	beq.n	8003012 <HAL_ADC_Init+0x12e>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	69db      	ldr	r3, [r3, #28]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d027      	beq.n	8003012 <HAL_ADC_Init+0x12e>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	69db      	ldr	r3, [r3, #28]
 8002fc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002fca:	d022      	beq.n	8003012 <HAL_ADC_Init+0x12e>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	69db      	ldr	r3, [r3, #28]
 8002fd0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8002fd4:	d01d      	beq.n	8003012 <HAL_ADC_Init+0x12e>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	69db      	ldr	r3, [r3, #28]
 8002fda:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 8002fde:	d018      	beq.n	8003012 <HAL_ADC_Init+0x12e>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	69db      	ldr	r3, [r3, #28]
 8002fe4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002fe8:	d013      	beq.n	8003012 <HAL_ADC_Init+0x12e>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	69db      	ldr	r3, [r3, #28]
 8002fee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ff2:	d00e      	beq.n	8003012 <HAL_ADC_Init+0x12e>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	69db      	ldr	r3, [r3, #28]
 8002ff8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002ffc:	d009      	beq.n	8003012 <HAL_ADC_Init+0x12e>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	69db      	ldr	r3, [r3, #28]
 8003002:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003006:	d004      	beq.n	8003012 <HAL_ADC_Init+0x12e>
 8003008:	f240 11b7 	movw	r1, #439	; 0x1b7
 800300c:	484e      	ldr	r0, [pc, #312]	; (8003148 <HAL_ADC_Init+0x264>)
 800300e:	f7ff f8ec 	bl	80021ea <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d02a      	beq.n	8003070 <HAL_ADC_Init+0x18c>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d003      	beq.n	800302a <HAL_ADC_Init+0x146>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	2b10      	cmp	r3, #16
 8003028:	d904      	bls.n	8003034 <HAL_ADC_Init+0x150>
 800302a:	f240 11bb 	movw	r1, #443	; 0x1bb
 800302e:	4846      	ldr	r0, [pc, #280]	; (8003148 <HAL_ADC_Init+0x264>)
 8003030:	f7ff f8db 	bl	80021ea <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	7d1b      	ldrb	r3, [r3, #20]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d008      	beq.n	800304e <HAL_ADC_Init+0x16a>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	7d1b      	ldrb	r3, [r3, #20]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d004      	beq.n	800304e <HAL_ADC_Init+0x16a>
 8003044:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8003048:	483f      	ldr	r0, [pc, #252]	; (8003148 <HAL_ADC_Init+0x264>)
 800304a:	f7ff f8ce 	bl	80021ea <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	7d1b      	ldrb	r3, [r3, #20]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00c      	beq.n	8003070 <HAL_ADC_Init+0x18c>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d003      	beq.n	8003066 <HAL_ADC_Init+0x182>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	2b08      	cmp	r3, #8
 8003064:	d904      	bls.n	8003070 <HAL_ADC_Init+0x18c>
 8003066:	f240 11bf 	movw	r1, #447	; 0x1bf
 800306a:	4837      	ldr	r0, [pc, #220]	; (8003148 <HAL_ADC_Init+0x264>)
 800306c:	f7ff f8bd 	bl	80021ea <assert_failed>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003074:	2b00      	cmp	r3, #0
 8003076:	d109      	bne.n	800308c <HAL_ADC_Init+0x1a8>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f7fd fec8 	bl	8000e1c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 fa97 	bl	80035c0 <ADC_ConversionStop_Disable>
 8003092:	4603      	mov	r3, r0
 8003094:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309a:	f003 0310 	and.w	r3, r3, #16
 800309e:	2b00      	cmp	r3, #0
 80030a0:	f040 80b1 	bne.w	8003206 <HAL_ADC_Init+0x322>
 80030a4:	7dfb      	ldrb	r3, [r7, #23]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	f040 80ad 	bne.w	8003206 <HAL_ADC_Init+0x322>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80030b4:	f023 0302 	bic.w	r3, r3, #2
 80030b8:	f043 0202 	orr.w	r2, r3, #2
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	491e      	ldr	r1, [pc, #120]	; (8003144 <HAL_ADC_Init+0x260>)
 80030ca:	428b      	cmp	r3, r1
 80030cc:	d10a      	bne.n	80030e4 <HAL_ADC_Init+0x200>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	69db      	ldr	r3, [r3, #28]
 80030d2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80030d6:	d002      	beq.n	80030de <HAL_ADC_Init+0x1fa>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	69db      	ldr	r3, [r3, #28]
 80030dc:	e004      	b.n	80030e8 <HAL_ADC_Init+0x204>
 80030de:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80030e2:	e001      	b.n	80030e8 <HAL_ADC_Init+0x204>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80030e8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	7b1b      	ldrb	r3, [r3, #12]
 80030ee:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80030f0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80030f2:	68ba      	ldr	r2, [r7, #8]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003100:	d003      	beq.n	800310a <HAL_ADC_Init+0x226>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d102      	bne.n	8003110 <HAL_ADC_Init+0x22c>
 800310a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800310e:	e000      	b.n	8003112 <HAL_ADC_Init+0x22e>
 8003110:	2300      	movs	r3, #0
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	4313      	orrs	r3, r2
 8003116:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	7d1b      	ldrb	r3, [r3, #20]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d121      	bne.n	8003164 <HAL_ADC_Init+0x280>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	7b1b      	ldrb	r3, [r3, #12]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d111      	bne.n	800314c <HAL_ADC_Init+0x268>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	3b01      	subs	r3, #1
 800312e:	035a      	lsls	r2, r3, #13
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	4313      	orrs	r3, r2
 8003134:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003138:	613b      	str	r3, [r7, #16]
 800313a:	e013      	b.n	8003164 <HAL_ADC_Init+0x280>
 800313c:	40012400 	.word	0x40012400
 8003140:	40012800 	.word	0x40012800
 8003144:	40013c00 	.word	0x40013c00
 8003148:	0800bf0c 	.word	0x0800bf0c
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003150:	f043 0220 	orr.w	r2, r3, #32
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315c:	f043 0201 	orr.w	r2, r3, #1
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	693a      	ldr	r2, [r7, #16]
 8003174:	430a      	orrs	r2, r1
 8003176:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	689a      	ldr	r2, [r3, #8]
 800317e:	4b28      	ldr	r3, [pc, #160]	; (8003220 <HAL_ADC_Init+0x33c>)
 8003180:	4013      	ands	r3, r2
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	6812      	ldr	r2, [r2, #0]
 8003186:	68b9      	ldr	r1, [r7, #8]
 8003188:	430b      	orrs	r3, r1
 800318a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003194:	d003      	beq.n	800319e <HAL_ADC_Init+0x2ba>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d104      	bne.n	80031a8 <HAL_ADC_Init+0x2c4>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	3b01      	subs	r3, #1
 80031a4:	051b      	lsls	r3, r3, #20
 80031a6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ae:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	430a      	orrs	r2, r1
 80031ba:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	689a      	ldr	r2, [r3, #8]
 80031c2:	4b18      	ldr	r3, [pc, #96]	; (8003224 <HAL_ADC_Init+0x340>)
 80031c4:	4013      	ands	r3, r2
 80031c6:	68ba      	ldr	r2, [r7, #8]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d10b      	bne.n	80031e4 <HAL_ADC_Init+0x300>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d6:	f023 0303 	bic.w	r3, r3, #3
 80031da:	f043 0201 	orr.w	r2, r3, #1
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80031e2:	e018      	b.n	8003216 <HAL_ADC_Init+0x332>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e8:	f023 0312 	bic.w	r3, r3, #18
 80031ec:	f043 0210 	orr.w	r2, r3, #16
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f8:	f043 0201 	orr.w	r2, r3, #1
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003204:	e007      	b.n	8003216 <HAL_ADC_Init+0x332>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800320a:	f043 0210 	orr.w	r2, r3, #16
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003216:	7dfb      	ldrb	r3, [r7, #23]
}
 8003218:	4618      	mov	r0, r3
 800321a:	3718      	adds	r7, #24
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	ffe1f7fd 	.word	0xffe1f7fd
 8003224:	ff1f0efe 	.word	0xff1f0efe

08003228 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003232:	2300      	movs	r3, #0
 8003234:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003236:	2300      	movs	r3, #0
 8003238:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a8b      	ldr	r2, [pc, #556]	; (800346c <HAL_ADC_ConfigChannel+0x244>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d00e      	beq.n	8003262 <HAL_ADC_ConfigChannel+0x3a>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a89      	ldr	r2, [pc, #548]	; (8003470 <HAL_ADC_ConfigChannel+0x248>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d009      	beq.n	8003262 <HAL_ADC_ConfigChannel+0x3a>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a88      	ldr	r2, [pc, #544]	; (8003474 <HAL_ADC_ConfigChannel+0x24c>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d004      	beq.n	8003262 <HAL_ADC_ConfigChannel+0x3a>
 8003258:	f240 71d1 	movw	r1, #2001	; 0x7d1
 800325c:	4886      	ldr	r0, [pc, #536]	; (8003478 <HAL_ADC_ConfigChannel+0x250>)
 800325e:	f7fe ffc4 	bl	80021ea <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d048      	beq.n	80032fc <HAL_ADC_ConfigChannel+0xd4>
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2b01      	cmp	r3, #1
 8003270:	d044      	beq.n	80032fc <HAL_ADC_ConfigChannel+0xd4>
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2b02      	cmp	r3, #2
 8003278:	d040      	beq.n	80032fc <HAL_ADC_ConfigChannel+0xd4>
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2b03      	cmp	r3, #3
 8003280:	d03c      	beq.n	80032fc <HAL_ADC_ConfigChannel+0xd4>
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2b04      	cmp	r3, #4
 8003288:	d038      	beq.n	80032fc <HAL_ADC_ConfigChannel+0xd4>
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2b05      	cmp	r3, #5
 8003290:	d034      	beq.n	80032fc <HAL_ADC_ConfigChannel+0xd4>
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2b06      	cmp	r3, #6
 8003298:	d030      	beq.n	80032fc <HAL_ADC_ConfigChannel+0xd4>
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2b07      	cmp	r3, #7
 80032a0:	d02c      	beq.n	80032fc <HAL_ADC_ConfigChannel+0xd4>
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2b08      	cmp	r3, #8
 80032a8:	d028      	beq.n	80032fc <HAL_ADC_ConfigChannel+0xd4>
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2b09      	cmp	r3, #9
 80032b0:	d024      	beq.n	80032fc <HAL_ADC_ConfigChannel+0xd4>
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2b0a      	cmp	r3, #10
 80032b8:	d020      	beq.n	80032fc <HAL_ADC_ConfigChannel+0xd4>
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2b0b      	cmp	r3, #11
 80032c0:	d01c      	beq.n	80032fc <HAL_ADC_ConfigChannel+0xd4>
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2b0c      	cmp	r3, #12
 80032c8:	d018      	beq.n	80032fc <HAL_ADC_ConfigChannel+0xd4>
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2b0d      	cmp	r3, #13
 80032d0:	d014      	beq.n	80032fc <HAL_ADC_ConfigChannel+0xd4>
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2b0e      	cmp	r3, #14
 80032d8:	d010      	beq.n	80032fc <HAL_ADC_ConfigChannel+0xd4>
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2b0f      	cmp	r3, #15
 80032e0:	d00c      	beq.n	80032fc <HAL_ADC_ConfigChannel+0xd4>
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2b10      	cmp	r3, #16
 80032e8:	d008      	beq.n	80032fc <HAL_ADC_ConfigChannel+0xd4>
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2b11      	cmp	r3, #17
 80032f0:	d004      	beq.n	80032fc <HAL_ADC_ConfigChannel+0xd4>
 80032f2:	f240 71d2 	movw	r1, #2002	; 0x7d2
 80032f6:	4860      	ldr	r0, [pc, #384]	; (8003478 <HAL_ADC_ConfigChannel+0x250>)
 80032f8:	f7fe ff77 	bl	80021ea <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d040      	beq.n	8003386 <HAL_ADC_ConfigChannel+0x15e>
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	2b02      	cmp	r3, #2
 800330a:	d03c      	beq.n	8003386 <HAL_ADC_ConfigChannel+0x15e>
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	2b03      	cmp	r3, #3
 8003312:	d038      	beq.n	8003386 <HAL_ADC_ConfigChannel+0x15e>
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	2b04      	cmp	r3, #4
 800331a:	d034      	beq.n	8003386 <HAL_ADC_ConfigChannel+0x15e>
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	2b05      	cmp	r3, #5
 8003322:	d030      	beq.n	8003386 <HAL_ADC_ConfigChannel+0x15e>
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	2b06      	cmp	r3, #6
 800332a:	d02c      	beq.n	8003386 <HAL_ADC_ConfigChannel+0x15e>
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	2b07      	cmp	r3, #7
 8003332:	d028      	beq.n	8003386 <HAL_ADC_ConfigChannel+0x15e>
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	2b08      	cmp	r3, #8
 800333a:	d024      	beq.n	8003386 <HAL_ADC_ConfigChannel+0x15e>
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	2b09      	cmp	r3, #9
 8003342:	d020      	beq.n	8003386 <HAL_ADC_ConfigChannel+0x15e>
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	2b0a      	cmp	r3, #10
 800334a:	d01c      	beq.n	8003386 <HAL_ADC_ConfigChannel+0x15e>
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	2b0b      	cmp	r3, #11
 8003352:	d018      	beq.n	8003386 <HAL_ADC_ConfigChannel+0x15e>
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	2b0c      	cmp	r3, #12
 800335a:	d014      	beq.n	8003386 <HAL_ADC_ConfigChannel+0x15e>
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	2b0d      	cmp	r3, #13
 8003362:	d010      	beq.n	8003386 <HAL_ADC_ConfigChannel+0x15e>
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	2b0e      	cmp	r3, #14
 800336a:	d00c      	beq.n	8003386 <HAL_ADC_ConfigChannel+0x15e>
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	2b0f      	cmp	r3, #15
 8003372:	d008      	beq.n	8003386 <HAL_ADC_ConfigChannel+0x15e>
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	2b10      	cmp	r3, #16
 800337a:	d004      	beq.n	8003386 <HAL_ADC_ConfigChannel+0x15e>
 800337c:	f240 71d3 	movw	r1, #2003	; 0x7d3
 8003380:	483d      	ldr	r0, [pc, #244]	; (8003478 <HAL_ADC_ConfigChannel+0x250>)
 8003382:	f7fe ff32 	bl	80021ea <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d020      	beq.n	80033d0 <HAL_ADC_ConfigChannel+0x1a8>
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d01c      	beq.n	80033d0 <HAL_ADC_ConfigChannel+0x1a8>
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	2b02      	cmp	r3, #2
 800339c:	d018      	beq.n	80033d0 <HAL_ADC_ConfigChannel+0x1a8>
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	2b03      	cmp	r3, #3
 80033a4:	d014      	beq.n	80033d0 <HAL_ADC_ConfigChannel+0x1a8>
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	2b04      	cmp	r3, #4
 80033ac:	d010      	beq.n	80033d0 <HAL_ADC_ConfigChannel+0x1a8>
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	2b05      	cmp	r3, #5
 80033b4:	d00c      	beq.n	80033d0 <HAL_ADC_ConfigChannel+0x1a8>
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	2b06      	cmp	r3, #6
 80033bc:	d008      	beq.n	80033d0 <HAL_ADC_ConfigChannel+0x1a8>
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	2b07      	cmp	r3, #7
 80033c4:	d004      	beq.n	80033d0 <HAL_ADC_ConfigChannel+0x1a8>
 80033c6:	f240 71d4 	movw	r1, #2004	; 0x7d4
 80033ca:	482b      	ldr	r0, [pc, #172]	; (8003478 <HAL_ADC_ConfigChannel+0x250>)
 80033cc:	f7fe ff0d 	bl	80021ea <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d101      	bne.n	80033de <HAL_ADC_ConfigChannel+0x1b6>
 80033da:	2302      	movs	r3, #2
 80033dc:	e0e5      	b.n	80035aa <HAL_ADC_ConfigChannel+0x382>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	2b06      	cmp	r3, #6
 80033ec:	d81c      	bhi.n	8003428 <HAL_ADC_ConfigChannel+0x200>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685a      	ldr	r2, [r3, #4]
 80033f8:	4613      	mov	r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	4413      	add	r3, r2
 80033fe:	3b05      	subs	r3, #5
 8003400:	221f      	movs	r2, #31
 8003402:	fa02 f303 	lsl.w	r3, r2, r3
 8003406:	43db      	mvns	r3, r3
 8003408:	4019      	ands	r1, r3
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	6818      	ldr	r0, [r3, #0]
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	685a      	ldr	r2, [r3, #4]
 8003412:	4613      	mov	r3, r2
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	4413      	add	r3, r2
 8003418:	3b05      	subs	r3, #5
 800341a:	fa00 f203 	lsl.w	r2, r0, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	430a      	orrs	r2, r1
 8003424:	635a      	str	r2, [r3, #52]	; 0x34
 8003426:	e045      	b.n	80034b4 <HAL_ADC_ConfigChannel+0x28c>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	2b0c      	cmp	r3, #12
 800342e:	d825      	bhi.n	800347c <HAL_ADC_ConfigChannel+0x254>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	685a      	ldr	r2, [r3, #4]
 800343a:	4613      	mov	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	4413      	add	r3, r2
 8003440:	3b23      	subs	r3, #35	; 0x23
 8003442:	221f      	movs	r2, #31
 8003444:	fa02 f303 	lsl.w	r3, r2, r3
 8003448:	43db      	mvns	r3, r3
 800344a:	4019      	ands	r1, r3
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	6818      	ldr	r0, [r3, #0]
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685a      	ldr	r2, [r3, #4]
 8003454:	4613      	mov	r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	4413      	add	r3, r2
 800345a:	3b23      	subs	r3, #35	; 0x23
 800345c:	fa00 f203 	lsl.w	r2, r0, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	430a      	orrs	r2, r1
 8003466:	631a      	str	r2, [r3, #48]	; 0x30
 8003468:	e024      	b.n	80034b4 <HAL_ADC_ConfigChannel+0x28c>
 800346a:	bf00      	nop
 800346c:	40012400 	.word	0x40012400
 8003470:	40012800 	.word	0x40012800
 8003474:	40013c00 	.word	0x40013c00
 8003478:	0800bf0c 	.word	0x0800bf0c
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	685a      	ldr	r2, [r3, #4]
 8003486:	4613      	mov	r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	4413      	add	r3, r2
 800348c:	3b41      	subs	r3, #65	; 0x41
 800348e:	221f      	movs	r2, #31
 8003490:	fa02 f303 	lsl.w	r3, r2, r3
 8003494:	43db      	mvns	r3, r3
 8003496:	4019      	ands	r1, r3
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	6818      	ldr	r0, [r3, #0]
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	685a      	ldr	r2, [r3, #4]
 80034a0:	4613      	mov	r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	4413      	add	r3, r2
 80034a6:	3b41      	subs	r3, #65	; 0x41
 80034a8:	fa00 f203 	lsl.w	r2, r0, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	430a      	orrs	r2, r1
 80034b2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2b09      	cmp	r3, #9
 80034ba:	d91c      	bls.n	80034f6 <HAL_ADC_ConfigChannel+0x2ce>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68d9      	ldr	r1, [r3, #12]
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	4613      	mov	r3, r2
 80034c8:	005b      	lsls	r3, r3, #1
 80034ca:	4413      	add	r3, r2
 80034cc:	3b1e      	subs	r3, #30
 80034ce:	2207      	movs	r2, #7
 80034d0:	fa02 f303 	lsl.w	r3, r2, r3
 80034d4:	43db      	mvns	r3, r3
 80034d6:	4019      	ands	r1, r3
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	6898      	ldr	r0, [r3, #8]
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	4613      	mov	r3, r2
 80034e2:	005b      	lsls	r3, r3, #1
 80034e4:	4413      	add	r3, r2
 80034e6:	3b1e      	subs	r3, #30
 80034e8:	fa00 f203 	lsl.w	r2, r0, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	430a      	orrs	r2, r1
 80034f2:	60da      	str	r2, [r3, #12]
 80034f4:	e019      	b.n	800352a <HAL_ADC_ConfigChannel+0x302>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	6919      	ldr	r1, [r3, #16]
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	4613      	mov	r3, r2
 8003502:	005b      	lsls	r3, r3, #1
 8003504:	4413      	add	r3, r2
 8003506:	2207      	movs	r2, #7
 8003508:	fa02 f303 	lsl.w	r3, r2, r3
 800350c:	43db      	mvns	r3, r3
 800350e:	4019      	ands	r1, r3
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	6898      	ldr	r0, [r3, #8]
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	4613      	mov	r3, r2
 800351a:	005b      	lsls	r3, r3, #1
 800351c:	4413      	add	r3, r2
 800351e:	fa00 f203 	lsl.w	r2, r0, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	430a      	orrs	r2, r1
 8003528:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2b10      	cmp	r3, #16
 8003530:	d003      	beq.n	800353a <HAL_ADC_ConfigChannel+0x312>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003536:	2b11      	cmp	r3, #17
 8003538:	d132      	bne.n	80035a0 <HAL_ADC_ConfigChannel+0x378>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a1d      	ldr	r2, [pc, #116]	; (80035b4 <HAL_ADC_ConfigChannel+0x38c>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d125      	bne.n	8003590 <HAL_ADC_ConfigChannel+0x368>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d126      	bne.n	80035a0 <HAL_ADC_ConfigChannel+0x378>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	689a      	ldr	r2, [r3, #8]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003560:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2b10      	cmp	r3, #16
 8003568:	d11a      	bne.n	80035a0 <HAL_ADC_ConfigChannel+0x378>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800356a:	4b13      	ldr	r3, [pc, #76]	; (80035b8 <HAL_ADC_ConfigChannel+0x390>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a13      	ldr	r2, [pc, #76]	; (80035bc <HAL_ADC_ConfigChannel+0x394>)
 8003570:	fba2 2303 	umull	r2, r3, r2, r3
 8003574:	0c9a      	lsrs	r2, r3, #18
 8003576:	4613      	mov	r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	4413      	add	r3, r2
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003580:	e002      	b.n	8003588 <HAL_ADC_ConfigChannel+0x360>
          {
            wait_loop_index--;
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	3b01      	subs	r3, #1
 8003586:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1f9      	bne.n	8003582 <HAL_ADC_ConfigChannel+0x35a>
 800358e:	e007      	b.n	80035a0 <HAL_ADC_ConfigChannel+0x378>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003594:	f043 0220 	orr.w	r2, r3, #32
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80035a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3710      	adds	r7, #16
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	40012400 	.word	0x40012400
 80035b8:	2000000c 	.word	0x2000000c
 80035bc:	431bde83 	.word	0x431bde83

080035c0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035c8:	2300      	movs	r3, #0
 80035ca:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f003 0301 	and.w	r3, r3, #1
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d127      	bne.n	800362a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	689a      	ldr	r2, [r3, #8]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f022 0201 	bic.w	r2, r2, #1
 80035e8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80035ea:	f7ff fc4d 	bl	8002e88 <HAL_GetTick>
 80035ee:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80035f0:	e014      	b.n	800361c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80035f2:	f7ff fc49 	bl	8002e88 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d90d      	bls.n	800361c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003604:	f043 0210 	orr.w	r2, r3, #16
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003610:	f043 0201 	orr.w	r2, r3, #1
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e007      	b.n	800362c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	2b01      	cmp	r3, #1
 8003628:	d0e3      	beq.n	80035f2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3710      	adds	r7, #16
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003634:	b480      	push	{r7}
 8003636:	b085      	sub	sp, #20
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f003 0307 	and.w	r3, r3, #7
 8003642:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003644:	4b0c      	ldr	r3, [pc, #48]	; (8003678 <__NVIC_SetPriorityGrouping+0x44>)
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800364a:	68ba      	ldr	r2, [r7, #8]
 800364c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003650:	4013      	ands	r3, r2
 8003652:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800365c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003660:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003664:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003666:	4a04      	ldr	r2, [pc, #16]	; (8003678 <__NVIC_SetPriorityGrouping+0x44>)
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	60d3      	str	r3, [r2, #12]
}
 800366c:	bf00      	nop
 800366e:	3714      	adds	r7, #20
 8003670:	46bd      	mov	sp, r7
 8003672:	bc80      	pop	{r7}
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	e000ed00 	.word	0xe000ed00

0800367c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800367c:	b480      	push	{r7}
 800367e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003680:	4b04      	ldr	r3, [pc, #16]	; (8003694 <__NVIC_GetPriorityGrouping+0x18>)
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	0a1b      	lsrs	r3, r3, #8
 8003686:	f003 0307 	and.w	r3, r3, #7
}
 800368a:	4618      	mov	r0, r3
 800368c:	46bd      	mov	sp, r7
 800368e:	bc80      	pop	{r7}
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	e000ed00 	.word	0xe000ed00

08003698 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	4603      	mov	r3, r0
 80036a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	db0b      	blt.n	80036c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036aa:	79fb      	ldrb	r3, [r7, #7]
 80036ac:	f003 021f 	and.w	r2, r3, #31
 80036b0:	4906      	ldr	r1, [pc, #24]	; (80036cc <__NVIC_EnableIRQ+0x34>)
 80036b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b6:	095b      	lsrs	r3, r3, #5
 80036b8:	2001      	movs	r0, #1
 80036ba:	fa00 f202 	lsl.w	r2, r0, r2
 80036be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80036c2:	bf00      	nop
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bc80      	pop	{r7}
 80036ca:	4770      	bx	lr
 80036cc:	e000e100 	.word	0xe000e100

080036d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	4603      	mov	r3, r0
 80036d8:	6039      	str	r1, [r7, #0]
 80036da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	db0a      	blt.n	80036fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	b2da      	uxtb	r2, r3
 80036e8:	490c      	ldr	r1, [pc, #48]	; (800371c <__NVIC_SetPriority+0x4c>)
 80036ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ee:	0112      	lsls	r2, r2, #4
 80036f0:	b2d2      	uxtb	r2, r2
 80036f2:	440b      	add	r3, r1
 80036f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036f8:	e00a      	b.n	8003710 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	b2da      	uxtb	r2, r3
 80036fe:	4908      	ldr	r1, [pc, #32]	; (8003720 <__NVIC_SetPriority+0x50>)
 8003700:	79fb      	ldrb	r3, [r7, #7]
 8003702:	f003 030f 	and.w	r3, r3, #15
 8003706:	3b04      	subs	r3, #4
 8003708:	0112      	lsls	r2, r2, #4
 800370a:	b2d2      	uxtb	r2, r2
 800370c:	440b      	add	r3, r1
 800370e:	761a      	strb	r2, [r3, #24]
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	bc80      	pop	{r7}
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	e000e100 	.word	0xe000e100
 8003720:	e000ed00 	.word	0xe000ed00

08003724 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003724:	b480      	push	{r7}
 8003726:	b089      	sub	sp, #36	; 0x24
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f003 0307 	and.w	r3, r3, #7
 8003736:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	f1c3 0307 	rsb	r3, r3, #7
 800373e:	2b04      	cmp	r3, #4
 8003740:	bf28      	it	cs
 8003742:	2304      	movcs	r3, #4
 8003744:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	3304      	adds	r3, #4
 800374a:	2b06      	cmp	r3, #6
 800374c:	d902      	bls.n	8003754 <NVIC_EncodePriority+0x30>
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	3b03      	subs	r3, #3
 8003752:	e000      	b.n	8003756 <NVIC_EncodePriority+0x32>
 8003754:	2300      	movs	r3, #0
 8003756:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003758:	f04f 32ff 	mov.w	r2, #4294967295
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	fa02 f303 	lsl.w	r3, r2, r3
 8003762:	43da      	mvns	r2, r3
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	401a      	ands	r2, r3
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800376c:	f04f 31ff 	mov.w	r1, #4294967295
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	fa01 f303 	lsl.w	r3, r1, r3
 8003776:	43d9      	mvns	r1, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800377c:	4313      	orrs	r3, r2
         );
}
 800377e:	4618      	mov	r0, r3
 8003780:	3724      	adds	r7, #36	; 0x24
 8003782:	46bd      	mov	sp, r7
 8003784:	bc80      	pop	{r7}
 8003786:	4770      	bx	lr

08003788 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	3b01      	subs	r3, #1
 8003794:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003798:	d301      	bcc.n	800379e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800379a:	2301      	movs	r3, #1
 800379c:	e00f      	b.n	80037be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800379e:	4a0a      	ldr	r2, [pc, #40]	; (80037c8 <SysTick_Config+0x40>)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	3b01      	subs	r3, #1
 80037a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037a6:	210f      	movs	r1, #15
 80037a8:	f04f 30ff 	mov.w	r0, #4294967295
 80037ac:	f7ff ff90 	bl	80036d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037b0:	4b05      	ldr	r3, [pc, #20]	; (80037c8 <SysTick_Config+0x40>)
 80037b2:	2200      	movs	r2, #0
 80037b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037b6:	4b04      	ldr	r3, [pc, #16]	; (80037c8 <SysTick_Config+0x40>)
 80037b8:	2207      	movs	r2, #7
 80037ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3708      	adds	r7, #8
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	e000e010 	.word	0xe000e010

080037cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2b07      	cmp	r3, #7
 80037d8:	d00f      	beq.n	80037fa <HAL_NVIC_SetPriorityGrouping+0x2e>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2b06      	cmp	r3, #6
 80037de:	d00c      	beq.n	80037fa <HAL_NVIC_SetPriorityGrouping+0x2e>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b05      	cmp	r3, #5
 80037e4:	d009      	beq.n	80037fa <HAL_NVIC_SetPriorityGrouping+0x2e>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2b04      	cmp	r3, #4
 80037ea:	d006      	beq.n	80037fa <HAL_NVIC_SetPriorityGrouping+0x2e>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2b03      	cmp	r3, #3
 80037f0:	d003      	beq.n	80037fa <HAL_NVIC_SetPriorityGrouping+0x2e>
 80037f2:	2192      	movs	r1, #146	; 0x92
 80037f4:	4804      	ldr	r0, [pc, #16]	; (8003808 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80037f6:	f7fe fcf8 	bl	80021ea <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f7ff ff1a 	bl	8003634 <__NVIC_SetPriorityGrouping>
}
 8003800:	bf00      	nop
 8003802:	3708      	adds	r7, #8
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	0800bf44 	.word	0x0800bf44

0800380c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800380c:	b580      	push	{r7, lr}
 800380e:	b086      	sub	sp, #24
 8003810:	af00      	add	r7, sp, #0
 8003812:	4603      	mov	r3, r0
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	607a      	str	r2, [r7, #4]
 8003818:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800381a:	2300      	movs	r3, #0
 800381c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2b0f      	cmp	r3, #15
 8003822:	d903      	bls.n	800382c <HAL_NVIC_SetPriority+0x20>
 8003824:	21aa      	movs	r1, #170	; 0xaa
 8003826:	480e      	ldr	r0, [pc, #56]	; (8003860 <HAL_NVIC_SetPriority+0x54>)
 8003828:	f7fe fcdf 	bl	80021ea <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	2b0f      	cmp	r3, #15
 8003830:	d903      	bls.n	800383a <HAL_NVIC_SetPriority+0x2e>
 8003832:	21ab      	movs	r1, #171	; 0xab
 8003834:	480a      	ldr	r0, [pc, #40]	; (8003860 <HAL_NVIC_SetPriority+0x54>)
 8003836:	f7fe fcd8 	bl	80021ea <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800383a:	f7ff ff1f 	bl	800367c <__NVIC_GetPriorityGrouping>
 800383e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	68b9      	ldr	r1, [r7, #8]
 8003844:	6978      	ldr	r0, [r7, #20]
 8003846:	f7ff ff6d 	bl	8003724 <NVIC_EncodePriority>
 800384a:	4602      	mov	r2, r0
 800384c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003850:	4611      	mov	r1, r2
 8003852:	4618      	mov	r0, r3
 8003854:	f7ff ff3c 	bl	80036d0 <__NVIC_SetPriority>
}
 8003858:	bf00      	nop
 800385a:	3718      	adds	r7, #24
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	0800bf44 	.word	0x0800bf44

08003864 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	4603      	mov	r3, r0
 800386c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800386e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003872:	2b00      	cmp	r3, #0
 8003874:	da03      	bge.n	800387e <HAL_NVIC_EnableIRQ+0x1a>
 8003876:	21be      	movs	r1, #190	; 0xbe
 8003878:	4805      	ldr	r0, [pc, #20]	; (8003890 <HAL_NVIC_EnableIRQ+0x2c>)
 800387a:	f7fe fcb6 	bl	80021ea <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800387e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003882:	4618      	mov	r0, r3
 8003884:	f7ff ff08 	bl	8003698 <__NVIC_EnableIRQ>
}
 8003888:	bf00      	nop
 800388a:	3708      	adds	r7, #8
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}
 8003890:	0800bf44 	.word	0x0800bf44

08003894 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f7ff ff73 	bl	8003788 <SysTick_Config>
 80038a2:	4603      	mov	r3, r0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3708      	adds	r7, #8
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d101      	bne.n	80038be <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e01e      	b.n	80038fc <HAL_DAC_Init+0x50>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a10      	ldr	r2, [pc, #64]	; (8003904 <HAL_DAC_Init+0x58>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d004      	beq.n	80038d2 <HAL_DAC_Init+0x26>
 80038c8:	f44f 7199 	mov.w	r1, #306	; 0x132
 80038cc:	480e      	ldr	r0, [pc, #56]	; (8003908 <HAL_DAC_Init+0x5c>)
 80038ce:	f7fe fc8c 	bl	80021ea <assert_failed>

  if (hdac->State == HAL_DAC_STATE_RESET)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	791b      	ldrb	r3, [r3, #4]
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d105      	bne.n	80038e8 <HAL_DAC_Init+0x3c>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f7fd fb86 	bl	8000ff4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2202      	movs	r2, #2
 80038ec:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3708      	adds	r7, #8
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	40007400 	.word	0x40007400
 8003908:	0800bf80 	.word	0x0800bf80

0800390c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	607a      	str	r2, [r7, #4]
 8003918:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800391a:	2300      	movs	r3, #0
 800391c:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d007      	beq.n	8003934 <HAL_DAC_Start_DMA+0x28>
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	2b10      	cmp	r3, #16
 8003928:	d004      	beq.n	8003934 <HAL_DAC_Start_DMA+0x28>
 800392a:	f240 212a 	movw	r1, #554	; 0x22a
 800392e:	485b      	ldr	r0, [pc, #364]	; (8003a9c <HAL_DAC_Start_DMA+0x190>)
 8003930:	f7fe fc5b 	bl	80021ea <assert_failed>
  assert_param(IS_DAC_ALIGN(Alignment));
 8003934:	6a3b      	ldr	r3, [r7, #32]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00a      	beq.n	8003950 <HAL_DAC_Start_DMA+0x44>
 800393a:	6a3b      	ldr	r3, [r7, #32]
 800393c:	2b04      	cmp	r3, #4
 800393e:	d007      	beq.n	8003950 <HAL_DAC_Start_DMA+0x44>
 8003940:	6a3b      	ldr	r3, [r7, #32]
 8003942:	2b08      	cmp	r3, #8
 8003944:	d004      	beq.n	8003950 <HAL_DAC_Start_DMA+0x44>
 8003946:	f240 212b 	movw	r1, #555	; 0x22b
 800394a:	4854      	ldr	r0, [pc, #336]	; (8003a9c <HAL_DAC_Start_DMA+0x190>)
 800394c:	f7fe fc4d 	bl	80021ea <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdac);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	795b      	ldrb	r3, [r3, #5]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d101      	bne.n	800395c <HAL_DAC_Start_DMA+0x50>
 8003958:	2302      	movs	r3, #2
 800395a:	e09b      	b.n	8003a94 <HAL_DAC_Start_DMA+0x188>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2201      	movs	r2, #1
 8003960:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2202      	movs	r2, #2
 8003966:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d12f      	bne.n	80039ce <HAL_DAC_Start_DMA+0xc2>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	4a4b      	ldr	r2, [pc, #300]	; (8003aa0 <HAL_DAC_Start_DMA+0x194>)
 8003974:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	4a4a      	ldr	r2, [pc, #296]	; (8003aa4 <HAL_DAC_Start_DMA+0x198>)
 800397c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	4a49      	ldr	r2, [pc, #292]	; (8003aa8 <HAL_DAC_Start_DMA+0x19c>)
 8003984:	631a      	str	r2, [r3, #48]	; 0x30

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003994:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8003996:	6a3b      	ldr	r3, [r7, #32]
 8003998:	2b08      	cmp	r3, #8
 800399a:	d013      	beq.n	80039c4 <HAL_DAC_Start_DMA+0xb8>
 800399c:	6a3b      	ldr	r3, [r7, #32]
 800399e:	2b08      	cmp	r3, #8
 80039a0:	d845      	bhi.n	8003a2e <HAL_DAC_Start_DMA+0x122>
 80039a2:	6a3b      	ldr	r3, [r7, #32]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d003      	beq.n	80039b0 <HAL_DAC_Start_DMA+0xa4>
 80039a8:	6a3b      	ldr	r3, [r7, #32]
 80039aa:	2b04      	cmp	r3, #4
 80039ac:	d005      	beq.n	80039ba <HAL_DAC_Start_DMA+0xae>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80039ae:	e03e      	b.n	8003a2e <HAL_DAC_Start_DMA+0x122>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	3308      	adds	r3, #8
 80039b6:	613b      	str	r3, [r7, #16]
        break;
 80039b8:	e03c      	b.n	8003a34 <HAL_DAC_Start_DMA+0x128>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	330c      	adds	r3, #12
 80039c0:	613b      	str	r3, [r7, #16]
        break;
 80039c2:	e037      	b.n	8003a34 <HAL_DAC_Start_DMA+0x128>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	3310      	adds	r3, #16
 80039ca:	613b      	str	r3, [r7, #16]
        break;
 80039cc:	e032      	b.n	8003a34 <HAL_DAC_Start_DMA+0x128>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	4a36      	ldr	r2, [pc, #216]	; (8003aac <HAL_DAC_Start_DMA+0x1a0>)
 80039d4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	4a35      	ldr	r2, [pc, #212]	; (8003ab0 <HAL_DAC_Start_DMA+0x1a4>)
 80039dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	4a34      	ldr	r2, [pc, #208]	; (8003ab4 <HAL_DAC_Start_DMA+0x1a8>)
 80039e4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80039f4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80039f6:	6a3b      	ldr	r3, [r7, #32]
 80039f8:	2b08      	cmp	r3, #8
 80039fa:	d013      	beq.n	8003a24 <HAL_DAC_Start_DMA+0x118>
 80039fc:	6a3b      	ldr	r3, [r7, #32]
 80039fe:	2b08      	cmp	r3, #8
 8003a00:	d817      	bhi.n	8003a32 <HAL_DAC_Start_DMA+0x126>
 8003a02:	6a3b      	ldr	r3, [r7, #32]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d003      	beq.n	8003a10 <HAL_DAC_Start_DMA+0x104>
 8003a08:	6a3b      	ldr	r3, [r7, #32]
 8003a0a:	2b04      	cmp	r3, #4
 8003a0c:	d005      	beq.n	8003a1a <HAL_DAC_Start_DMA+0x10e>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8003a0e:	e010      	b.n	8003a32 <HAL_DAC_Start_DMA+0x126>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	3314      	adds	r3, #20
 8003a16:	613b      	str	r3, [r7, #16]
        break;
 8003a18:	e00c      	b.n	8003a34 <HAL_DAC_Start_DMA+0x128>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	3318      	adds	r3, #24
 8003a20:	613b      	str	r3, [r7, #16]
        break;
 8003a22:	e007      	b.n	8003a34 <HAL_DAC_Start_DMA+0x128>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	331c      	adds	r3, #28
 8003a2a:	613b      	str	r3, [r7, #16]
        break;
 8003a2c:	e002      	b.n	8003a34 <HAL_DAC_Start_DMA+0x128>
        break;
 8003a2e:	bf00      	nop
 8003a30:	e000      	b.n	8003a34 <HAL_DAC_Start_DMA+0x128>
        break;
 8003a32:	bf00      	nop
    }
  }

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d109      	bne.n	8003a4e <HAL_DAC_Start_DMA+0x142>
#if defined(DAC_CR_DMAUDRIE1)
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* DAC_CR_DMAUDRIE1 */
   /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6898      	ldr	r0, [r3, #8]
 8003a3e:	6879      	ldr	r1, [r7, #4]
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	f000 faba 	bl	8003fbc <HAL_DMA_Start_IT>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	75fb      	strb	r3, [r7, #23]
 8003a4c:	e008      	b.n	8003a60 <HAL_DAC_Start_DMA+0x154>
#if defined(DAC_CR_DMAUDRIE2)
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
#endif /* DAC_CR_DMAUDRIE2 */
    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	68d8      	ldr	r0, [r3, #12]
 8003a52:	6879      	ldr	r1, [r7, #4]
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	693a      	ldr	r2, [r7, #16]
 8003a58:	f000 fab0 	bl	8003fbc <HAL_DMA_Start_IT>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2200      	movs	r2, #0
 8003a64:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003a66:	7dfb      	ldrb	r3, [r7, #23]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d10c      	bne.n	8003a86 <HAL_DAC_Start_DMA+0x17a>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	6819      	ldr	r1, [r3, #0]
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	f003 0310 	and.w	r3, r3, #16
 8003a78:	2201      	movs	r2, #1
 8003a7a:	409a      	lsls	r2, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	430a      	orrs	r2, r1
 8003a82:	601a      	str	r2, [r3, #0]
 8003a84:	e005      	b.n	8003a92 <HAL_DAC_Start_DMA+0x186>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	f043 0204 	orr.w	r2, r3, #4
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8003a92:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3718      	adds	r7, #24
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	0800bf80 	.word	0x0800bf80
 8003aa0:	08003c2d 	.word	0x08003c2d
 8003aa4:	08003c4f 	.word	0x08003c4f
 8003aa8:	08003c6b 	.word	0x08003c6b
 8003aac:	08003ccf 	.word	0x08003ccf
 8003ab0:	08003cf1 	.word	0x08003cf1
 8003ab4:	08003d0d 	.word	0x08003d0d

08003ab8 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8003ac0:	bf00      	nop
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bc80      	pop	{r7}
 8003ac8:	4770      	bx	lr

08003aca <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003aca:	b480      	push	{r7}
 8003acc:	b083      	sub	sp, #12
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8003ad2:	bf00      	nop
 8003ad4:	370c      	adds	r7, #12
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bc80      	pop	{r7}
 8003ada:	4770      	bx	lr

08003adc <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003ae4:	bf00      	nop
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bc80      	pop	{r7}
 8003aec:	4770      	bx	lr
	...

08003af0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b086      	sub	sp, #24
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC parameters */
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d024      	beq.n	8003b4e <HAL_DAC_ConfigChannel+0x5e>
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2b04      	cmp	r3, #4
 8003b0a:	d020      	beq.n	8003b4e <HAL_DAC_ConfigChannel+0x5e>
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2b0c      	cmp	r3, #12
 8003b12:	d01c      	beq.n	8003b4e <HAL_DAC_ConfigChannel+0x5e>
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2b14      	cmp	r3, #20
 8003b1a:	d018      	beq.n	8003b4e <HAL_DAC_ConfigChannel+0x5e>
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2b1c      	cmp	r3, #28
 8003b22:	d014      	beq.n	8003b4e <HAL_DAC_ConfigChannel+0x5e>
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2b24      	cmp	r3, #36	; 0x24
 8003b2a:	d010      	beq.n	8003b4e <HAL_DAC_ConfigChannel+0x5e>
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2b2c      	cmp	r3, #44	; 0x2c
 8003b32:	d00c      	beq.n	8003b4e <HAL_DAC_ConfigChannel+0x5e>
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2b34      	cmp	r3, #52	; 0x34
 8003b3a:	d008      	beq.n	8003b4e <HAL_DAC_ConfigChannel+0x5e>
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2b3c      	cmp	r3, #60	; 0x3c
 8003b42:	d004      	beq.n	8003b4e <HAL_DAC_ConfigChannel+0x5e>
 8003b44:	f240 31c3 	movw	r1, #963	; 0x3c3
 8003b48:	4837      	ldr	r0, [pc, #220]	; (8003c28 <HAL_DAC_ConfigChannel+0x138>)
 8003b4a:	f7fe fb4e 	bl	80021ea <assert_failed>
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d008      	beq.n	8003b68 <HAL_DAC_ConfigChannel+0x78>
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d004      	beq.n	8003b68 <HAL_DAC_ConfigChannel+0x78>
 8003b5e:	f44f 7171 	mov.w	r1, #964	; 0x3c4
 8003b62:	4831      	ldr	r0, [pc, #196]	; (8003c28 <HAL_DAC_ConfigChannel+0x138>)
 8003b64:	f7fe fb41 	bl	80021ea <assert_failed>
  assert_param(IS_DAC_CHANNEL(Channel));
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d007      	beq.n	8003b7e <HAL_DAC_ConfigChannel+0x8e>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2b10      	cmp	r3, #16
 8003b72:	d004      	beq.n	8003b7e <HAL_DAC_ConfigChannel+0x8e>
 8003b74:	f240 31c5 	movw	r1, #965	; 0x3c5
 8003b78:	482b      	ldr	r0, [pc, #172]	; (8003c28 <HAL_DAC_ConfigChannel+0x138>)
 8003b7a:	f7fe fb36 	bl	80021ea <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdac);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	795b      	ldrb	r3, [r3, #5]
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d101      	bne.n	8003b8a <HAL_DAC_ConfigChannel+0x9a>
 8003b86:	2302      	movs	r3, #2
 8003b88:	e04a      	b.n	8003c20 <HAL_DAC_ConfigChannel+0x130>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2202      	movs	r2, #2
 8003b94:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f003 0310 	and.w	r3, r3, #16
 8003ba4:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bac:	43db      	mvns	r3, r3
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f003 0310 	and.w	r3, r3, #16
 8003bc6:	693a      	ldr	r2, [r7, #16]
 8003bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bcc:	697a      	ldr	r2, [r7, #20]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	697a      	ldr	r2, [r7, #20]
 8003bd8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	6819      	ldr	r1, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f003 0310 	and.w	r3, r3, #16
 8003be6:	22c0      	movs	r2, #192	; 0xc0
 8003be8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bec:	43da      	mvns	r2, r3
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	400a      	ands	r2, r1
 8003bf4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	6819      	ldr	r1, [r3, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f003 0310 	and.w	r3, r3, #16
 8003c02:	22c0      	movs	r2, #192	; 0xc0
 8003c04:	fa02 f303 	lsl.w	r3, r2, r3
 8003c08:	43da      	mvns	r2, r3
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	400a      	ands	r2, r1
 8003c10:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2201      	movs	r2, #1
 8003c16:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003c1e:	2300      	movs	r3, #0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3718      	adds	r7, #24
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	0800bf80 	.word	0x0800bf80

08003c2c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c38:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8003c3a:	68f8      	ldr	r0, [r7, #12]
 8003c3c:	f7ff ff3c 	bl	8003ab8 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2201      	movs	r2, #1
 8003c44:	711a      	strb	r2, [r3, #4]
}
 8003c46:	bf00      	nop
 8003c48:	3710      	adds	r7, #16
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b084      	sub	sp, #16
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003c5c:	68f8      	ldr	r0, [r7, #12]
 8003c5e:	f7ff ff34 	bl	8003aca <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003c62:	bf00      	nop
 8003c64:	3710      	adds	r7, #16
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}

08003c6a <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8003c6a:	b580      	push	{r7, lr}
 8003c6c:	b084      	sub	sp, #16
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c76:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	691b      	ldr	r3, [r3, #16]
 8003c7c:	f043 0204 	orr.w	r2, r3, #4
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003c84:	68f8      	ldr	r0, [r7, #12]
 8003c86:	f7ff ff29 	bl	8003adc <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	711a      	strb	r2, [r3, #4]
}
 8003c90:	bf00      	nop
 8003c92:	3710      	adds	r7, #16
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bc80      	pop	{r7}
 8003ca8:	4770      	bx	lr

08003caa <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003caa:	b480      	push	{r7}
 8003cac:	b083      	sub	sp, #12
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003cb2:	bf00      	nop
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bc80      	pop	{r7}
 8003cba:	4770      	bx	lr

08003cbc <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003cc4:	bf00      	nop
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bc80      	pop	{r7}
 8003ccc:	4770      	bx	lr

08003cce <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003cce:	b580      	push	{r7, lr}
 8003cd0:	b084      	sub	sp, #16
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cda:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8003cdc:	68f8      	ldr	r0, [r7, #12]
 8003cde:	f7ff ffdb 	bl	8003c98 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	711a      	strb	r2, [r3, #4]
}
 8003ce8:	bf00      	nop
 8003cea:	3710      	adds	r7, #16
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfc:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8003cfe:	68f8      	ldr	r0, [r7, #12]
 8003d00:	f7ff ffd3 	bl	8003caa <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003d04:	bf00      	nop
 8003d06:	3710      	adds	r7, #16
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d18:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	f043 0204 	orr.w	r2, r3, #4
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003d26:	68f8      	ldr	r0, [r7, #12]
 8003d28:	f7ff ffc8 	bl	8003cbc <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	711a      	strb	r2, [r3, #4]
}
 8003d32:	bf00      	nop
 8003d34:	3710      	adds	r7, #16
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
	...

08003d3c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003d44:	2300      	movs	r3, #0
 8003d46:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d101      	bne.n	8003d52 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e109      	b.n	8003f66 <HAL_DMA_Init+0x22a>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a86      	ldr	r2, [pc, #536]	; (8003f70 <HAL_DMA_Init+0x234>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d03a      	beq.n	8003dd2 <HAL_DMA_Init+0x96>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a84      	ldr	r2, [pc, #528]	; (8003f74 <HAL_DMA_Init+0x238>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d035      	beq.n	8003dd2 <HAL_DMA_Init+0x96>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a83      	ldr	r2, [pc, #524]	; (8003f78 <HAL_DMA_Init+0x23c>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d030      	beq.n	8003dd2 <HAL_DMA_Init+0x96>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a81      	ldr	r2, [pc, #516]	; (8003f7c <HAL_DMA_Init+0x240>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d02b      	beq.n	8003dd2 <HAL_DMA_Init+0x96>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a80      	ldr	r2, [pc, #512]	; (8003f80 <HAL_DMA_Init+0x244>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d026      	beq.n	8003dd2 <HAL_DMA_Init+0x96>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a7e      	ldr	r2, [pc, #504]	; (8003f84 <HAL_DMA_Init+0x248>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d021      	beq.n	8003dd2 <HAL_DMA_Init+0x96>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a7d      	ldr	r2, [pc, #500]	; (8003f88 <HAL_DMA_Init+0x24c>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d01c      	beq.n	8003dd2 <HAL_DMA_Init+0x96>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a7b      	ldr	r2, [pc, #492]	; (8003f8c <HAL_DMA_Init+0x250>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d017      	beq.n	8003dd2 <HAL_DMA_Init+0x96>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a7a      	ldr	r2, [pc, #488]	; (8003f90 <HAL_DMA_Init+0x254>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d012      	beq.n	8003dd2 <HAL_DMA_Init+0x96>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a78      	ldr	r2, [pc, #480]	; (8003f94 <HAL_DMA_Init+0x258>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d00d      	beq.n	8003dd2 <HAL_DMA_Init+0x96>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a77      	ldr	r2, [pc, #476]	; (8003f98 <HAL_DMA_Init+0x25c>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d008      	beq.n	8003dd2 <HAL_DMA_Init+0x96>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a75      	ldr	r2, [pc, #468]	; (8003f9c <HAL_DMA_Init+0x260>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d003      	beq.n	8003dd2 <HAL_DMA_Init+0x96>
 8003dca:	219a      	movs	r1, #154	; 0x9a
 8003dcc:	4874      	ldr	r0, [pc, #464]	; (8003fa0 <HAL_DMA_Init+0x264>)
 8003dce:	f7fe fa0c 	bl	80021ea <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00c      	beq.n	8003df4 <HAL_DMA_Init+0xb8>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	2b10      	cmp	r3, #16
 8003de0:	d008      	beq.n	8003df4 <HAL_DMA_Init+0xb8>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dea:	d003      	beq.n	8003df4 <HAL_DMA_Init+0xb8>
 8003dec:	219b      	movs	r1, #155	; 0x9b
 8003dee:	486c      	ldr	r0, [pc, #432]	; (8003fa0 <HAL_DMA_Init+0x264>)
 8003df0:	f7fe f9fb 	bl	80021ea <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	2b40      	cmp	r3, #64	; 0x40
 8003dfa:	d007      	beq.n	8003e0c <HAL_DMA_Init+0xd0>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d003      	beq.n	8003e0c <HAL_DMA_Init+0xd0>
 8003e04:	219c      	movs	r1, #156	; 0x9c
 8003e06:	4866      	ldr	r0, [pc, #408]	; (8003fa0 <HAL_DMA_Init+0x264>)
 8003e08:	f7fe f9ef 	bl	80021ea <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	2b80      	cmp	r3, #128	; 0x80
 8003e12:	d007      	beq.n	8003e24 <HAL_DMA_Init+0xe8>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d003      	beq.n	8003e24 <HAL_DMA_Init+0xe8>
 8003e1c:	219d      	movs	r1, #157	; 0x9d
 8003e1e:	4860      	ldr	r0, [pc, #384]	; (8003fa0 <HAL_DMA_Init+0x264>)
 8003e20:	f7fe f9e3 	bl	80021ea <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d00d      	beq.n	8003e48 <HAL_DMA_Init+0x10c>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	691b      	ldr	r3, [r3, #16]
 8003e30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e34:	d008      	beq.n	8003e48 <HAL_DMA_Init+0x10c>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e3e:	d003      	beq.n	8003e48 <HAL_DMA_Init+0x10c>
 8003e40:	219e      	movs	r1, #158	; 0x9e
 8003e42:	4857      	ldr	r0, [pc, #348]	; (8003fa0 <HAL_DMA_Init+0x264>)
 8003e44:	f7fe f9d1 	bl	80021ea <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	695b      	ldr	r3, [r3, #20]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d00d      	beq.n	8003e6c <HAL_DMA_Init+0x130>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	695b      	ldr	r3, [r3, #20]
 8003e54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e58:	d008      	beq.n	8003e6c <HAL_DMA_Init+0x130>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e62:	d003      	beq.n	8003e6c <HAL_DMA_Init+0x130>
 8003e64:	219f      	movs	r1, #159	; 0x9f
 8003e66:	484e      	ldr	r0, [pc, #312]	; (8003fa0 <HAL_DMA_Init+0x264>)
 8003e68:	f7fe f9bf 	bl	80021ea <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d007      	beq.n	8003e84 <HAL_DMA_Init+0x148>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	2b20      	cmp	r3, #32
 8003e7a:	d003      	beq.n	8003e84 <HAL_DMA_Init+0x148>
 8003e7c:	21a0      	movs	r1, #160	; 0xa0
 8003e7e:	4848      	ldr	r0, [pc, #288]	; (8003fa0 <HAL_DMA_Init+0x264>)
 8003e80:	f7fe f9b3 	bl	80021ea <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	69db      	ldr	r3, [r3, #28]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d012      	beq.n	8003eb2 <HAL_DMA_Init+0x176>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	69db      	ldr	r3, [r3, #28]
 8003e90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e94:	d00d      	beq.n	8003eb2 <HAL_DMA_Init+0x176>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	69db      	ldr	r3, [r3, #28]
 8003e9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e9e:	d008      	beq.n	8003eb2 <HAL_DMA_Init+0x176>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	69db      	ldr	r3, [r3, #28]
 8003ea4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003ea8:	d003      	beq.n	8003eb2 <HAL_DMA_Init+0x176>
 8003eaa:	21a1      	movs	r1, #161	; 0xa1
 8003eac:	483c      	ldr	r0, [pc, #240]	; (8003fa0 <HAL_DMA_Init+0x264>)
 8003eae:	f7fe f99c 	bl	80021ea <assert_failed>

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	4b3a      	ldr	r3, [pc, #232]	; (8003fa4 <HAL_DMA_Init+0x268>)
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d80f      	bhi.n	8003ede <HAL_DMA_Init+0x1a2>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	4b38      	ldr	r3, [pc, #224]	; (8003fa8 <HAL_DMA_Init+0x26c>)
 8003ec6:	4413      	add	r3, r2
 8003ec8:	4a38      	ldr	r2, [pc, #224]	; (8003fac <HAL_DMA_Init+0x270>)
 8003eca:	fba2 2303 	umull	r2, r3, r2, r3
 8003ece:	091b      	lsrs	r3, r3, #4
 8003ed0:	009a      	lsls	r2, r3, #2
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a35      	ldr	r2, [pc, #212]	; (8003fb0 <HAL_DMA_Init+0x274>)
 8003eda:	63da      	str	r2, [r3, #60]	; 0x3c
 8003edc:	e00e      	b.n	8003efc <HAL_DMA_Init+0x1c0>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	4b33      	ldr	r3, [pc, #204]	; (8003fb4 <HAL_DMA_Init+0x278>)
 8003ee6:	4413      	add	r3, r2
 8003ee8:	4a30      	ldr	r2, [pc, #192]	; (8003fac <HAL_DMA_Init+0x270>)
 8003eea:	fba2 2303 	umull	r2, r3, r2, r3
 8003eee:	091b      	lsrs	r3, r3, #4
 8003ef0:	009a      	lsls	r2, r3, #2
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a2f      	ldr	r2, [pc, #188]	; (8003fb8 <HAL_DMA_Init+0x27c>)
 8003efa:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2202      	movs	r2, #2
 8003f00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003f12:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003f16:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003f20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	69db      	ldr	r3, [r3, #28]
 8003f3e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003f40:	68fa      	ldr	r2, [r7, #12]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	40020008 	.word	0x40020008
 8003f74:	4002001c 	.word	0x4002001c
 8003f78:	40020030 	.word	0x40020030
 8003f7c:	40020044 	.word	0x40020044
 8003f80:	40020058 	.word	0x40020058
 8003f84:	4002006c 	.word	0x4002006c
 8003f88:	40020080 	.word	0x40020080
 8003f8c:	40020408 	.word	0x40020408
 8003f90:	4002041c 	.word	0x4002041c
 8003f94:	40020430 	.word	0x40020430
 8003f98:	40020444 	.word	0x40020444
 8003f9c:	40020458 	.word	0x40020458
 8003fa0:	0800bfb8 	.word	0x0800bfb8
 8003fa4:	40020407 	.word	0x40020407
 8003fa8:	bffdfff8 	.word	0xbffdfff8
 8003fac:	cccccccd 	.word	0xcccccccd
 8003fb0:	40020000 	.word	0x40020000
 8003fb4:	bffdfbf8 	.word	0xbffdfbf8
 8003fb8:	40020400 	.word	0x40020400

08003fbc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b086      	sub	sp, #24
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	607a      	str	r2, [r7, #4]
 8003fc8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d003      	beq.n	8003fdc <HAL_DMA_Start_IT+0x20>
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fda:	d304      	bcc.n	8003fe6 <HAL_DMA_Start_IT+0x2a>
 8003fdc:	f240 116f 	movw	r1, #367	; 0x16f
 8003fe0:	482c      	ldr	r0, [pc, #176]	; (8004094 <HAL_DMA_Start_IT+0xd8>)
 8003fe2:	f7fe f902 	bl	80021ea <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d101      	bne.n	8003ff4 <HAL_DMA_Start_IT+0x38>
 8003ff0:	2302      	movs	r3, #2
 8003ff2:	e04a      	b.n	800408a <HAL_DMA_Start_IT+0xce>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004002:	2b01      	cmp	r3, #1
 8004004:	d13a      	bne.n	800407c <HAL_DMA_Start_IT+0xc0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2202      	movs	r2, #2
 800400a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2200      	movs	r2, #0
 8004012:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f022 0201 	bic.w	r2, r2, #1
 8004022:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	68b9      	ldr	r1, [r7, #8]
 800402a:	68f8      	ldr	r0, [r7, #12]
 800402c:	f000 fb78 	bl	8004720 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004034:	2b00      	cmp	r3, #0
 8004036:	d008      	beq.n	800404a <HAL_DMA_Start_IT+0x8e>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f042 020e 	orr.w	r2, r2, #14
 8004046:	601a      	str	r2, [r3, #0]
 8004048:	e00f      	b.n	800406a <HAL_DMA_Start_IT+0xae>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f022 0204 	bic.w	r2, r2, #4
 8004058:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f042 020a 	orr.w	r2, r2, #10
 8004068:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f042 0201 	orr.w	r2, r2, #1
 8004078:	601a      	str	r2, [r3, #0]
 800407a:	e005      	b.n	8004088 <HAL_DMA_Start_IT+0xcc>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004084:	2302      	movs	r3, #2
 8004086:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8004088:	7dfb      	ldrb	r3, [r7, #23]
}
 800408a:	4618      	mov	r0, r3
 800408c:	3718      	adds	r7, #24
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	0800bfb8 	.word	0x0800bfb8

08004098 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040a0:	2300      	movs	r3, #0
 80040a2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d005      	beq.n	80040ba <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2204      	movs	r2, #4
 80040b2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	73fb      	strb	r3, [r7, #15]
 80040b8:	e0d6      	b.n	8004268 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f022 020e 	bic.w	r2, r2, #14
 80040c8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f022 0201 	bic.w	r2, r2, #1
 80040d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	461a      	mov	r2, r3
 80040e0:	4b64      	ldr	r3, [pc, #400]	; (8004274 <HAL_DMA_Abort_IT+0x1dc>)
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d958      	bls.n	8004198 <HAL_DMA_Abort_IT+0x100>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a63      	ldr	r2, [pc, #396]	; (8004278 <HAL_DMA_Abort_IT+0x1e0>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d04f      	beq.n	8004190 <HAL_DMA_Abort_IT+0xf8>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a61      	ldr	r2, [pc, #388]	; (800427c <HAL_DMA_Abort_IT+0x1e4>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d048      	beq.n	800418c <HAL_DMA_Abort_IT+0xf4>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a60      	ldr	r2, [pc, #384]	; (8004280 <HAL_DMA_Abort_IT+0x1e8>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d040      	beq.n	8004186 <HAL_DMA_Abort_IT+0xee>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a5e      	ldr	r2, [pc, #376]	; (8004284 <HAL_DMA_Abort_IT+0x1ec>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d038      	beq.n	8004180 <HAL_DMA_Abort_IT+0xe8>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a5d      	ldr	r2, [pc, #372]	; (8004288 <HAL_DMA_Abort_IT+0x1f0>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d030      	beq.n	800417a <HAL_DMA_Abort_IT+0xe2>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a5b      	ldr	r2, [pc, #364]	; (800428c <HAL_DMA_Abort_IT+0x1f4>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d028      	beq.n	8004174 <HAL_DMA_Abort_IT+0xdc>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a53      	ldr	r2, [pc, #332]	; (8004274 <HAL_DMA_Abort_IT+0x1dc>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d020      	beq.n	800416e <HAL_DMA_Abort_IT+0xd6>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a57      	ldr	r2, [pc, #348]	; (8004290 <HAL_DMA_Abort_IT+0x1f8>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d019      	beq.n	800416a <HAL_DMA_Abort_IT+0xd2>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a56      	ldr	r2, [pc, #344]	; (8004294 <HAL_DMA_Abort_IT+0x1fc>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d012      	beq.n	8004166 <HAL_DMA_Abort_IT+0xce>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a54      	ldr	r2, [pc, #336]	; (8004298 <HAL_DMA_Abort_IT+0x200>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d00a      	beq.n	8004160 <HAL_DMA_Abort_IT+0xc8>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a53      	ldr	r2, [pc, #332]	; (800429c <HAL_DMA_Abort_IT+0x204>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d102      	bne.n	800415a <HAL_DMA_Abort_IT+0xc2>
 8004154:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004158:	e01b      	b.n	8004192 <HAL_DMA_Abort_IT+0xfa>
 800415a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800415e:	e018      	b.n	8004192 <HAL_DMA_Abort_IT+0xfa>
 8004160:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004164:	e015      	b.n	8004192 <HAL_DMA_Abort_IT+0xfa>
 8004166:	2310      	movs	r3, #16
 8004168:	e013      	b.n	8004192 <HAL_DMA_Abort_IT+0xfa>
 800416a:	2301      	movs	r3, #1
 800416c:	e011      	b.n	8004192 <HAL_DMA_Abort_IT+0xfa>
 800416e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004172:	e00e      	b.n	8004192 <HAL_DMA_Abort_IT+0xfa>
 8004174:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004178:	e00b      	b.n	8004192 <HAL_DMA_Abort_IT+0xfa>
 800417a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800417e:	e008      	b.n	8004192 <HAL_DMA_Abort_IT+0xfa>
 8004180:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004184:	e005      	b.n	8004192 <HAL_DMA_Abort_IT+0xfa>
 8004186:	f44f 7380 	mov.w	r3, #256	; 0x100
 800418a:	e002      	b.n	8004192 <HAL_DMA_Abort_IT+0xfa>
 800418c:	2310      	movs	r3, #16
 800418e:	e000      	b.n	8004192 <HAL_DMA_Abort_IT+0xfa>
 8004190:	2301      	movs	r3, #1
 8004192:	4a43      	ldr	r2, [pc, #268]	; (80042a0 <HAL_DMA_Abort_IT+0x208>)
 8004194:	6053      	str	r3, [r2, #4]
 8004196:	e057      	b.n	8004248 <HAL_DMA_Abort_IT+0x1b0>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a36      	ldr	r2, [pc, #216]	; (8004278 <HAL_DMA_Abort_IT+0x1e0>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d04f      	beq.n	8004242 <HAL_DMA_Abort_IT+0x1aa>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a35      	ldr	r2, [pc, #212]	; (800427c <HAL_DMA_Abort_IT+0x1e4>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d048      	beq.n	800423e <HAL_DMA_Abort_IT+0x1a6>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a33      	ldr	r2, [pc, #204]	; (8004280 <HAL_DMA_Abort_IT+0x1e8>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d040      	beq.n	8004238 <HAL_DMA_Abort_IT+0x1a0>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a32      	ldr	r2, [pc, #200]	; (8004284 <HAL_DMA_Abort_IT+0x1ec>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d038      	beq.n	8004232 <HAL_DMA_Abort_IT+0x19a>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a30      	ldr	r2, [pc, #192]	; (8004288 <HAL_DMA_Abort_IT+0x1f0>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d030      	beq.n	800422c <HAL_DMA_Abort_IT+0x194>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a2f      	ldr	r2, [pc, #188]	; (800428c <HAL_DMA_Abort_IT+0x1f4>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d028      	beq.n	8004226 <HAL_DMA_Abort_IT+0x18e>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a26      	ldr	r2, [pc, #152]	; (8004274 <HAL_DMA_Abort_IT+0x1dc>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d020      	beq.n	8004220 <HAL_DMA_Abort_IT+0x188>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a2b      	ldr	r2, [pc, #172]	; (8004290 <HAL_DMA_Abort_IT+0x1f8>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d019      	beq.n	800421c <HAL_DMA_Abort_IT+0x184>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a29      	ldr	r2, [pc, #164]	; (8004294 <HAL_DMA_Abort_IT+0x1fc>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d012      	beq.n	8004218 <HAL_DMA_Abort_IT+0x180>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a28      	ldr	r2, [pc, #160]	; (8004298 <HAL_DMA_Abort_IT+0x200>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d00a      	beq.n	8004212 <HAL_DMA_Abort_IT+0x17a>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a26      	ldr	r2, [pc, #152]	; (800429c <HAL_DMA_Abort_IT+0x204>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d102      	bne.n	800420c <HAL_DMA_Abort_IT+0x174>
 8004206:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800420a:	e01b      	b.n	8004244 <HAL_DMA_Abort_IT+0x1ac>
 800420c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004210:	e018      	b.n	8004244 <HAL_DMA_Abort_IT+0x1ac>
 8004212:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004216:	e015      	b.n	8004244 <HAL_DMA_Abort_IT+0x1ac>
 8004218:	2310      	movs	r3, #16
 800421a:	e013      	b.n	8004244 <HAL_DMA_Abort_IT+0x1ac>
 800421c:	2301      	movs	r3, #1
 800421e:	e011      	b.n	8004244 <HAL_DMA_Abort_IT+0x1ac>
 8004220:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004224:	e00e      	b.n	8004244 <HAL_DMA_Abort_IT+0x1ac>
 8004226:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800422a:	e00b      	b.n	8004244 <HAL_DMA_Abort_IT+0x1ac>
 800422c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004230:	e008      	b.n	8004244 <HAL_DMA_Abort_IT+0x1ac>
 8004232:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004236:	e005      	b.n	8004244 <HAL_DMA_Abort_IT+0x1ac>
 8004238:	f44f 7380 	mov.w	r3, #256	; 0x100
 800423c:	e002      	b.n	8004244 <HAL_DMA_Abort_IT+0x1ac>
 800423e:	2310      	movs	r3, #16
 8004240:	e000      	b.n	8004244 <HAL_DMA_Abort_IT+0x1ac>
 8004242:	2301      	movs	r3, #1
 8004244:	4a17      	ldr	r2, [pc, #92]	; (80042a4 <HAL_DMA_Abort_IT+0x20c>)
 8004246:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800425c:	2b00      	cmp	r3, #0
 800425e:	d003      	beq.n	8004268 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	4798      	blx	r3
    } 
  }
  return status;
 8004268:	7bfb      	ldrb	r3, [r7, #15]
}
 800426a:	4618      	mov	r0, r3
 800426c:	3710      	adds	r7, #16
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	40020080 	.word	0x40020080
 8004278:	40020008 	.word	0x40020008
 800427c:	4002001c 	.word	0x4002001c
 8004280:	40020030 	.word	0x40020030
 8004284:	40020044 	.word	0x40020044
 8004288:	40020058 	.word	0x40020058
 800428c:	4002006c 	.word	0x4002006c
 8004290:	40020408 	.word	0x40020408
 8004294:	4002041c 	.word	0x4002041c
 8004298:	40020430 	.word	0x40020430
 800429c:	40020444 	.word	0x40020444
 80042a0:	40020400 	.word	0x40020400
 80042a4:	40020000 	.word	0x40020000

080042a8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c4:	2204      	movs	r2, #4
 80042c6:	409a      	lsls	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	4013      	ands	r3, r2
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	f000 80d6 	beq.w	800447e <HAL_DMA_IRQHandler+0x1d6>
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	f003 0304 	and.w	r3, r3, #4
 80042d8:	2b00      	cmp	r3, #0
 80042da:	f000 80d0 	beq.w	800447e <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0320 	and.w	r3, r3, #32
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d107      	bne.n	80042fc <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f022 0204 	bic.w	r2, r2, #4
 80042fa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	461a      	mov	r2, r3
 8004302:	4b9b      	ldr	r3, [pc, #620]	; (8004570 <HAL_DMA_IRQHandler+0x2c8>)
 8004304:	429a      	cmp	r2, r3
 8004306:	d958      	bls.n	80043ba <HAL_DMA_IRQHandler+0x112>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a99      	ldr	r2, [pc, #612]	; (8004574 <HAL_DMA_IRQHandler+0x2cc>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d04f      	beq.n	80043b2 <HAL_DMA_IRQHandler+0x10a>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a98      	ldr	r2, [pc, #608]	; (8004578 <HAL_DMA_IRQHandler+0x2d0>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d048      	beq.n	80043ae <HAL_DMA_IRQHandler+0x106>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a96      	ldr	r2, [pc, #600]	; (800457c <HAL_DMA_IRQHandler+0x2d4>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d040      	beq.n	80043a8 <HAL_DMA_IRQHandler+0x100>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a95      	ldr	r2, [pc, #596]	; (8004580 <HAL_DMA_IRQHandler+0x2d8>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d038      	beq.n	80043a2 <HAL_DMA_IRQHandler+0xfa>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a93      	ldr	r2, [pc, #588]	; (8004584 <HAL_DMA_IRQHandler+0x2dc>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d030      	beq.n	800439c <HAL_DMA_IRQHandler+0xf4>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a92      	ldr	r2, [pc, #584]	; (8004588 <HAL_DMA_IRQHandler+0x2e0>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d028      	beq.n	8004396 <HAL_DMA_IRQHandler+0xee>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a89      	ldr	r2, [pc, #548]	; (8004570 <HAL_DMA_IRQHandler+0x2c8>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d020      	beq.n	8004390 <HAL_DMA_IRQHandler+0xe8>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a8e      	ldr	r2, [pc, #568]	; (800458c <HAL_DMA_IRQHandler+0x2e4>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d019      	beq.n	800438c <HAL_DMA_IRQHandler+0xe4>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a8c      	ldr	r2, [pc, #560]	; (8004590 <HAL_DMA_IRQHandler+0x2e8>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d012      	beq.n	8004388 <HAL_DMA_IRQHandler+0xe0>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a8b      	ldr	r2, [pc, #556]	; (8004594 <HAL_DMA_IRQHandler+0x2ec>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d00a      	beq.n	8004382 <HAL_DMA_IRQHandler+0xda>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a89      	ldr	r2, [pc, #548]	; (8004598 <HAL_DMA_IRQHandler+0x2f0>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d102      	bne.n	800437c <HAL_DMA_IRQHandler+0xd4>
 8004376:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800437a:	e01b      	b.n	80043b4 <HAL_DMA_IRQHandler+0x10c>
 800437c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004380:	e018      	b.n	80043b4 <HAL_DMA_IRQHandler+0x10c>
 8004382:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004386:	e015      	b.n	80043b4 <HAL_DMA_IRQHandler+0x10c>
 8004388:	2340      	movs	r3, #64	; 0x40
 800438a:	e013      	b.n	80043b4 <HAL_DMA_IRQHandler+0x10c>
 800438c:	2304      	movs	r3, #4
 800438e:	e011      	b.n	80043b4 <HAL_DMA_IRQHandler+0x10c>
 8004390:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004394:	e00e      	b.n	80043b4 <HAL_DMA_IRQHandler+0x10c>
 8004396:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800439a:	e00b      	b.n	80043b4 <HAL_DMA_IRQHandler+0x10c>
 800439c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80043a0:	e008      	b.n	80043b4 <HAL_DMA_IRQHandler+0x10c>
 80043a2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80043a6:	e005      	b.n	80043b4 <HAL_DMA_IRQHandler+0x10c>
 80043a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043ac:	e002      	b.n	80043b4 <HAL_DMA_IRQHandler+0x10c>
 80043ae:	2340      	movs	r3, #64	; 0x40
 80043b0:	e000      	b.n	80043b4 <HAL_DMA_IRQHandler+0x10c>
 80043b2:	2304      	movs	r3, #4
 80043b4:	4a79      	ldr	r2, [pc, #484]	; (800459c <HAL_DMA_IRQHandler+0x2f4>)
 80043b6:	6053      	str	r3, [r2, #4]
 80043b8:	e057      	b.n	800446a <HAL_DMA_IRQHandler+0x1c2>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a6d      	ldr	r2, [pc, #436]	; (8004574 <HAL_DMA_IRQHandler+0x2cc>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d04f      	beq.n	8004464 <HAL_DMA_IRQHandler+0x1bc>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a6b      	ldr	r2, [pc, #428]	; (8004578 <HAL_DMA_IRQHandler+0x2d0>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d048      	beq.n	8004460 <HAL_DMA_IRQHandler+0x1b8>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a6a      	ldr	r2, [pc, #424]	; (800457c <HAL_DMA_IRQHandler+0x2d4>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d040      	beq.n	800445a <HAL_DMA_IRQHandler+0x1b2>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a68      	ldr	r2, [pc, #416]	; (8004580 <HAL_DMA_IRQHandler+0x2d8>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d038      	beq.n	8004454 <HAL_DMA_IRQHandler+0x1ac>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a67      	ldr	r2, [pc, #412]	; (8004584 <HAL_DMA_IRQHandler+0x2dc>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d030      	beq.n	800444e <HAL_DMA_IRQHandler+0x1a6>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a65      	ldr	r2, [pc, #404]	; (8004588 <HAL_DMA_IRQHandler+0x2e0>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d028      	beq.n	8004448 <HAL_DMA_IRQHandler+0x1a0>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a5d      	ldr	r2, [pc, #372]	; (8004570 <HAL_DMA_IRQHandler+0x2c8>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d020      	beq.n	8004442 <HAL_DMA_IRQHandler+0x19a>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a61      	ldr	r2, [pc, #388]	; (800458c <HAL_DMA_IRQHandler+0x2e4>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d019      	beq.n	800443e <HAL_DMA_IRQHandler+0x196>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a60      	ldr	r2, [pc, #384]	; (8004590 <HAL_DMA_IRQHandler+0x2e8>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d012      	beq.n	800443a <HAL_DMA_IRQHandler+0x192>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a5e      	ldr	r2, [pc, #376]	; (8004594 <HAL_DMA_IRQHandler+0x2ec>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d00a      	beq.n	8004434 <HAL_DMA_IRQHandler+0x18c>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a5d      	ldr	r2, [pc, #372]	; (8004598 <HAL_DMA_IRQHandler+0x2f0>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d102      	bne.n	800442e <HAL_DMA_IRQHandler+0x186>
 8004428:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800442c:	e01b      	b.n	8004466 <HAL_DMA_IRQHandler+0x1be>
 800442e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004432:	e018      	b.n	8004466 <HAL_DMA_IRQHandler+0x1be>
 8004434:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004438:	e015      	b.n	8004466 <HAL_DMA_IRQHandler+0x1be>
 800443a:	2340      	movs	r3, #64	; 0x40
 800443c:	e013      	b.n	8004466 <HAL_DMA_IRQHandler+0x1be>
 800443e:	2304      	movs	r3, #4
 8004440:	e011      	b.n	8004466 <HAL_DMA_IRQHandler+0x1be>
 8004442:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004446:	e00e      	b.n	8004466 <HAL_DMA_IRQHandler+0x1be>
 8004448:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800444c:	e00b      	b.n	8004466 <HAL_DMA_IRQHandler+0x1be>
 800444e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004452:	e008      	b.n	8004466 <HAL_DMA_IRQHandler+0x1be>
 8004454:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004458:	e005      	b.n	8004466 <HAL_DMA_IRQHandler+0x1be>
 800445a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800445e:	e002      	b.n	8004466 <HAL_DMA_IRQHandler+0x1be>
 8004460:	2340      	movs	r3, #64	; 0x40
 8004462:	e000      	b.n	8004466 <HAL_DMA_IRQHandler+0x1be>
 8004464:	2304      	movs	r3, #4
 8004466:	4a4e      	ldr	r2, [pc, #312]	; (80045a0 <HAL_DMA_IRQHandler+0x2f8>)
 8004468:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800446e:	2b00      	cmp	r3, #0
 8004470:	f000 8136 	beq.w	80046e0 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800447c:	e130      	b.n	80046e0 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004482:	2202      	movs	r2, #2
 8004484:	409a      	lsls	r2, r3
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	4013      	ands	r3, r2
 800448a:	2b00      	cmp	r3, #0
 800448c:	f000 80f8 	beq.w	8004680 <HAL_DMA_IRQHandler+0x3d8>
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	f003 0302 	and.w	r3, r3, #2
 8004496:	2b00      	cmp	r3, #0
 8004498:	f000 80f2 	beq.w	8004680 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0320 	and.w	r3, r3, #32
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d10b      	bne.n	80044c2 <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f022 020a 	bic.w	r2, r2, #10
 80044b8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2201      	movs	r2, #1
 80044be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	461a      	mov	r2, r3
 80044c8:	4b29      	ldr	r3, [pc, #164]	; (8004570 <HAL_DMA_IRQHandler+0x2c8>)
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d973      	bls.n	80045b6 <HAL_DMA_IRQHandler+0x30e>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a28      	ldr	r2, [pc, #160]	; (8004574 <HAL_DMA_IRQHandler+0x2cc>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d06a      	beq.n	80045ae <HAL_DMA_IRQHandler+0x306>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a26      	ldr	r2, [pc, #152]	; (8004578 <HAL_DMA_IRQHandler+0x2d0>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d063      	beq.n	80045aa <HAL_DMA_IRQHandler+0x302>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a25      	ldr	r2, [pc, #148]	; (800457c <HAL_DMA_IRQHandler+0x2d4>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d05b      	beq.n	80045a4 <HAL_DMA_IRQHandler+0x2fc>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a23      	ldr	r2, [pc, #140]	; (8004580 <HAL_DMA_IRQHandler+0x2d8>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d038      	beq.n	8004568 <HAL_DMA_IRQHandler+0x2c0>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a22      	ldr	r2, [pc, #136]	; (8004584 <HAL_DMA_IRQHandler+0x2dc>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d030      	beq.n	8004562 <HAL_DMA_IRQHandler+0x2ba>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a20      	ldr	r2, [pc, #128]	; (8004588 <HAL_DMA_IRQHandler+0x2e0>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d028      	beq.n	800455c <HAL_DMA_IRQHandler+0x2b4>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a18      	ldr	r2, [pc, #96]	; (8004570 <HAL_DMA_IRQHandler+0x2c8>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d020      	beq.n	8004556 <HAL_DMA_IRQHandler+0x2ae>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a1c      	ldr	r2, [pc, #112]	; (800458c <HAL_DMA_IRQHandler+0x2e4>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d019      	beq.n	8004552 <HAL_DMA_IRQHandler+0x2aa>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a1b      	ldr	r2, [pc, #108]	; (8004590 <HAL_DMA_IRQHandler+0x2e8>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d012      	beq.n	800454e <HAL_DMA_IRQHandler+0x2a6>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a19      	ldr	r2, [pc, #100]	; (8004594 <HAL_DMA_IRQHandler+0x2ec>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d00a      	beq.n	8004548 <HAL_DMA_IRQHandler+0x2a0>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a18      	ldr	r2, [pc, #96]	; (8004598 <HAL_DMA_IRQHandler+0x2f0>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d102      	bne.n	8004542 <HAL_DMA_IRQHandler+0x29a>
 800453c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004540:	e036      	b.n	80045b0 <HAL_DMA_IRQHandler+0x308>
 8004542:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004546:	e033      	b.n	80045b0 <HAL_DMA_IRQHandler+0x308>
 8004548:	f44f 7300 	mov.w	r3, #512	; 0x200
 800454c:	e030      	b.n	80045b0 <HAL_DMA_IRQHandler+0x308>
 800454e:	2320      	movs	r3, #32
 8004550:	e02e      	b.n	80045b0 <HAL_DMA_IRQHandler+0x308>
 8004552:	2302      	movs	r3, #2
 8004554:	e02c      	b.n	80045b0 <HAL_DMA_IRQHandler+0x308>
 8004556:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800455a:	e029      	b.n	80045b0 <HAL_DMA_IRQHandler+0x308>
 800455c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004560:	e026      	b.n	80045b0 <HAL_DMA_IRQHandler+0x308>
 8004562:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004566:	e023      	b.n	80045b0 <HAL_DMA_IRQHandler+0x308>
 8004568:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800456c:	e020      	b.n	80045b0 <HAL_DMA_IRQHandler+0x308>
 800456e:	bf00      	nop
 8004570:	40020080 	.word	0x40020080
 8004574:	40020008 	.word	0x40020008
 8004578:	4002001c 	.word	0x4002001c
 800457c:	40020030 	.word	0x40020030
 8004580:	40020044 	.word	0x40020044
 8004584:	40020058 	.word	0x40020058
 8004588:	4002006c 	.word	0x4002006c
 800458c:	40020408 	.word	0x40020408
 8004590:	4002041c 	.word	0x4002041c
 8004594:	40020430 	.word	0x40020430
 8004598:	40020444 	.word	0x40020444
 800459c:	40020400 	.word	0x40020400
 80045a0:	40020000 	.word	0x40020000
 80045a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045a8:	e002      	b.n	80045b0 <HAL_DMA_IRQHandler+0x308>
 80045aa:	2320      	movs	r3, #32
 80045ac:	e000      	b.n	80045b0 <HAL_DMA_IRQHandler+0x308>
 80045ae:	2302      	movs	r3, #2
 80045b0:	4a4e      	ldr	r2, [pc, #312]	; (80046ec <HAL_DMA_IRQHandler+0x444>)
 80045b2:	6053      	str	r3, [r2, #4]
 80045b4:	e057      	b.n	8004666 <HAL_DMA_IRQHandler+0x3be>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a4d      	ldr	r2, [pc, #308]	; (80046f0 <HAL_DMA_IRQHandler+0x448>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d04f      	beq.n	8004660 <HAL_DMA_IRQHandler+0x3b8>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a4b      	ldr	r2, [pc, #300]	; (80046f4 <HAL_DMA_IRQHandler+0x44c>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d048      	beq.n	800465c <HAL_DMA_IRQHandler+0x3b4>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a4a      	ldr	r2, [pc, #296]	; (80046f8 <HAL_DMA_IRQHandler+0x450>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d040      	beq.n	8004656 <HAL_DMA_IRQHandler+0x3ae>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a48      	ldr	r2, [pc, #288]	; (80046fc <HAL_DMA_IRQHandler+0x454>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d038      	beq.n	8004650 <HAL_DMA_IRQHandler+0x3a8>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a47      	ldr	r2, [pc, #284]	; (8004700 <HAL_DMA_IRQHandler+0x458>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d030      	beq.n	800464a <HAL_DMA_IRQHandler+0x3a2>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a45      	ldr	r2, [pc, #276]	; (8004704 <HAL_DMA_IRQHandler+0x45c>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d028      	beq.n	8004644 <HAL_DMA_IRQHandler+0x39c>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a44      	ldr	r2, [pc, #272]	; (8004708 <HAL_DMA_IRQHandler+0x460>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d020      	beq.n	800463e <HAL_DMA_IRQHandler+0x396>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a42      	ldr	r2, [pc, #264]	; (800470c <HAL_DMA_IRQHandler+0x464>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d019      	beq.n	800463a <HAL_DMA_IRQHandler+0x392>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a41      	ldr	r2, [pc, #260]	; (8004710 <HAL_DMA_IRQHandler+0x468>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d012      	beq.n	8004636 <HAL_DMA_IRQHandler+0x38e>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a3f      	ldr	r2, [pc, #252]	; (8004714 <HAL_DMA_IRQHandler+0x46c>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d00a      	beq.n	8004630 <HAL_DMA_IRQHandler+0x388>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a3e      	ldr	r2, [pc, #248]	; (8004718 <HAL_DMA_IRQHandler+0x470>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d102      	bne.n	800462a <HAL_DMA_IRQHandler+0x382>
 8004624:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004628:	e01b      	b.n	8004662 <HAL_DMA_IRQHandler+0x3ba>
 800462a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800462e:	e018      	b.n	8004662 <HAL_DMA_IRQHandler+0x3ba>
 8004630:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004634:	e015      	b.n	8004662 <HAL_DMA_IRQHandler+0x3ba>
 8004636:	2320      	movs	r3, #32
 8004638:	e013      	b.n	8004662 <HAL_DMA_IRQHandler+0x3ba>
 800463a:	2302      	movs	r3, #2
 800463c:	e011      	b.n	8004662 <HAL_DMA_IRQHandler+0x3ba>
 800463e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004642:	e00e      	b.n	8004662 <HAL_DMA_IRQHandler+0x3ba>
 8004644:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004648:	e00b      	b.n	8004662 <HAL_DMA_IRQHandler+0x3ba>
 800464a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800464e:	e008      	b.n	8004662 <HAL_DMA_IRQHandler+0x3ba>
 8004650:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004654:	e005      	b.n	8004662 <HAL_DMA_IRQHandler+0x3ba>
 8004656:	f44f 7300 	mov.w	r3, #512	; 0x200
 800465a:	e002      	b.n	8004662 <HAL_DMA_IRQHandler+0x3ba>
 800465c:	2320      	movs	r3, #32
 800465e:	e000      	b.n	8004662 <HAL_DMA_IRQHandler+0x3ba>
 8004660:	2302      	movs	r3, #2
 8004662:	4a2e      	ldr	r2, [pc, #184]	; (800471c <HAL_DMA_IRQHandler+0x474>)
 8004664:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004672:	2b00      	cmp	r3, #0
 8004674:	d034      	beq.n	80046e0 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800467e:	e02f      	b.n	80046e0 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004684:	2208      	movs	r2, #8
 8004686:	409a      	lsls	r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	4013      	ands	r3, r2
 800468c:	2b00      	cmp	r3, #0
 800468e:	d028      	beq.n	80046e2 <HAL_DMA_IRQHandler+0x43a>
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	f003 0308 	and.w	r3, r3, #8
 8004696:	2b00      	cmp	r3, #0
 8004698:	d023      	beq.n	80046e2 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f022 020e 	bic.w	r2, r2, #14
 80046a8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046b2:	2101      	movs	r1, #1
 80046b4:	fa01 f202 	lsl.w	r2, r1, r2
 80046b8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2201      	movs	r2, #1
 80046be:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d004      	beq.n	80046e2 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	4798      	blx	r3
    }
  }
  return;
 80046e0:	bf00      	nop
 80046e2:	bf00      	nop
}
 80046e4:	3710      	adds	r7, #16
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	40020400 	.word	0x40020400
 80046f0:	40020008 	.word	0x40020008
 80046f4:	4002001c 	.word	0x4002001c
 80046f8:	40020030 	.word	0x40020030
 80046fc:	40020044 	.word	0x40020044
 8004700:	40020058 	.word	0x40020058
 8004704:	4002006c 	.word	0x4002006c
 8004708:	40020080 	.word	0x40020080
 800470c:	40020408 	.word	0x40020408
 8004710:	4002041c 	.word	0x4002041c
 8004714:	40020430 	.word	0x40020430
 8004718:	40020444 	.word	0x40020444
 800471c:	40020000 	.word	0x40020000

08004720 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004720:	b480      	push	{r7}
 8004722:	b085      	sub	sp, #20
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	607a      	str	r2, [r7, #4]
 800472c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004736:	2101      	movs	r1, #1
 8004738:	fa01 f202 	lsl.w	r2, r1, r2
 800473c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	683a      	ldr	r2, [r7, #0]
 8004744:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	2b10      	cmp	r3, #16
 800474c:	d108      	bne.n	8004760 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68ba      	ldr	r2, [r7, #8]
 800475c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800475e:	e007      	b.n	8004770 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68ba      	ldr	r2, [r7, #8]
 8004766:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	60da      	str	r2, [r3, #12]
}
 8004770:	bf00      	nop
 8004772:	3714      	adds	r7, #20
 8004774:	46bd      	mov	sp, r7
 8004776:	bc80      	pop	{r7}
 8004778:	4770      	bx	lr
	...

0800477c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b08a      	sub	sp, #40	; 0x28
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004786:	2300      	movs	r3, #0
 8004788:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800478a:	2300      	movs	r3, #0
 800478c:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4aa9      	ldr	r2, [pc, #676]	; (8004a38 <HAL_GPIO_Init+0x2bc>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d01b      	beq.n	80047ce <HAL_GPIO_Init+0x52>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4aa8      	ldr	r2, [pc, #672]	; (8004a3c <HAL_GPIO_Init+0x2c0>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d017      	beq.n	80047ce <HAL_GPIO_Init+0x52>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4aa7      	ldr	r2, [pc, #668]	; (8004a40 <HAL_GPIO_Init+0x2c4>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d013      	beq.n	80047ce <HAL_GPIO_Init+0x52>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4aa6      	ldr	r2, [pc, #664]	; (8004a44 <HAL_GPIO_Init+0x2c8>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d00f      	beq.n	80047ce <HAL_GPIO_Init+0x52>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4aa5      	ldr	r2, [pc, #660]	; (8004a48 <HAL_GPIO_Init+0x2cc>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d00b      	beq.n	80047ce <HAL_GPIO_Init+0x52>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4aa4      	ldr	r2, [pc, #656]	; (8004a4c <HAL_GPIO_Init+0x2d0>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d007      	beq.n	80047ce <HAL_GPIO_Init+0x52>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4aa3      	ldr	r2, [pc, #652]	; (8004a50 <HAL_GPIO_Init+0x2d4>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d003      	beq.n	80047ce <HAL_GPIO_Init+0x52>
 80047c6:	21bd      	movs	r1, #189	; 0xbd
 80047c8:	48a2      	ldr	r0, [pc, #648]	; (8004a54 <HAL_GPIO_Init+0x2d8>)
 80047ca:	f7fd fd0e 	bl	80021ea <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d005      	beq.n	80047e4 <HAL_GPIO_Init+0x68>
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	0c1b      	lsrs	r3, r3, #16
 80047de:	041b      	lsls	r3, r3, #16
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d003      	beq.n	80047ec <HAL_GPIO_Init+0x70>
 80047e4:	21be      	movs	r1, #190	; 0xbe
 80047e6:	489b      	ldr	r0, [pc, #620]	; (8004a54 <HAL_GPIO_Init+0x2d8>)
 80047e8:	f7fd fcff 	bl	80021ea <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	f000 8235 	beq.w	8004c60 <HAL_GPIO_Init+0x4e4>
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	f000 8230 	beq.w	8004c60 <HAL_GPIO_Init+0x4e4>
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	2b11      	cmp	r3, #17
 8004806:	f000 822b 	beq.w	8004c60 <HAL_GPIO_Init+0x4e4>
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	2b02      	cmp	r3, #2
 8004810:	f000 8226 	beq.w	8004c60 <HAL_GPIO_Init+0x4e4>
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	2b12      	cmp	r3, #18
 800481a:	f000 8221 	beq.w	8004c60 <HAL_GPIO_Init+0x4e4>
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	4a8d      	ldr	r2, [pc, #564]	; (8004a58 <HAL_GPIO_Init+0x2dc>)
 8004824:	4293      	cmp	r3, r2
 8004826:	f000 821b 	beq.w	8004c60 <HAL_GPIO_Init+0x4e4>
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	4a8b      	ldr	r2, [pc, #556]	; (8004a5c <HAL_GPIO_Init+0x2e0>)
 8004830:	4293      	cmp	r3, r2
 8004832:	f000 8215 	beq.w	8004c60 <HAL_GPIO_Init+0x4e4>
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	4a89      	ldr	r2, [pc, #548]	; (8004a60 <HAL_GPIO_Init+0x2e4>)
 800483c:	4293      	cmp	r3, r2
 800483e:	f000 820f 	beq.w	8004c60 <HAL_GPIO_Init+0x4e4>
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	4a87      	ldr	r2, [pc, #540]	; (8004a64 <HAL_GPIO_Init+0x2e8>)
 8004848:	4293      	cmp	r3, r2
 800484a:	f000 8209 	beq.w	8004c60 <HAL_GPIO_Init+0x4e4>
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	4a85      	ldr	r2, [pc, #532]	; (8004a68 <HAL_GPIO_Init+0x2ec>)
 8004854:	4293      	cmp	r3, r2
 8004856:	f000 8203 	beq.w	8004c60 <HAL_GPIO_Init+0x4e4>
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	4a83      	ldr	r2, [pc, #524]	; (8004a6c <HAL_GPIO_Init+0x2f0>)
 8004860:	4293      	cmp	r3, r2
 8004862:	f000 81fd 	beq.w	8004c60 <HAL_GPIO_Init+0x4e4>
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	2b03      	cmp	r3, #3
 800486c:	f000 81f8 	beq.w	8004c60 <HAL_GPIO_Init+0x4e4>
 8004870:	21bf      	movs	r1, #191	; 0xbf
 8004872:	4878      	ldr	r0, [pc, #480]	; (8004a54 <HAL_GPIO_Init+0x2d8>)
 8004874:	f7fd fcb9 	bl	80021ea <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004878:	e1f2      	b.n	8004c60 <HAL_GPIO_Init+0x4e4>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800487a:	2201      	movs	r2, #1
 800487c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487e:	fa02 f303 	lsl.w	r3, r2, r3
 8004882:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	69fa      	ldr	r2, [r7, #28]
 800488a:	4013      	ands	r3, r2
 800488c:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800488e:	69ba      	ldr	r2, [r7, #24]
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	429a      	cmp	r2, r3
 8004894:	f040 81e1 	bne.w	8004c5a <HAL_GPIO_Init+0x4de>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	4a67      	ldr	r2, [pc, #412]	; (8004a38 <HAL_GPIO_Init+0x2bc>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d01b      	beq.n	80048d8 <HAL_GPIO_Init+0x15c>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a66      	ldr	r2, [pc, #408]	; (8004a3c <HAL_GPIO_Init+0x2c0>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d017      	beq.n	80048d8 <HAL_GPIO_Init+0x15c>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a65      	ldr	r2, [pc, #404]	; (8004a40 <HAL_GPIO_Init+0x2c4>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d013      	beq.n	80048d8 <HAL_GPIO_Init+0x15c>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a64      	ldr	r2, [pc, #400]	; (8004a44 <HAL_GPIO_Init+0x2c8>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d00f      	beq.n	80048d8 <HAL_GPIO_Init+0x15c>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a63      	ldr	r2, [pc, #396]	; (8004a48 <HAL_GPIO_Init+0x2cc>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d00b      	beq.n	80048d8 <HAL_GPIO_Init+0x15c>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4a62      	ldr	r2, [pc, #392]	; (8004a4c <HAL_GPIO_Init+0x2d0>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d007      	beq.n	80048d8 <HAL_GPIO_Init+0x15c>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4a61      	ldr	r2, [pc, #388]	; (8004a50 <HAL_GPIO_Init+0x2d4>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d003      	beq.n	80048d8 <HAL_GPIO_Init+0x15c>
 80048d0:	21cd      	movs	r1, #205	; 0xcd
 80048d2:	4860      	ldr	r0, [pc, #384]	; (8004a54 <HAL_GPIO_Init+0x2d8>)
 80048d4:	f7fd fc89 	bl	80021ea <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	4a63      	ldr	r2, [pc, #396]	; (8004a6c <HAL_GPIO_Init+0x2f0>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	f000 80c6 	beq.w	8004a70 <HAL_GPIO_Init+0x2f4>
 80048e4:	4a61      	ldr	r2, [pc, #388]	; (8004a6c <HAL_GPIO_Init+0x2f0>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	f200 80ec 	bhi.w	8004ac4 <HAL_GPIO_Init+0x348>
 80048ec:	4a5c      	ldr	r2, [pc, #368]	; (8004a60 <HAL_GPIO_Init+0x2e4>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	f000 80be 	beq.w	8004a70 <HAL_GPIO_Init+0x2f4>
 80048f4:	4a5a      	ldr	r2, [pc, #360]	; (8004a60 <HAL_GPIO_Init+0x2e4>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	f200 80e4 	bhi.w	8004ac4 <HAL_GPIO_Init+0x348>
 80048fc:	4a5a      	ldr	r2, [pc, #360]	; (8004a68 <HAL_GPIO_Init+0x2ec>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	f000 80b6 	beq.w	8004a70 <HAL_GPIO_Init+0x2f4>
 8004904:	4a58      	ldr	r2, [pc, #352]	; (8004a68 <HAL_GPIO_Init+0x2ec>)
 8004906:	4293      	cmp	r3, r2
 8004908:	f200 80dc 	bhi.w	8004ac4 <HAL_GPIO_Init+0x348>
 800490c:	4a53      	ldr	r2, [pc, #332]	; (8004a5c <HAL_GPIO_Init+0x2e0>)
 800490e:	4293      	cmp	r3, r2
 8004910:	f000 80ae 	beq.w	8004a70 <HAL_GPIO_Init+0x2f4>
 8004914:	4a51      	ldr	r2, [pc, #324]	; (8004a5c <HAL_GPIO_Init+0x2e0>)
 8004916:	4293      	cmp	r3, r2
 8004918:	f200 80d4 	bhi.w	8004ac4 <HAL_GPIO_Init+0x348>
 800491c:	4a51      	ldr	r2, [pc, #324]	; (8004a64 <HAL_GPIO_Init+0x2e8>)
 800491e:	4293      	cmp	r3, r2
 8004920:	f000 80a6 	beq.w	8004a70 <HAL_GPIO_Init+0x2f4>
 8004924:	4a4f      	ldr	r2, [pc, #316]	; (8004a64 <HAL_GPIO_Init+0x2e8>)
 8004926:	4293      	cmp	r3, r2
 8004928:	f200 80cc 	bhi.w	8004ac4 <HAL_GPIO_Init+0x348>
 800492c:	2b12      	cmp	r3, #18
 800492e:	d82b      	bhi.n	8004988 <HAL_GPIO_Init+0x20c>
 8004930:	2b12      	cmp	r3, #18
 8004932:	f200 80c7 	bhi.w	8004ac4 <HAL_GPIO_Init+0x348>
 8004936:	a201      	add	r2, pc, #4	; (adr r2, 800493c <HAL_GPIO_Init+0x1c0>)
 8004938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800493c:	08004a71 	.word	0x08004a71
 8004940:	08004991 	.word	0x08004991
 8004944:	080049e3 	.word	0x080049e3
 8004948:	08004abf 	.word	0x08004abf
 800494c:	08004ac5 	.word	0x08004ac5
 8004950:	08004ac5 	.word	0x08004ac5
 8004954:	08004ac5 	.word	0x08004ac5
 8004958:	08004ac5 	.word	0x08004ac5
 800495c:	08004ac5 	.word	0x08004ac5
 8004960:	08004ac5 	.word	0x08004ac5
 8004964:	08004ac5 	.word	0x08004ac5
 8004968:	08004ac5 	.word	0x08004ac5
 800496c:	08004ac5 	.word	0x08004ac5
 8004970:	08004ac5 	.word	0x08004ac5
 8004974:	08004ac5 	.word	0x08004ac5
 8004978:	08004ac5 	.word	0x08004ac5
 800497c:	08004ac5 	.word	0x08004ac5
 8004980:	080049b9 	.word	0x080049b9
 8004984:	08004a0d 	.word	0x08004a0d
 8004988:	4a33      	ldr	r2, [pc, #204]	; (8004a58 <HAL_GPIO_Init+0x2dc>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d070      	beq.n	8004a70 <HAL_GPIO_Init+0x2f4>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800498e:	e099      	b.n	8004ac4 <HAL_GPIO_Init+0x348>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	2b02      	cmp	r3, #2
 8004996:	d00b      	beq.n	80049b0 <HAL_GPIO_Init+0x234>
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	2b01      	cmp	r3, #1
 800499e:	d007      	beq.n	80049b0 <HAL_GPIO_Init+0x234>
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	2b03      	cmp	r3, #3
 80049a6:	d003      	beq.n	80049b0 <HAL_GPIO_Init+0x234>
 80049a8:	21d5      	movs	r1, #213	; 0xd5
 80049aa:	482a      	ldr	r0, [pc, #168]	; (8004a54 <HAL_GPIO_Init+0x2d8>)
 80049ac:	f7fd fc1d 	bl	80021ea <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	623b      	str	r3, [r7, #32]
          break;
 80049b6:	e086      	b.n	8004ac6 <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d00b      	beq.n	80049d8 <HAL_GPIO_Init+0x25c>
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d007      	beq.n	80049d8 <HAL_GPIO_Init+0x25c>
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	2b03      	cmp	r3, #3
 80049ce:	d003      	beq.n	80049d8 <HAL_GPIO_Init+0x25c>
 80049d0:	21dc      	movs	r1, #220	; 0xdc
 80049d2:	4820      	ldr	r0, [pc, #128]	; (8004a54 <HAL_GPIO_Init+0x2d8>)
 80049d4:	f7fd fc09 	bl	80021ea <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	3304      	adds	r3, #4
 80049de:	623b      	str	r3, [r7, #32]
          break;
 80049e0:	e071      	b.n	8004ac6 <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	d00b      	beq.n	8004a02 <HAL_GPIO_Init+0x286>
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d007      	beq.n	8004a02 <HAL_GPIO_Init+0x286>
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	2b03      	cmp	r3, #3
 80049f8:	d003      	beq.n	8004a02 <HAL_GPIO_Init+0x286>
 80049fa:	21e3      	movs	r1, #227	; 0xe3
 80049fc:	4815      	ldr	r0, [pc, #84]	; (8004a54 <HAL_GPIO_Init+0x2d8>)
 80049fe:	f7fd fbf4 	bl	80021ea <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	3308      	adds	r3, #8
 8004a08:	623b      	str	r3, [r7, #32]
          break;
 8004a0a:	e05c      	b.n	8004ac6 <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d00b      	beq.n	8004a2c <HAL_GPIO_Init+0x2b0>
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d007      	beq.n	8004a2c <HAL_GPIO_Init+0x2b0>
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	2b03      	cmp	r3, #3
 8004a22:	d003      	beq.n	8004a2c <HAL_GPIO_Init+0x2b0>
 8004a24:	21ea      	movs	r1, #234	; 0xea
 8004a26:	480b      	ldr	r0, [pc, #44]	; (8004a54 <HAL_GPIO_Init+0x2d8>)
 8004a28:	f7fd fbdf 	bl	80021ea <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	330c      	adds	r3, #12
 8004a32:	623b      	str	r3, [r7, #32]
          break;
 8004a34:	e047      	b.n	8004ac6 <HAL_GPIO_Init+0x34a>
 8004a36:	bf00      	nop
 8004a38:	40010800 	.word	0x40010800
 8004a3c:	40010c00 	.word	0x40010c00
 8004a40:	40011000 	.word	0x40011000
 8004a44:	40011400 	.word	0x40011400
 8004a48:	40011800 	.word	0x40011800
 8004a4c:	40011c00 	.word	0x40011c00
 8004a50:	40012000 	.word	0x40012000
 8004a54:	0800bff0 	.word	0x0800bff0
 8004a58:	10110000 	.word	0x10110000
 8004a5c:	10210000 	.word	0x10210000
 8004a60:	10310000 	.word	0x10310000
 8004a64:	10120000 	.word	0x10120000
 8004a68:	10220000 	.word	0x10220000
 8004a6c:	10320000 	.word	0x10320000
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d00b      	beq.n	8004a90 <HAL_GPIO_Init+0x314>
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d007      	beq.n	8004a90 <HAL_GPIO_Init+0x314>
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d003      	beq.n	8004a90 <HAL_GPIO_Init+0x314>
 8004a88:	21f7      	movs	r1, #247	; 0xf7
 8004a8a:	487c      	ldr	r0, [pc, #496]	; (8004c7c <HAL_GPIO_Init+0x500>)
 8004a8c:	f7fd fbad 	bl	80021ea <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d102      	bne.n	8004a9e <HAL_GPIO_Init+0x322>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004a98:	2304      	movs	r3, #4
 8004a9a:	623b      	str	r3, [r7, #32]
          break;
 8004a9c:	e013      	b.n	8004ac6 <HAL_GPIO_Init+0x34a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d105      	bne.n	8004ab2 <HAL_GPIO_Init+0x336>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004aa6:	2308      	movs	r3, #8
 8004aa8:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	69fa      	ldr	r2, [r7, #28]
 8004aae:	611a      	str	r2, [r3, #16]
          break;
 8004ab0:	e009      	b.n	8004ac6 <HAL_GPIO_Init+0x34a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004ab2:	2308      	movs	r3, #8
 8004ab4:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	69fa      	ldr	r2, [r7, #28]
 8004aba:	615a      	str	r2, [r3, #20]
          break;
 8004abc:	e003      	b.n	8004ac6 <HAL_GPIO_Init+0x34a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	623b      	str	r3, [r7, #32]
          break;
 8004ac2:	e000      	b.n	8004ac6 <HAL_GPIO_Init+0x34a>
          break;
 8004ac4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	2bff      	cmp	r3, #255	; 0xff
 8004aca:	d801      	bhi.n	8004ad0 <HAL_GPIO_Init+0x354>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	e001      	b.n	8004ad4 <HAL_GPIO_Init+0x358>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	3304      	adds	r3, #4
 8004ad4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	2bff      	cmp	r3, #255	; 0xff
 8004ada:	d802      	bhi.n	8004ae2 <HAL_GPIO_Init+0x366>
 8004adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	e002      	b.n	8004ae8 <HAL_GPIO_Init+0x36c>
 8004ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae4:	3b08      	subs	r3, #8
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	210f      	movs	r1, #15
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	fa01 f303 	lsl.w	r3, r1, r3
 8004af6:	43db      	mvns	r3, r3
 8004af8:	401a      	ands	r2, r3
 8004afa:	6a39      	ldr	r1, [r7, #32]
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	fa01 f303 	lsl.w	r3, r1, r3
 8004b02:	431a      	orrs	r2, r3
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	f000 80a2 	beq.w	8004c5a <HAL_GPIO_Init+0x4de>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004b16:	4b5a      	ldr	r3, [pc, #360]	; (8004c80 <HAL_GPIO_Init+0x504>)
 8004b18:	699b      	ldr	r3, [r3, #24]
 8004b1a:	4a59      	ldr	r2, [pc, #356]	; (8004c80 <HAL_GPIO_Init+0x504>)
 8004b1c:	f043 0301 	orr.w	r3, r3, #1
 8004b20:	6193      	str	r3, [r2, #24]
 8004b22:	4b57      	ldr	r3, [pc, #348]	; (8004c80 <HAL_GPIO_Init+0x504>)
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	f003 0301 	and.w	r3, r3, #1
 8004b2a:	60bb      	str	r3, [r7, #8]
 8004b2c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004b2e:	4a55      	ldr	r2, [pc, #340]	; (8004c84 <HAL_GPIO_Init+0x508>)
 8004b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b32:	089b      	lsrs	r3, r3, #2
 8004b34:	3302      	adds	r3, #2
 8004b36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b3a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3e:	f003 0303 	and.w	r3, r3, #3
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	220f      	movs	r2, #15
 8004b46:	fa02 f303 	lsl.w	r3, r2, r3
 8004b4a:	43db      	mvns	r3, r3
 8004b4c:	68fa      	ldr	r2, [r7, #12]
 8004b4e:	4013      	ands	r3, r2
 8004b50:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a4c      	ldr	r2, [pc, #304]	; (8004c88 <HAL_GPIO_Init+0x50c>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d01f      	beq.n	8004b9a <HAL_GPIO_Init+0x41e>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a4b      	ldr	r2, [pc, #300]	; (8004c8c <HAL_GPIO_Init+0x510>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d019      	beq.n	8004b96 <HAL_GPIO_Init+0x41a>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a4a      	ldr	r2, [pc, #296]	; (8004c90 <HAL_GPIO_Init+0x514>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d013      	beq.n	8004b92 <HAL_GPIO_Init+0x416>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a49      	ldr	r2, [pc, #292]	; (8004c94 <HAL_GPIO_Init+0x518>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d00d      	beq.n	8004b8e <HAL_GPIO_Init+0x412>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a48      	ldr	r2, [pc, #288]	; (8004c98 <HAL_GPIO_Init+0x51c>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d007      	beq.n	8004b8a <HAL_GPIO_Init+0x40e>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a47      	ldr	r2, [pc, #284]	; (8004c9c <HAL_GPIO_Init+0x520>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d101      	bne.n	8004b86 <HAL_GPIO_Init+0x40a>
 8004b82:	2305      	movs	r3, #5
 8004b84:	e00a      	b.n	8004b9c <HAL_GPIO_Init+0x420>
 8004b86:	2306      	movs	r3, #6
 8004b88:	e008      	b.n	8004b9c <HAL_GPIO_Init+0x420>
 8004b8a:	2304      	movs	r3, #4
 8004b8c:	e006      	b.n	8004b9c <HAL_GPIO_Init+0x420>
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e004      	b.n	8004b9c <HAL_GPIO_Init+0x420>
 8004b92:	2302      	movs	r3, #2
 8004b94:	e002      	b.n	8004b9c <HAL_GPIO_Init+0x420>
 8004b96:	2301      	movs	r3, #1
 8004b98:	e000      	b.n	8004b9c <HAL_GPIO_Init+0x420>
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b9e:	f002 0203 	and.w	r2, r2, #3
 8004ba2:	0092      	lsls	r2, r2, #2
 8004ba4:	4093      	lsls	r3, r2
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004bac:	4935      	ldr	r1, [pc, #212]	; (8004c84 <HAL_GPIO_Init+0x508>)
 8004bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb0:	089b      	lsrs	r3, r3, #2
 8004bb2:	3302      	adds	r3, #2
 8004bb4:	68fa      	ldr	r2, [r7, #12]
 8004bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d006      	beq.n	8004bd4 <HAL_GPIO_Init+0x458>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004bc6:	4b36      	ldr	r3, [pc, #216]	; (8004ca0 <HAL_GPIO_Init+0x524>)
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	4935      	ldr	r1, [pc, #212]	; (8004ca0 <HAL_GPIO_Init+0x524>)
 8004bcc:	69bb      	ldr	r3, [r7, #24]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	600b      	str	r3, [r1, #0]
 8004bd2:	e006      	b.n	8004be2 <HAL_GPIO_Init+0x466>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004bd4:	4b32      	ldr	r3, [pc, #200]	; (8004ca0 <HAL_GPIO_Init+0x524>)
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	43db      	mvns	r3, r3
 8004bdc:	4930      	ldr	r1, [pc, #192]	; (8004ca0 <HAL_GPIO_Init+0x524>)
 8004bde:	4013      	ands	r3, r2
 8004be0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d006      	beq.n	8004bfc <HAL_GPIO_Init+0x480>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004bee:	4b2c      	ldr	r3, [pc, #176]	; (8004ca0 <HAL_GPIO_Init+0x524>)
 8004bf0:	685a      	ldr	r2, [r3, #4]
 8004bf2:	492b      	ldr	r1, [pc, #172]	; (8004ca0 <HAL_GPIO_Init+0x524>)
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	604b      	str	r3, [r1, #4]
 8004bfa:	e006      	b.n	8004c0a <HAL_GPIO_Init+0x48e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004bfc:	4b28      	ldr	r3, [pc, #160]	; (8004ca0 <HAL_GPIO_Init+0x524>)
 8004bfe:	685a      	ldr	r2, [r3, #4]
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	43db      	mvns	r3, r3
 8004c04:	4926      	ldr	r1, [pc, #152]	; (8004ca0 <HAL_GPIO_Init+0x524>)
 8004c06:	4013      	ands	r3, r2
 8004c08:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d006      	beq.n	8004c24 <HAL_GPIO_Init+0x4a8>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004c16:	4b22      	ldr	r3, [pc, #136]	; (8004ca0 <HAL_GPIO_Init+0x524>)
 8004c18:	689a      	ldr	r2, [r3, #8]
 8004c1a:	4921      	ldr	r1, [pc, #132]	; (8004ca0 <HAL_GPIO_Init+0x524>)
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	608b      	str	r3, [r1, #8]
 8004c22:	e006      	b.n	8004c32 <HAL_GPIO_Init+0x4b6>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004c24:	4b1e      	ldr	r3, [pc, #120]	; (8004ca0 <HAL_GPIO_Init+0x524>)
 8004c26:	689a      	ldr	r2, [r3, #8]
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	43db      	mvns	r3, r3
 8004c2c:	491c      	ldr	r1, [pc, #112]	; (8004ca0 <HAL_GPIO_Init+0x524>)
 8004c2e:	4013      	ands	r3, r2
 8004c30:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d006      	beq.n	8004c4c <HAL_GPIO_Init+0x4d0>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004c3e:	4b18      	ldr	r3, [pc, #96]	; (8004ca0 <HAL_GPIO_Init+0x524>)
 8004c40:	68da      	ldr	r2, [r3, #12]
 8004c42:	4917      	ldr	r1, [pc, #92]	; (8004ca0 <HAL_GPIO_Init+0x524>)
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	60cb      	str	r3, [r1, #12]
 8004c4a:	e006      	b.n	8004c5a <HAL_GPIO_Init+0x4de>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004c4c:	4b14      	ldr	r3, [pc, #80]	; (8004ca0 <HAL_GPIO_Init+0x524>)
 8004c4e:	68da      	ldr	r2, [r3, #12]
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	43db      	mvns	r3, r3
 8004c54:	4912      	ldr	r1, [pc, #72]	; (8004ca0 <HAL_GPIO_Init+0x524>)
 8004c56:	4013      	ands	r3, r2
 8004c58:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c66:	fa22 f303 	lsr.w	r3, r2, r3
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	f47f ae05 	bne.w	800487a <HAL_GPIO_Init+0xfe>
  }
}
 8004c70:	bf00      	nop
 8004c72:	bf00      	nop
 8004c74:	3728      	adds	r7, #40	; 0x28
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	0800bff0 	.word	0x0800bff0
 8004c80:	40021000 	.word	0x40021000
 8004c84:	40010000 	.word	0x40010000
 8004c88:	40010800 	.word	0x40010800
 8004c8c:	40010c00 	.word	0x40010c00
 8004c90:	40011000 	.word	0x40011000
 8004c94:	40011400 	.word	0x40011400
 8004c98:	40011800 	.word	0x40011800
 8004c9c:	40011c00 	.word	0x40011c00
 8004ca0:	40010400 	.word	0x40010400

08004ca4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	460b      	mov	r3, r1
 8004cae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8004cb0:	887b      	ldrh	r3, [r7, #2]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d004      	beq.n	8004cc0 <HAL_GPIO_ReadPin+0x1c>
 8004cb6:	887b      	ldrh	r3, [r7, #2]
 8004cb8:	0c1b      	lsrs	r3, r3, #16
 8004cba:	041b      	lsls	r3, r3, #16
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d004      	beq.n	8004cca <HAL_GPIO_ReadPin+0x26>
 8004cc0:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 8004cc4:	4809      	ldr	r0, [pc, #36]	; (8004cec <HAL_GPIO_ReadPin+0x48>)
 8004cc6:	f7fd fa90 	bl	80021ea <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	689a      	ldr	r2, [r3, #8]
 8004cce:	887b      	ldrh	r3, [r7, #2]
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d002      	beq.n	8004cdc <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	73fb      	strb	r3, [r7, #15]
 8004cda:	e001      	b.n	8004ce0 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3710      	adds	r7, #16
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	0800bff0 	.word	0x0800bff0

08004cf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b082      	sub	sp, #8
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	460b      	mov	r3, r1
 8004cfa:	807b      	strh	r3, [r7, #2]
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8004d00:	887b      	ldrh	r3, [r7, #2]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d004      	beq.n	8004d10 <HAL_GPIO_WritePin+0x20>
 8004d06:	887b      	ldrh	r3, [r7, #2]
 8004d08:	0c1b      	lsrs	r3, r3, #16
 8004d0a:	041b      	lsls	r3, r3, #16
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d004      	beq.n	8004d1a <HAL_GPIO_WritePin+0x2a>
 8004d10:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8004d14:	480e      	ldr	r0, [pc, #56]	; (8004d50 <HAL_GPIO_WritePin+0x60>)
 8004d16:	f7fd fa68 	bl	80021ea <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8004d1a:	787b      	ldrb	r3, [r7, #1]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d007      	beq.n	8004d30 <HAL_GPIO_WritePin+0x40>
 8004d20:	787b      	ldrb	r3, [r7, #1]
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d004      	beq.n	8004d30 <HAL_GPIO_WritePin+0x40>
 8004d26:	f240 11d5 	movw	r1, #469	; 0x1d5
 8004d2a:	4809      	ldr	r0, [pc, #36]	; (8004d50 <HAL_GPIO_WritePin+0x60>)
 8004d2c:	f7fd fa5d 	bl	80021ea <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8004d30:	787b      	ldrb	r3, [r7, #1]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d003      	beq.n	8004d3e <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d36:	887a      	ldrh	r2, [r7, #2]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004d3c:	e003      	b.n	8004d46 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004d3e:	887b      	ldrh	r3, [r7, #2]
 8004d40:	041a      	lsls	r2, r3, #16
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	611a      	str	r2, [r3, #16]
}
 8004d46:	bf00      	nop
 8004d48:	3708      	adds	r7, #8
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	0800bff0 	.word	0x0800bff0

08004d54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004d5e:	4b08      	ldr	r3, [pc, #32]	; (8004d80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d60:	695a      	ldr	r2, [r3, #20]
 8004d62:	88fb      	ldrh	r3, [r7, #6]
 8004d64:	4013      	ands	r3, r2
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d006      	beq.n	8004d78 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004d6a:	4a05      	ldr	r2, [pc, #20]	; (8004d80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d6c:	88fb      	ldrh	r3, [r7, #6]
 8004d6e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004d70:	88fb      	ldrh	r3, [r7, #6]
 8004d72:	4618      	mov	r0, r3
 8004d74:	f7fc fb82 	bl	800147c <HAL_GPIO_EXTI_Callback>
  }
}
 8004d78:	bf00      	nop
 8004d7a:	3708      	adds	r7, #8
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	40010400 	.word	0x40010400

08004d84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d101      	bne.n	8004d96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e1b7      	b.n	8005106 <HAL_I2C_Init+0x382>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4aa6      	ldr	r2, [pc, #664]	; (8005034 <HAL_I2C_Init+0x2b0>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d009      	beq.n	8004db4 <HAL_I2C_Init+0x30>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4aa4      	ldr	r2, [pc, #656]	; (8005038 <HAL_I2C_Init+0x2b4>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d004      	beq.n	8004db4 <HAL_I2C_Init+0x30>
 8004daa:	f240 11d1 	movw	r1, #465	; 0x1d1
 8004dae:	48a3      	ldr	r0, [pc, #652]	; (800503c <HAL_I2C_Init+0x2b8>)
 8004db0:	f7fd fa1b 	bl	80021ea <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d004      	beq.n	8004dc6 <HAL_I2C_Init+0x42>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	4a9f      	ldr	r2, [pc, #636]	; (8005040 <HAL_I2C_Init+0x2bc>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d904      	bls.n	8004dd0 <HAL_I2C_Init+0x4c>
 8004dc6:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 8004dca:	489c      	ldr	r0, [pc, #624]	; (800503c <HAL_I2C_Init+0x2b8>)
 8004dcc:	f7fd fa0d 	bl	80021ea <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d009      	beq.n	8004dec <HAL_I2C_Init+0x68>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004de0:	d004      	beq.n	8004dec <HAL_I2C_Init+0x68>
 8004de2:	f240 11d3 	movw	r1, #467	; 0x1d3
 8004de6:	4895      	ldr	r0, [pc, #596]	; (800503c <HAL_I2C_Init+0x2b8>)
 8004de8:	f7fd f9ff 	bl	80021ea <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004df4:	f023 0303 	bic.w	r3, r3, #3
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d004      	beq.n	8004e06 <HAL_I2C_Init+0x82>
 8004dfc:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8004e00:	488e      	ldr	r0, [pc, #568]	; (800503c <HAL_I2C_Init+0x2b8>)
 8004e02:	f7fd f9f2 	bl	80021ea <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e0e:	d009      	beq.n	8004e24 <HAL_I2C_Init+0xa0>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004e18:	d004      	beq.n	8004e24 <HAL_I2C_Init+0xa0>
 8004e1a:	f240 11d5 	movw	r1, #469	; 0x1d5
 8004e1e:	4887      	ldr	r0, [pc, #540]	; (800503c <HAL_I2C_Init+0x2b8>)
 8004e20:	f7fd f9e3 	bl	80021ea <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	695b      	ldr	r3, [r3, #20]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d008      	beq.n	8004e3e <HAL_I2C_Init+0xba>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	695b      	ldr	r3, [r3, #20]
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d004      	beq.n	8004e3e <HAL_I2C_Init+0xba>
 8004e34:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8004e38:	4880      	ldr	r0, [pc, #512]	; (800503c <HAL_I2C_Init+0x2b8>)
 8004e3a:	f7fd f9d6 	bl	80021ea <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	699b      	ldr	r3, [r3, #24]
 8004e42:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d004      	beq.n	8004e54 <HAL_I2C_Init+0xd0>
 8004e4a:	f240 11d7 	movw	r1, #471	; 0x1d7
 8004e4e:	487b      	ldr	r0, [pc, #492]	; (800503c <HAL_I2C_Init+0x2b8>)
 8004e50:	f7fd f9cb 	bl	80021ea <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	69db      	ldr	r3, [r3, #28]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d008      	beq.n	8004e6e <HAL_I2C_Init+0xea>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	69db      	ldr	r3, [r3, #28]
 8004e60:	2b40      	cmp	r3, #64	; 0x40
 8004e62:	d004      	beq.n	8004e6e <HAL_I2C_Init+0xea>
 8004e64:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8004e68:	4874      	ldr	r0, [pc, #464]	; (800503c <HAL_I2C_Init+0x2b8>)
 8004e6a:	f7fd f9be 	bl	80021ea <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a1b      	ldr	r3, [r3, #32]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d008      	beq.n	8004e88 <HAL_I2C_Init+0x104>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6a1b      	ldr	r3, [r3, #32]
 8004e7a:	2b80      	cmp	r3, #128	; 0x80
 8004e7c:	d004      	beq.n	8004e88 <HAL_I2C_Init+0x104>
 8004e7e:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004e82:	486e      	ldr	r0, [pc, #440]	; (800503c <HAL_I2C_Init+0x2b8>)
 8004e84:	f7fd f9b1 	bl	80021ea <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d106      	bne.n	8004ea2 <HAL_I2C_Init+0x11e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f7fc fbdb 	bl	8001658 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2224      	movs	r2, #36	; 0x24
 8004ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f022 0201 	bic.w	r2, r2, #1
 8004eb8:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ec8:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ed8:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004eda:	f001 fd57 	bl	800698c <HAL_RCC_GetPCLK1Freq>
 8004ede:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	4a57      	ldr	r2, [pc, #348]	; (8005044 <HAL_I2C_Init+0x2c0>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d807      	bhi.n	8004efa <HAL_I2C_Init+0x176>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	4a56      	ldr	r2, [pc, #344]	; (8005048 <HAL_I2C_Init+0x2c4>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	bf94      	ite	ls
 8004ef2:	2301      	movls	r3, #1
 8004ef4:	2300      	movhi	r3, #0
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	e006      	b.n	8004f08 <HAL_I2C_Init+0x184>
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	4a53      	ldr	r2, [pc, #332]	; (800504c <HAL_I2C_Init+0x2c8>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	bf94      	ite	ls
 8004f02:	2301      	movls	r3, #1
 8004f04:	2300      	movhi	r3, #0
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d001      	beq.n	8004f10 <HAL_I2C_Init+0x18c>
  {
    return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e0fa      	b.n	8005106 <HAL_I2C_Init+0x382>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	4a4f      	ldr	r2, [pc, #316]	; (8005050 <HAL_I2C_Init+0x2cc>)
 8004f14:	fba2 2303 	umull	r2, r3, r2, r3
 8004f18:	0c9b      	lsrs	r3, r3, #18
 8004f1a:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68ba      	ldr	r2, [r7, #8]
 8004f2c:	430a      	orrs	r2, r1
 8004f2e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	6a1b      	ldr	r3, [r3, #32]
 8004f36:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	4a41      	ldr	r2, [pc, #260]	; (8005044 <HAL_I2C_Init+0x2c0>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d802      	bhi.n	8004f4a <HAL_I2C_Init+0x1c6>
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	3301      	adds	r3, #1
 8004f48:	e009      	b.n	8004f5e <HAL_I2C_Init+0x1da>
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004f50:	fb02 f303 	mul.w	r3, r2, r3
 8004f54:	4a3f      	ldr	r2, [pc, #252]	; (8005054 <HAL_I2C_Init+0x2d0>)
 8004f56:	fba2 2303 	umull	r2, r3, r2, r3
 8004f5a:	099b      	lsrs	r3, r3, #6
 8004f5c:	3301      	adds	r3, #1
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	6812      	ldr	r2, [r2, #0]
 8004f62:	430b      	orrs	r3, r1
 8004f64:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	69db      	ldr	r3, [r3, #28]
 8004f6c:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004f70:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	4932      	ldr	r1, [pc, #200]	; (8005044 <HAL_I2C_Init+0x2c0>)
 8004f7a:	428b      	cmp	r3, r1
 8004f7c:	d819      	bhi.n	8004fb2 <HAL_I2C_Init+0x22e>
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	1e59      	subs	r1, r3, #1
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	005b      	lsls	r3, r3, #1
 8004f88:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f8c:	1c59      	adds	r1, r3, #1
 8004f8e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004f92:	400b      	ands	r3, r1
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00a      	beq.n	8004fae <HAL_I2C_Init+0x22a>
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	1e59      	subs	r1, r3, #1
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	005b      	lsls	r3, r3, #1
 8004fa2:	fbb1 f3f3 	udiv	r3, r1, r3
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fac:	e064      	b.n	8005078 <HAL_I2C_Init+0x2f4>
 8004fae:	2304      	movs	r3, #4
 8004fb0:	e062      	b.n	8005078 <HAL_I2C_Init+0x2f4>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d111      	bne.n	8004fde <HAL_I2C_Init+0x25a>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	1e58      	subs	r0, r3, #1
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6859      	ldr	r1, [r3, #4]
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	005b      	lsls	r3, r3, #1
 8004fc6:	440b      	add	r3, r1
 8004fc8:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fcc:	3301      	adds	r3, #1
 8004fce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	bf0c      	ite	eq
 8004fd6:	2301      	moveq	r3, #1
 8004fd8:	2300      	movne	r3, #0
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	e012      	b.n	8005004 <HAL_I2C_Init+0x280>
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	1e58      	subs	r0, r3, #1
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6859      	ldr	r1, [r3, #4]
 8004fe6:	460b      	mov	r3, r1
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	440b      	add	r3, r1
 8004fec:	0099      	lsls	r1, r3, #2
 8004fee:	440b      	add	r3, r1
 8004ff0:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ff4:	3301      	adds	r3, #1
 8004ff6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	bf0c      	ite	eq
 8004ffe:	2301      	moveq	r3, #1
 8005000:	2300      	movne	r3, #0
 8005002:	b2db      	uxtb	r3, r3
 8005004:	2b00      	cmp	r3, #0
 8005006:	d001      	beq.n	800500c <HAL_I2C_Init+0x288>
 8005008:	2301      	movs	r3, #1
 800500a:	e035      	b.n	8005078 <HAL_I2C_Init+0x2f4>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d121      	bne.n	8005058 <HAL_I2C_Init+0x2d4>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	1e58      	subs	r0, r3, #1
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6859      	ldr	r1, [r3, #4]
 800501c:	460b      	mov	r3, r1
 800501e:	005b      	lsls	r3, r3, #1
 8005020:	440b      	add	r3, r1
 8005022:	fbb0 f3f3 	udiv	r3, r0, r3
 8005026:	3301      	adds	r3, #1
 8005028:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800502c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005030:	e022      	b.n	8005078 <HAL_I2C_Init+0x2f4>
 8005032:	bf00      	nop
 8005034:	40005400 	.word	0x40005400
 8005038:	40005800 	.word	0x40005800
 800503c:	0800c02c 	.word	0x0800c02c
 8005040:	00061a80 	.word	0x00061a80
 8005044:	000186a0 	.word	0x000186a0
 8005048:	001e847f 	.word	0x001e847f
 800504c:	003d08ff 	.word	0x003d08ff
 8005050:	431bde83 	.word	0x431bde83
 8005054:	10624dd3 	.word	0x10624dd3
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	1e58      	subs	r0, r3, #1
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6859      	ldr	r1, [r3, #4]
 8005060:	460b      	mov	r3, r1
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	440b      	add	r3, r1
 8005066:	0099      	lsls	r1, r3, #2
 8005068:	440b      	add	r3, r1
 800506a:	fbb0 f3f3 	udiv	r3, r0, r3
 800506e:	3301      	adds	r3, #1
 8005070:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005074:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005078:	6879      	ldr	r1, [r7, #4]
 800507a:	6809      	ldr	r1, [r1, #0]
 800507c:	4313      	orrs	r3, r2
 800507e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	69da      	ldr	r2, [r3, #28]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a1b      	ldr	r3, [r3, #32]
 8005092:	431a      	orrs	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	430a      	orrs	r2, r1
 800509a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80050a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	6911      	ldr	r1, [r2, #16]
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	68d2      	ldr	r2, [r2, #12]
 80050b2:	4311      	orrs	r1, r2
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	6812      	ldr	r2, [r2, #0]
 80050b8:	430b      	orrs	r3, r1
 80050ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	695a      	ldr	r2, [r3, #20]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	699b      	ldr	r3, [r3, #24]
 80050ce:	431a      	orrs	r2, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	430a      	orrs	r2, r1
 80050d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f042 0201 	orr.w	r2, r2, #1
 80050e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2220      	movs	r2, #32
 80050f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3710      	adds	r7, #16
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop

08005110 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b088      	sub	sp, #32
 8005114:	af02      	add	r7, sp, #8
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	4608      	mov	r0, r1
 800511a:	4611      	mov	r1, r2
 800511c:	461a      	mov	r2, r3
 800511e:	4603      	mov	r3, r0
 8005120:	817b      	strh	r3, [r7, #10]
 8005122:	460b      	mov	r3, r1
 8005124:	813b      	strh	r3, [r7, #8]
 8005126:	4613      	mov	r3, r2
 8005128:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800512a:	f7fd fead 	bl	8002e88 <HAL_GetTick>
 800512e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8005130:	88fb      	ldrh	r3, [r7, #6]
 8005132:	2b01      	cmp	r3, #1
 8005134:	d007      	beq.n	8005146 <HAL_I2C_Mem_Write+0x36>
 8005136:	88fb      	ldrh	r3, [r7, #6]
 8005138:	2b10      	cmp	r3, #16
 800513a:	d004      	beq.n	8005146 <HAL_I2C_Mem_Write+0x36>
 800513c:	f640 11ae 	movw	r1, #2478	; 0x9ae
 8005140:	4873      	ldr	r0, [pc, #460]	; (8005310 <HAL_I2C_Mem_Write+0x200>)
 8005142:	f7fd f852 	bl	80021ea <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b20      	cmp	r3, #32
 8005150:	f040 80d9 	bne.w	8005306 <HAL_I2C_Mem_Write+0x1f6>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	9300      	str	r3, [sp, #0]
 8005158:	2319      	movs	r3, #25
 800515a:	2201      	movs	r2, #1
 800515c:	496d      	ldr	r1, [pc, #436]	; (8005314 <HAL_I2C_Mem_Write+0x204>)
 800515e:	68f8      	ldr	r0, [r7, #12]
 8005160:	f000 fcce 	bl	8005b00 <I2C_WaitOnFlagUntilTimeout>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d001      	beq.n	800516e <HAL_I2C_Mem_Write+0x5e>
    {
      return HAL_BUSY;
 800516a:	2302      	movs	r3, #2
 800516c:	e0cc      	b.n	8005308 <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005174:	2b01      	cmp	r3, #1
 8005176:	d101      	bne.n	800517c <HAL_I2C_Mem_Write+0x6c>
 8005178:	2302      	movs	r3, #2
 800517a:	e0c5      	b.n	8005308 <HAL_I2C_Mem_Write+0x1f8>
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0301 	and.w	r3, r3, #1
 800518e:	2b01      	cmp	r3, #1
 8005190:	d007      	beq.n	80051a2 <HAL_I2C_Mem_Write+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f042 0201 	orr.w	r2, r2, #1
 80051a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051b0:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2221      	movs	r2, #33	; 0x21
 80051b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2240      	movs	r2, #64	; 0x40
 80051be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2200      	movs	r2, #0
 80051c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6a3a      	ldr	r2, [r7, #32]
 80051cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80051d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051d8:	b29a      	uxth	r2, r3
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	4a4d      	ldr	r2, [pc, #308]	; (8005318 <HAL_I2C_Mem_Write+0x208>)
 80051e2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80051e4:	88f8      	ldrh	r0, [r7, #6]
 80051e6:	893a      	ldrh	r2, [r7, #8]
 80051e8:	8979      	ldrh	r1, [r7, #10]
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	9301      	str	r3, [sp, #4]
 80051ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f0:	9300      	str	r3, [sp, #0]
 80051f2:	4603      	mov	r3, r0
 80051f4:	68f8      	ldr	r0, [r7, #12]
 80051f6:	f000 fb05 	bl	8005804 <I2C_RequestMemoryWrite>
 80051fa:	4603      	mov	r3, r0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d052      	beq.n	80052a6 <HAL_I2C_Mem_Write+0x196>
    {
      return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e081      	b.n	8005308 <HAL_I2C_Mem_Write+0x1f8>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005204:	697a      	ldr	r2, [r7, #20]
 8005206:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005208:	68f8      	ldr	r0, [r7, #12]
 800520a:	f000 fd4f 	bl	8005cac <I2C_WaitOnTXEFlagUntilTimeout>
 800520e:	4603      	mov	r3, r0
 8005210:	2b00      	cmp	r3, #0
 8005212:	d00d      	beq.n	8005230 <HAL_I2C_Mem_Write+0x120>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005218:	2b04      	cmp	r3, #4
 800521a:	d107      	bne.n	800522c <HAL_I2C_Mem_Write+0x11c>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800522a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	e06b      	b.n	8005308 <HAL_I2C_Mem_Write+0x1f8>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005234:	781a      	ldrb	r2, [r3, #0]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005240:	1c5a      	adds	r2, r3, #1
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800524a:	3b01      	subs	r3, #1
 800524c:	b29a      	uxth	r2, r3
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005256:	b29b      	uxth	r3, r3
 8005258:	3b01      	subs	r3, #1
 800525a:	b29a      	uxth	r2, r3
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	695b      	ldr	r3, [r3, #20]
 8005266:	f003 0304 	and.w	r3, r3, #4
 800526a:	2b04      	cmp	r3, #4
 800526c:	d11b      	bne.n	80052a6 <HAL_I2C_Mem_Write+0x196>
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005272:	2b00      	cmp	r3, #0
 8005274:	d017      	beq.n	80052a6 <HAL_I2C_Mem_Write+0x196>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527a:	781a      	ldrb	r2, [r3, #0]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005286:	1c5a      	adds	r2, r3, #1
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005290:	3b01      	subs	r3, #1
 8005292:	b29a      	uxth	r2, r3
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800529c:	b29b      	uxth	r3, r3
 800529e:	3b01      	subs	r3, #1
 80052a0:	b29a      	uxth	r2, r3
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d1aa      	bne.n	8005204 <HAL_I2C_Mem_Write+0xf4>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052ae:	697a      	ldr	r2, [r7, #20]
 80052b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052b2:	68f8      	ldr	r0, [r7, #12]
 80052b4:	f000 fd3b 	bl	8005d2e <I2C_WaitOnBTFFlagUntilTimeout>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00d      	beq.n	80052da <HAL_I2C_Mem_Write+0x1ca>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c2:	2b04      	cmp	r3, #4
 80052c4:	d107      	bne.n	80052d6 <HAL_I2C_Mem_Write+0x1c6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e016      	b.n	8005308 <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052e8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2220      	movs	r2, #32
 80052ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005302:	2300      	movs	r3, #0
 8005304:	e000      	b.n	8005308 <HAL_I2C_Mem_Write+0x1f8>
  }
  else
  {
    return HAL_BUSY;
 8005306:	2302      	movs	r3, #2
  }
}
 8005308:	4618      	mov	r0, r3
 800530a:	3718      	adds	r7, #24
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}
 8005310:	0800c02c 	.word	0x0800c02c
 8005314:	00100002 	.word	0x00100002
 8005318:	ffff0000 	.word	0xffff0000

0800531c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b08c      	sub	sp, #48	; 0x30
 8005320:	af02      	add	r7, sp, #8
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	4608      	mov	r0, r1
 8005326:	4611      	mov	r1, r2
 8005328:	461a      	mov	r2, r3
 800532a:	4603      	mov	r3, r0
 800532c:	817b      	strh	r3, [r7, #10]
 800532e:	460b      	mov	r3, r1
 8005330:	813b      	strh	r3, [r7, #8]
 8005332:	4613      	mov	r3, r2
 8005334:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8005336:	2300      	movs	r3, #0
 8005338:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800533a:	f7fd fda5 	bl	8002e88 <HAL_GetTick>
 800533e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8005340:	88fb      	ldrh	r3, [r7, #6]
 8005342:	2b01      	cmp	r3, #1
 8005344:	d007      	beq.n	8005356 <HAL_I2C_Mem_Read+0x3a>
 8005346:	88fb      	ldrh	r3, [r7, #6]
 8005348:	2b10      	cmp	r3, #16
 800534a:	d004      	beq.n	8005356 <HAL_I2C_Mem_Read+0x3a>
 800534c:	f640 212b 	movw	r1, #2603	; 0xa2b
 8005350:	4888      	ldr	r0, [pc, #544]	; (8005574 <HAL_I2C_Mem_Read+0x258>)
 8005352:	f7fc ff4a 	bl	80021ea <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800535c:	b2db      	uxtb	r3, r3
 800535e:	2b20      	cmp	r3, #32
 8005360:	f040 8245 	bne.w	80057ee <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005366:	9300      	str	r3, [sp, #0]
 8005368:	2319      	movs	r3, #25
 800536a:	2201      	movs	r2, #1
 800536c:	4982      	ldr	r1, [pc, #520]	; (8005578 <HAL_I2C_Mem_Read+0x25c>)
 800536e:	68f8      	ldr	r0, [r7, #12]
 8005370:	f000 fbc6 	bl	8005b00 <I2C_WaitOnFlagUntilTimeout>
 8005374:	4603      	mov	r3, r0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d001      	beq.n	800537e <HAL_I2C_Mem_Read+0x62>
    {
      return HAL_BUSY;
 800537a:	2302      	movs	r3, #2
 800537c:	e238      	b.n	80057f0 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005384:	2b01      	cmp	r3, #1
 8005386:	d101      	bne.n	800538c <HAL_I2C_Mem_Read+0x70>
 8005388:	2302      	movs	r3, #2
 800538a:	e231      	b.n	80057f0 <HAL_I2C_Mem_Read+0x4d4>
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 0301 	and.w	r3, r3, #1
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d007      	beq.n	80053b2 <HAL_I2C_Mem_Read+0x96>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f042 0201 	orr.w	r2, r2, #1
 80053b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053c0:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2222      	movs	r2, #34	; 0x22
 80053c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2240      	movs	r2, #64	; 0x40
 80053ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2200      	movs	r2, #0
 80053d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80053e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053e8:	b29a      	uxth	r2, r3
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	4a62      	ldr	r2, [pc, #392]	; (800557c <HAL_I2C_Mem_Read+0x260>)
 80053f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80053f4:	88f8      	ldrh	r0, [r7, #6]
 80053f6:	893a      	ldrh	r2, [r7, #8]
 80053f8:	8979      	ldrh	r1, [r7, #10]
 80053fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fc:	9301      	str	r3, [sp, #4]
 80053fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005400:	9300      	str	r3, [sp, #0]
 8005402:	4603      	mov	r3, r0
 8005404:	68f8      	ldr	r0, [r7, #12]
 8005406:	f000 fa93 	bl	8005930 <I2C_RequestMemoryRead>
 800540a:	4603      	mov	r3, r0
 800540c:	2b00      	cmp	r3, #0
 800540e:	d001      	beq.n	8005414 <HAL_I2C_Mem_Read+0xf8>
    {
      return HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	e1ed      	b.n	80057f0 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005418:	2b00      	cmp	r3, #0
 800541a:	d113      	bne.n	8005444 <HAL_I2C_Mem_Read+0x128>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800541c:	2300      	movs	r3, #0
 800541e:	61fb      	str	r3, [r7, #28]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	695b      	ldr	r3, [r3, #20]
 8005426:	61fb      	str	r3, [r7, #28]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	699b      	ldr	r3, [r3, #24]
 800542e:	61fb      	str	r3, [r7, #28]
 8005430:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005440:	601a      	str	r2, [r3, #0]
 8005442:	e1c1      	b.n	80057c8 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005448:	2b01      	cmp	r3, #1
 800544a:	d11e      	bne.n	800548a <HAL_I2C_Mem_Read+0x16e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800545a:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800545c:	b672      	cpsid	i
}
 800545e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005460:	2300      	movs	r3, #0
 8005462:	61bb      	str	r3, [r7, #24]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	695b      	ldr	r3, [r3, #20]
 800546a:	61bb      	str	r3, [r7, #24]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	699b      	ldr	r3, [r3, #24]
 8005472:	61bb      	str	r3, [r7, #24]
 8005474:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005484:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005486:	b662      	cpsie	i
}
 8005488:	e035      	b.n	80054f6 <HAL_I2C_Mem_Read+0x1da>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800548e:	2b02      	cmp	r3, #2
 8005490:	d11e      	bne.n	80054d0 <HAL_I2C_Mem_Read+0x1b4>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054a0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80054a2:	b672      	cpsid	i
}
 80054a4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054a6:	2300      	movs	r3, #0
 80054a8:	617b      	str	r3, [r7, #20]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	695b      	ldr	r3, [r3, #20]
 80054b0:	617b      	str	r3, [r7, #20]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	699b      	ldr	r3, [r3, #24]
 80054b8:	617b      	str	r3, [r7, #20]
 80054ba:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054ca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80054cc:	b662      	cpsie	i
}
 80054ce:	e012      	b.n	80054f6 <HAL_I2C_Mem_Read+0x1da>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80054de:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054e0:	2300      	movs	r3, #0
 80054e2:	613b      	str	r3, [r7, #16]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	695b      	ldr	r3, [r3, #20]
 80054ea:	613b      	str	r3, [r7, #16]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	699b      	ldr	r3, [r3, #24]
 80054f2:	613b      	str	r3, [r7, #16]
 80054f4:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80054f6:	e167      	b.n	80057c8 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054fc:	2b03      	cmp	r3, #3
 80054fe:	f200 8120 	bhi.w	8005742 <HAL_I2C_Mem_Read+0x426>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005506:	2b01      	cmp	r3, #1
 8005508:	d123      	bne.n	8005552 <HAL_I2C_Mem_Read+0x236>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800550a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800550c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800550e:	68f8      	ldr	r0, [r7, #12]
 8005510:	f000 fc4e 	bl	8005db0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d001      	beq.n	800551e <HAL_I2C_Mem_Read+0x202>
          {
            return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e168      	b.n	80057f0 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	691a      	ldr	r2, [r3, #16]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005528:	b2d2      	uxtb	r2, r2
 800552a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005530:	1c5a      	adds	r2, r3, #1
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800553a:	3b01      	subs	r3, #1
 800553c:	b29a      	uxth	r2, r3
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005546:	b29b      	uxth	r3, r3
 8005548:	3b01      	subs	r3, #1
 800554a:	b29a      	uxth	r2, r3
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005550:	e13a      	b.n	80057c8 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005556:	2b02      	cmp	r3, #2
 8005558:	d153      	bne.n	8005602 <HAL_I2C_Mem_Read+0x2e6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800555a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555c:	9300      	str	r3, [sp, #0]
 800555e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005560:	2200      	movs	r2, #0
 8005562:	4907      	ldr	r1, [pc, #28]	; (8005580 <HAL_I2C_Mem_Read+0x264>)
 8005564:	68f8      	ldr	r0, [r7, #12]
 8005566:	f000 facb 	bl	8005b00 <I2C_WaitOnFlagUntilTimeout>
 800556a:	4603      	mov	r3, r0
 800556c:	2b00      	cmp	r3, #0
 800556e:	d009      	beq.n	8005584 <HAL_I2C_Mem_Read+0x268>
          {
            return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e13d      	b.n	80057f0 <HAL_I2C_Mem_Read+0x4d4>
 8005574:	0800c02c 	.word	0x0800c02c
 8005578:	00100002 	.word	0x00100002
 800557c:	ffff0000 	.word	0xffff0000
 8005580:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005584:	b672      	cpsid	i
}
 8005586:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005596:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	691a      	ldr	r2, [r3, #16]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a2:	b2d2      	uxtb	r2, r2
 80055a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055aa:	1c5a      	adds	r2, r3, #1
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055b4:	3b01      	subs	r3, #1
 80055b6:	b29a      	uxth	r2, r3
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	3b01      	subs	r3, #1
 80055c4:	b29a      	uxth	r2, r3
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80055ca:	b662      	cpsie	i
}
 80055cc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	691a      	ldr	r2, [r3, #16]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d8:	b2d2      	uxtb	r2, r2
 80055da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e0:	1c5a      	adds	r2, r3, #1
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055ea:	3b01      	subs	r3, #1
 80055ec:	b29a      	uxth	r2, r3
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	3b01      	subs	r3, #1
 80055fa:	b29a      	uxth	r2, r3
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005600:	e0e2      	b.n	80057c8 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005604:	9300      	str	r3, [sp, #0]
 8005606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005608:	2200      	movs	r2, #0
 800560a:	497b      	ldr	r1, [pc, #492]	; (80057f8 <HAL_I2C_Mem_Read+0x4dc>)
 800560c:	68f8      	ldr	r0, [r7, #12]
 800560e:	f000 fa77 	bl	8005b00 <I2C_WaitOnFlagUntilTimeout>
 8005612:	4603      	mov	r3, r0
 8005614:	2b00      	cmp	r3, #0
 8005616:	d001      	beq.n	800561c <HAL_I2C_Mem_Read+0x300>
          {
            return HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	e0e9      	b.n	80057f0 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800562a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800562c:	b672      	cpsid	i
}
 800562e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	691a      	ldr	r2, [r3, #16]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563a:	b2d2      	uxtb	r2, r2
 800563c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005642:	1c5a      	adds	r2, r3, #1
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800564c:	3b01      	subs	r3, #1
 800564e:	b29a      	uxth	r2, r3
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005658:	b29b      	uxth	r3, r3
 800565a:	3b01      	subs	r3, #1
 800565c:	b29a      	uxth	r2, r3
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005662:	4b66      	ldr	r3, [pc, #408]	; (80057fc <HAL_I2C_Mem_Read+0x4e0>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	08db      	lsrs	r3, r3, #3
 8005668:	4a65      	ldr	r2, [pc, #404]	; (8005800 <HAL_I2C_Mem_Read+0x4e4>)
 800566a:	fba2 2303 	umull	r2, r3, r2, r3
 800566e:	0a1a      	lsrs	r2, r3, #8
 8005670:	4613      	mov	r3, r2
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	4413      	add	r3, r2
 8005676:	00da      	lsls	r2, r3, #3
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800567c:	6a3b      	ldr	r3, [r7, #32]
 800567e:	3b01      	subs	r3, #1
 8005680:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8005682:	6a3b      	ldr	r3, [r7, #32]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d118      	bne.n	80056ba <HAL_I2C_Mem_Read+0x39e>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2200      	movs	r2, #0
 800568c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2220      	movs	r2, #32
 8005692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2200      	movs	r2, #0
 800569a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a2:	f043 0220 	orr.w	r2, r3, #32
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80056aa:	b662      	cpsie	i
}
 80056ac:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e09a      	b.n	80057f0 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	695b      	ldr	r3, [r3, #20]
 80056c0:	f003 0304 	and.w	r3, r3, #4
 80056c4:	2b04      	cmp	r3, #4
 80056c6:	d1d9      	bne.n	800567c <HAL_I2C_Mem_Read+0x360>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	691a      	ldr	r2, [r3, #16]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e2:	b2d2      	uxtb	r2, r2
 80056e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ea:	1c5a      	adds	r2, r3, #1
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056f4:	3b01      	subs	r3, #1
 80056f6:	b29a      	uxth	r2, r3
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005700:	b29b      	uxth	r3, r3
 8005702:	3b01      	subs	r3, #1
 8005704:	b29a      	uxth	r2, r3
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800570a:	b662      	cpsie	i
}
 800570c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	691a      	ldr	r2, [r3, #16]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005718:	b2d2      	uxtb	r2, r2
 800571a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005720:	1c5a      	adds	r2, r3, #1
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800572a:	3b01      	subs	r3, #1
 800572c:	b29a      	uxth	r2, r3
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005736:	b29b      	uxth	r3, r3
 8005738:	3b01      	subs	r3, #1
 800573a:	b29a      	uxth	r2, r3
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005740:	e042      	b.n	80057c8 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005742:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005744:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005746:	68f8      	ldr	r0, [r7, #12]
 8005748:	f000 fb32 	bl	8005db0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800574c:	4603      	mov	r3, r0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d001      	beq.n	8005756 <HAL_I2C_Mem_Read+0x43a>
        {
          return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e04c      	b.n	80057f0 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	691a      	ldr	r2, [r3, #16]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005760:	b2d2      	uxtb	r2, r2
 8005762:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005768:	1c5a      	adds	r2, r3, #1
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005772:	3b01      	subs	r3, #1
 8005774:	b29a      	uxth	r2, r3
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800577e:	b29b      	uxth	r3, r3
 8005780:	3b01      	subs	r3, #1
 8005782:	b29a      	uxth	r2, r3
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	695b      	ldr	r3, [r3, #20]
 800578e:	f003 0304 	and.w	r3, r3, #4
 8005792:	2b04      	cmp	r3, #4
 8005794:	d118      	bne.n	80057c8 <HAL_I2C_Mem_Read+0x4ac>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	691a      	ldr	r2, [r3, #16]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a0:	b2d2      	uxtb	r2, r2
 80057a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a8:	1c5a      	adds	r2, r3, #1
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057b2:	3b01      	subs	r3, #1
 80057b4:	b29a      	uxth	r2, r3
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057be:	b29b      	uxth	r3, r3
 80057c0:	3b01      	subs	r3, #1
 80057c2:	b29a      	uxth	r2, r3
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	f47f ae93 	bne.w	80054f8 <HAL_I2C_Mem_Read+0x1dc>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2220      	movs	r2, #32
 80057d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2200      	movs	r2, #0
 80057de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80057ea:	2300      	movs	r3, #0
 80057ec:	e000      	b.n	80057f0 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80057ee:	2302      	movs	r3, #2
  }
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3728      	adds	r7, #40	; 0x28
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	00010004 	.word	0x00010004
 80057fc:	2000000c 	.word	0x2000000c
 8005800:	14f8b589 	.word	0x14f8b589

08005804 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b088      	sub	sp, #32
 8005808:	af02      	add	r7, sp, #8
 800580a:	60f8      	str	r0, [r7, #12]
 800580c:	4608      	mov	r0, r1
 800580e:	4611      	mov	r1, r2
 8005810:	461a      	mov	r2, r3
 8005812:	4603      	mov	r3, r0
 8005814:	817b      	strh	r3, [r7, #10]
 8005816:	460b      	mov	r3, r1
 8005818:	813b      	strh	r3, [r7, #8]
 800581a:	4613      	mov	r3, r2
 800581c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800582c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800582e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005830:	9300      	str	r3, [sp, #0]
 8005832:	6a3b      	ldr	r3, [r7, #32]
 8005834:	2200      	movs	r2, #0
 8005836:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800583a:	68f8      	ldr	r0, [r7, #12]
 800583c:	f000 f960 	bl	8005b00 <I2C_WaitOnFlagUntilTimeout>
 8005840:	4603      	mov	r3, r0
 8005842:	2b00      	cmp	r3, #0
 8005844:	d00d      	beq.n	8005862 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005850:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005854:	d103      	bne.n	800585e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f44f 7200 	mov.w	r2, #512	; 0x200
 800585c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800585e:	2303      	movs	r3, #3
 8005860:	e05f      	b.n	8005922 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005862:	897b      	ldrh	r3, [r7, #10]
 8005864:	b2db      	uxtb	r3, r3
 8005866:	461a      	mov	r2, r3
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005870:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005874:	6a3a      	ldr	r2, [r7, #32]
 8005876:	492d      	ldr	r1, [pc, #180]	; (800592c <I2C_RequestMemoryWrite+0x128>)
 8005878:	68f8      	ldr	r0, [r7, #12]
 800587a:	f000 f998 	bl	8005bae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800587e:	4603      	mov	r3, r0
 8005880:	2b00      	cmp	r3, #0
 8005882:	d001      	beq.n	8005888 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	e04c      	b.n	8005922 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005888:	2300      	movs	r3, #0
 800588a:	617b      	str	r3, [r7, #20]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	695b      	ldr	r3, [r3, #20]
 8005892:	617b      	str	r3, [r7, #20]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	699b      	ldr	r3, [r3, #24]
 800589a:	617b      	str	r3, [r7, #20]
 800589c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800589e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058a0:	6a39      	ldr	r1, [r7, #32]
 80058a2:	68f8      	ldr	r0, [r7, #12]
 80058a4:	f000 fa02 	bl	8005cac <I2C_WaitOnTXEFlagUntilTimeout>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d00d      	beq.n	80058ca <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b2:	2b04      	cmp	r3, #4
 80058b4:	d107      	bne.n	80058c6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	e02b      	b.n	8005922 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80058ca:	88fb      	ldrh	r3, [r7, #6]
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d105      	bne.n	80058dc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80058d0:	893b      	ldrh	r3, [r7, #8]
 80058d2:	b2da      	uxtb	r2, r3
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	611a      	str	r2, [r3, #16]
 80058da:	e021      	b.n	8005920 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80058dc:	893b      	ldrh	r3, [r7, #8]
 80058de:	0a1b      	lsrs	r3, r3, #8
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	b2da      	uxtb	r2, r3
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058ec:	6a39      	ldr	r1, [r7, #32]
 80058ee:	68f8      	ldr	r0, [r7, #12]
 80058f0:	f000 f9dc 	bl	8005cac <I2C_WaitOnTXEFlagUntilTimeout>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d00d      	beq.n	8005916 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fe:	2b04      	cmp	r3, #4
 8005900:	d107      	bne.n	8005912 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005910:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	e005      	b.n	8005922 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005916:	893b      	ldrh	r3, [r7, #8]
 8005918:	b2da      	uxtb	r2, r3
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	3718      	adds	r7, #24
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
 800592a:	bf00      	nop
 800592c:	00010002 	.word	0x00010002

08005930 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b088      	sub	sp, #32
 8005934:	af02      	add	r7, sp, #8
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	4608      	mov	r0, r1
 800593a:	4611      	mov	r1, r2
 800593c:	461a      	mov	r2, r3
 800593e:	4603      	mov	r3, r0
 8005940:	817b      	strh	r3, [r7, #10]
 8005942:	460b      	mov	r3, r1
 8005944:	813b      	strh	r3, [r7, #8]
 8005946:	4613      	mov	r3, r2
 8005948:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005958:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005968:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800596a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596c:	9300      	str	r3, [sp, #0]
 800596e:	6a3b      	ldr	r3, [r7, #32]
 8005970:	2200      	movs	r2, #0
 8005972:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005976:	68f8      	ldr	r0, [r7, #12]
 8005978:	f000 f8c2 	bl	8005b00 <I2C_WaitOnFlagUntilTimeout>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d00d      	beq.n	800599e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800598c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005990:	d103      	bne.n	800599a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005998:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e0aa      	b.n	8005af4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800599e:	897b      	ldrh	r3, [r7, #10]
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	461a      	mov	r2, r3
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80059ac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80059ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b0:	6a3a      	ldr	r2, [r7, #32]
 80059b2:	4952      	ldr	r1, [pc, #328]	; (8005afc <I2C_RequestMemoryRead+0x1cc>)
 80059b4:	68f8      	ldr	r0, [r7, #12]
 80059b6:	f000 f8fa 	bl	8005bae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80059ba:	4603      	mov	r3, r0
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d001      	beq.n	80059c4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	e097      	b.n	8005af4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059c4:	2300      	movs	r3, #0
 80059c6:	617b      	str	r3, [r7, #20]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	695b      	ldr	r3, [r3, #20]
 80059ce:	617b      	str	r3, [r7, #20]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	699b      	ldr	r3, [r3, #24]
 80059d6:	617b      	str	r3, [r7, #20]
 80059d8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059dc:	6a39      	ldr	r1, [r7, #32]
 80059de:	68f8      	ldr	r0, [r7, #12]
 80059e0:	f000 f964 	bl	8005cac <I2C_WaitOnTXEFlagUntilTimeout>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d00d      	beq.n	8005a06 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ee:	2b04      	cmp	r3, #4
 80059f0:	d107      	bne.n	8005a02 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a00:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e076      	b.n	8005af4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005a06:	88fb      	ldrh	r3, [r7, #6]
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d105      	bne.n	8005a18 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a0c:	893b      	ldrh	r3, [r7, #8]
 8005a0e:	b2da      	uxtb	r2, r3
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	611a      	str	r2, [r3, #16]
 8005a16:	e021      	b.n	8005a5c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005a18:	893b      	ldrh	r3, [r7, #8]
 8005a1a:	0a1b      	lsrs	r3, r3, #8
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	b2da      	uxtb	r2, r3
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a28:	6a39      	ldr	r1, [r7, #32]
 8005a2a:	68f8      	ldr	r0, [r7, #12]
 8005a2c:	f000 f93e 	bl	8005cac <I2C_WaitOnTXEFlagUntilTimeout>
 8005a30:	4603      	mov	r3, r0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d00d      	beq.n	8005a52 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3a:	2b04      	cmp	r3, #4
 8005a3c:	d107      	bne.n	8005a4e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a4c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e050      	b.n	8005af4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a52:	893b      	ldrh	r3, [r7, #8]
 8005a54:	b2da      	uxtb	r2, r3
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a5e:	6a39      	ldr	r1, [r7, #32]
 8005a60:	68f8      	ldr	r0, [r7, #12]
 8005a62:	f000 f923 	bl	8005cac <I2C_WaitOnTXEFlagUntilTimeout>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d00d      	beq.n	8005a88 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a70:	2b04      	cmp	r3, #4
 8005a72:	d107      	bne.n	8005a84 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a82:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e035      	b.n	8005af4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a96:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9a:	9300      	str	r3, [sp, #0]
 8005a9c:	6a3b      	ldr	r3, [r7, #32]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005aa4:	68f8      	ldr	r0, [r7, #12]
 8005aa6:	f000 f82b 	bl	8005b00 <I2C_WaitOnFlagUntilTimeout>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d00d      	beq.n	8005acc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005abe:	d103      	bne.n	8005ac8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ac6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005ac8:	2303      	movs	r3, #3
 8005aca:	e013      	b.n	8005af4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005acc:	897b      	ldrh	r3, [r7, #10]
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	f043 0301 	orr.w	r3, r3, #1
 8005ad4:	b2da      	uxtb	r2, r3
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ade:	6a3a      	ldr	r2, [r7, #32]
 8005ae0:	4906      	ldr	r1, [pc, #24]	; (8005afc <I2C_RequestMemoryRead+0x1cc>)
 8005ae2:	68f8      	ldr	r0, [r7, #12]
 8005ae4:	f000 f863 	bl	8005bae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d001      	beq.n	8005af2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e000      	b.n	8005af4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005af2:	2300      	movs	r3, #0
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3718      	adds	r7, #24
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}
 8005afc:	00010002 	.word	0x00010002

08005b00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	60f8      	str	r0, [r7, #12]
 8005b08:	60b9      	str	r1, [r7, #8]
 8005b0a:	603b      	str	r3, [r7, #0]
 8005b0c:	4613      	mov	r3, r2
 8005b0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b10:	e025      	b.n	8005b5e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b18:	d021      	beq.n	8005b5e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b1a:	f7fd f9b5 	bl	8002e88 <HAL_GetTick>
 8005b1e:	4602      	mov	r2, r0
 8005b20:	69bb      	ldr	r3, [r7, #24]
 8005b22:	1ad3      	subs	r3, r2, r3
 8005b24:	683a      	ldr	r2, [r7, #0]
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d302      	bcc.n	8005b30 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d116      	bne.n	8005b5e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2200      	movs	r2, #0
 8005b34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2220      	movs	r2, #32
 8005b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4a:	f043 0220 	orr.w	r2, r3, #32
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e023      	b.n	8005ba6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	0c1b      	lsrs	r3, r3, #16
 8005b62:	b2db      	uxtb	r3, r3
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d10d      	bne.n	8005b84 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	695b      	ldr	r3, [r3, #20]
 8005b6e:	43da      	mvns	r2, r3
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	4013      	ands	r3, r2
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	bf0c      	ite	eq
 8005b7a:	2301      	moveq	r3, #1
 8005b7c:	2300      	movne	r3, #0
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	461a      	mov	r2, r3
 8005b82:	e00c      	b.n	8005b9e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	699b      	ldr	r3, [r3, #24]
 8005b8a:	43da      	mvns	r2, r3
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	4013      	ands	r3, r2
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	bf0c      	ite	eq
 8005b96:	2301      	moveq	r3, #1
 8005b98:	2300      	movne	r3, #0
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	79fb      	ldrb	r3, [r7, #7]
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d0b6      	beq.n	8005b12 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3710      	adds	r7, #16
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}

08005bae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005bae:	b580      	push	{r7, lr}
 8005bb0:	b084      	sub	sp, #16
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	60f8      	str	r0, [r7, #12]
 8005bb6:	60b9      	str	r1, [r7, #8]
 8005bb8:	607a      	str	r2, [r7, #4]
 8005bba:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005bbc:	e051      	b.n	8005c62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	695b      	ldr	r3, [r3, #20]
 8005bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bcc:	d123      	bne.n	8005c16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bdc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005be6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2200      	movs	r2, #0
 8005bec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2220      	movs	r2, #32
 8005bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c02:	f043 0204 	orr.w	r2, r3, #4
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	e046      	b.n	8005ca4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c1c:	d021      	beq.n	8005c62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c1e:	f7fd f933 	bl	8002e88 <HAL_GetTick>
 8005c22:	4602      	mov	r2, r0
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	1ad3      	subs	r3, r2, r3
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d302      	bcc.n	8005c34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d116      	bne.n	8005c62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2200      	movs	r2, #0
 8005c38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2220      	movs	r2, #32
 8005c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2200      	movs	r2, #0
 8005c46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4e:	f043 0220 	orr.w	r2, r3, #32
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e020      	b.n	8005ca4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	0c1b      	lsrs	r3, r3, #16
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d10c      	bne.n	8005c86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	695b      	ldr	r3, [r3, #20]
 8005c72:	43da      	mvns	r2, r3
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	4013      	ands	r3, r2
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	bf14      	ite	ne
 8005c7e:	2301      	movne	r3, #1
 8005c80:	2300      	moveq	r3, #0
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	e00b      	b.n	8005c9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	699b      	ldr	r3, [r3, #24]
 8005c8c:	43da      	mvns	r2, r3
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	4013      	ands	r3, r2
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	bf14      	ite	ne
 8005c98:	2301      	movne	r3, #1
 8005c9a:	2300      	moveq	r3, #0
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d18d      	bne.n	8005bbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005ca2:	2300      	movs	r3, #0
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3710      	adds	r7, #16
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}

08005cac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b084      	sub	sp, #16
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	60f8      	str	r0, [r7, #12]
 8005cb4:	60b9      	str	r1, [r7, #8]
 8005cb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005cb8:	e02d      	b.n	8005d16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005cba:	68f8      	ldr	r0, [r7, #12]
 8005cbc:	f000 f8ce 	bl	8005e5c <I2C_IsAcknowledgeFailed>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d001      	beq.n	8005cca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e02d      	b.n	8005d26 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cd0:	d021      	beq.n	8005d16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cd2:	f7fd f8d9 	bl	8002e88 <HAL_GetTick>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	1ad3      	subs	r3, r2, r3
 8005cdc:	68ba      	ldr	r2, [r7, #8]
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d302      	bcc.n	8005ce8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d116      	bne.n	8005d16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2200      	movs	r2, #0
 8005cec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2220      	movs	r2, #32
 8005cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d02:	f043 0220 	orr.w	r2, r3, #32
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e007      	b.n	8005d26 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	695b      	ldr	r3, [r3, #20]
 8005d1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d20:	2b80      	cmp	r3, #128	; 0x80
 8005d22:	d1ca      	bne.n	8005cba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3710      	adds	r7, #16
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}

08005d2e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d2e:	b580      	push	{r7, lr}
 8005d30:	b084      	sub	sp, #16
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	60f8      	str	r0, [r7, #12]
 8005d36:	60b9      	str	r1, [r7, #8]
 8005d38:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005d3a:	e02d      	b.n	8005d98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005d3c:	68f8      	ldr	r0, [r7, #12]
 8005d3e:	f000 f88d 	bl	8005e5c <I2C_IsAcknowledgeFailed>
 8005d42:	4603      	mov	r3, r0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d001      	beq.n	8005d4c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e02d      	b.n	8005da8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d52:	d021      	beq.n	8005d98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d54:	f7fd f898 	bl	8002e88 <HAL_GetTick>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	1ad3      	subs	r3, r2, r3
 8005d5e:	68ba      	ldr	r2, [r7, #8]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d302      	bcc.n	8005d6a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d116      	bne.n	8005d98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2220      	movs	r2, #32
 8005d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d84:	f043 0220 	orr.w	r2, r3, #32
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e007      	b.n	8005da8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	695b      	ldr	r3, [r3, #20]
 8005d9e:	f003 0304 	and.w	r3, r3, #4
 8005da2:	2b04      	cmp	r3, #4
 8005da4:	d1ca      	bne.n	8005d3c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005da6:	2300      	movs	r3, #0
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3710      	adds	r7, #16
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	60f8      	str	r0, [r7, #12]
 8005db8:	60b9      	str	r1, [r7, #8]
 8005dba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005dbc:	e042      	b.n	8005e44 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	695b      	ldr	r3, [r3, #20]
 8005dc4:	f003 0310 	and.w	r3, r3, #16
 8005dc8:	2b10      	cmp	r3, #16
 8005dca:	d119      	bne.n	8005e00 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f06f 0210 	mvn.w	r2, #16
 8005dd4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2220      	movs	r2, #32
 8005de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2200      	movs	r2, #0
 8005df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e029      	b.n	8005e54 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e00:	f7fd f842 	bl	8002e88 <HAL_GetTick>
 8005e04:	4602      	mov	r2, r0
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	1ad3      	subs	r3, r2, r3
 8005e0a:	68ba      	ldr	r2, [r7, #8]
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d302      	bcc.n	8005e16 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d116      	bne.n	8005e44 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2220      	movs	r2, #32
 8005e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2200      	movs	r2, #0
 8005e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e30:	f043 0220 	orr.w	r2, r3, #32
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	e007      	b.n	8005e54 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	695b      	ldr	r3, [r3, #20]
 8005e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e4e:	2b40      	cmp	r3, #64	; 0x40
 8005e50:	d1b5      	bne.n	8005dbe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005e52:	2300      	movs	r3, #0
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3710      	adds	r7, #16
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b083      	sub	sp, #12
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	695b      	ldr	r3, [r3, #20]
 8005e6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e72:	d11b      	bne.n	8005eac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005e7c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2200      	movs	r2, #0
 8005e82:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2220      	movs	r2, #32
 8005e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e98:	f043 0204 	orr.w	r2, r3, #4
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e000      	b.n	8005eae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005eac:	2300      	movs	r3, #0
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	370c      	adds	r7, #12
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bc80      	pop	{r7}
 8005eb6:	4770      	bx	lr

08005eb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b086      	sub	sp, #24
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d101      	bne.n	8005eca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e35c      	b.n	8006584 <HAL_RCC_OscConfig+0x6cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d01c      	beq.n	8005f0c <HAL_RCC_OscConfig+0x54>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f003 0301 	and.w	r3, r3, #1
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d116      	bne.n	8005f0c <HAL_RCC_OscConfig+0x54>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f003 0302 	and.w	r3, r3, #2
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d110      	bne.n	8005f0c <HAL_RCC_OscConfig+0x54>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f003 0308 	and.w	r3, r3, #8
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d10a      	bne.n	8005f0c <HAL_RCC_OscConfig+0x54>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 0304 	and.w	r3, r3, #4
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d104      	bne.n	8005f0c <HAL_RCC_OscConfig+0x54>
 8005f02:	f240 1167 	movw	r1, #359	; 0x167
 8005f06:	48a5      	ldr	r0, [pc, #660]	; (800619c <HAL_RCC_OscConfig+0x2e4>)
 8005f08:	f7fc f96f 	bl	80021ea <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f003 0301 	and.w	r3, r3, #1
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	f000 809a 	beq.w	800604e <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d00e      	beq.n	8005f40 <HAL_RCC_OscConfig+0x88>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f2a:	d009      	beq.n	8005f40 <HAL_RCC_OscConfig+0x88>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f34:	d004      	beq.n	8005f40 <HAL_RCC_OscConfig+0x88>
 8005f36:	f240 116d 	movw	r1, #365	; 0x16d
 8005f3a:	4898      	ldr	r0, [pc, #608]	; (800619c <HAL_RCC_OscConfig+0x2e4>)
 8005f3c:	f7fc f955 	bl	80021ea <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005f40:	4b97      	ldr	r3, [pc, #604]	; (80061a0 <HAL_RCC_OscConfig+0x2e8>)
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	f003 030c 	and.w	r3, r3, #12
 8005f48:	2b04      	cmp	r3, #4
 8005f4a:	d00c      	beq.n	8005f66 <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005f4c:	4b94      	ldr	r3, [pc, #592]	; (80061a0 <HAL_RCC_OscConfig+0x2e8>)
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	f003 030c 	and.w	r3, r3, #12
 8005f54:	2b08      	cmp	r3, #8
 8005f56:	d112      	bne.n	8005f7e <HAL_RCC_OscConfig+0xc6>
 8005f58:	4b91      	ldr	r3, [pc, #580]	; (80061a0 <HAL_RCC_OscConfig+0x2e8>)
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f64:	d10b      	bne.n	8005f7e <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f66:	4b8e      	ldr	r3, [pc, #568]	; (80061a0 <HAL_RCC_OscConfig+0x2e8>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d06c      	beq.n	800604c <HAL_RCC_OscConfig+0x194>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d168      	bne.n	800604c <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e302      	b.n	8006584 <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f86:	d106      	bne.n	8005f96 <HAL_RCC_OscConfig+0xde>
 8005f88:	4b85      	ldr	r3, [pc, #532]	; (80061a0 <HAL_RCC_OscConfig+0x2e8>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a84      	ldr	r2, [pc, #528]	; (80061a0 <HAL_RCC_OscConfig+0x2e8>)
 8005f8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f92:	6013      	str	r3, [r2, #0]
 8005f94:	e02e      	b.n	8005ff4 <HAL_RCC_OscConfig+0x13c>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d10c      	bne.n	8005fb8 <HAL_RCC_OscConfig+0x100>
 8005f9e:	4b80      	ldr	r3, [pc, #512]	; (80061a0 <HAL_RCC_OscConfig+0x2e8>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a7f      	ldr	r2, [pc, #508]	; (80061a0 <HAL_RCC_OscConfig+0x2e8>)
 8005fa4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fa8:	6013      	str	r3, [r2, #0]
 8005faa:	4b7d      	ldr	r3, [pc, #500]	; (80061a0 <HAL_RCC_OscConfig+0x2e8>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a7c      	ldr	r2, [pc, #496]	; (80061a0 <HAL_RCC_OscConfig+0x2e8>)
 8005fb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005fb4:	6013      	str	r3, [r2, #0]
 8005fb6:	e01d      	b.n	8005ff4 <HAL_RCC_OscConfig+0x13c>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005fc0:	d10c      	bne.n	8005fdc <HAL_RCC_OscConfig+0x124>
 8005fc2:	4b77      	ldr	r3, [pc, #476]	; (80061a0 <HAL_RCC_OscConfig+0x2e8>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a76      	ldr	r2, [pc, #472]	; (80061a0 <HAL_RCC_OscConfig+0x2e8>)
 8005fc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005fcc:	6013      	str	r3, [r2, #0]
 8005fce:	4b74      	ldr	r3, [pc, #464]	; (80061a0 <HAL_RCC_OscConfig+0x2e8>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a73      	ldr	r2, [pc, #460]	; (80061a0 <HAL_RCC_OscConfig+0x2e8>)
 8005fd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fd8:	6013      	str	r3, [r2, #0]
 8005fda:	e00b      	b.n	8005ff4 <HAL_RCC_OscConfig+0x13c>
 8005fdc:	4b70      	ldr	r3, [pc, #448]	; (80061a0 <HAL_RCC_OscConfig+0x2e8>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a6f      	ldr	r2, [pc, #444]	; (80061a0 <HAL_RCC_OscConfig+0x2e8>)
 8005fe2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fe6:	6013      	str	r3, [r2, #0]
 8005fe8:	4b6d      	ldr	r3, [pc, #436]	; (80061a0 <HAL_RCC_OscConfig+0x2e8>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a6c      	ldr	r2, [pc, #432]	; (80061a0 <HAL_RCC_OscConfig+0x2e8>)
 8005fee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ff2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d013      	beq.n	8006024 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ffc:	f7fc ff44 	bl	8002e88 <HAL_GetTick>
 8006000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006002:	e008      	b.n	8006016 <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006004:	f7fc ff40 	bl	8002e88 <HAL_GetTick>
 8006008:	4602      	mov	r2, r0
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	2b64      	cmp	r3, #100	; 0x64
 8006010:	d901      	bls.n	8006016 <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 8006012:	2303      	movs	r3, #3
 8006014:	e2b6      	b.n	8006584 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006016:	4b62      	ldr	r3, [pc, #392]	; (80061a0 <HAL_RCC_OscConfig+0x2e8>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800601e:	2b00      	cmp	r3, #0
 8006020:	d0f0      	beq.n	8006004 <HAL_RCC_OscConfig+0x14c>
 8006022:	e014      	b.n	800604e <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006024:	f7fc ff30 	bl	8002e88 <HAL_GetTick>
 8006028:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800602a:	e008      	b.n	800603e <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800602c:	f7fc ff2c 	bl	8002e88 <HAL_GetTick>
 8006030:	4602      	mov	r2, r0
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	2b64      	cmp	r3, #100	; 0x64
 8006038:	d901      	bls.n	800603e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800603a:	2303      	movs	r3, #3
 800603c:	e2a2      	b.n	8006584 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800603e:	4b58      	ldr	r3, [pc, #352]	; (80061a0 <HAL_RCC_OscConfig+0x2e8>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006046:	2b00      	cmp	r3, #0
 8006048:	d1f0      	bne.n	800602c <HAL_RCC_OscConfig+0x174>
 800604a:	e000      	b.n	800604e <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800604c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 0302 	and.w	r3, r3, #2
 8006056:	2b00      	cmp	r3, #0
 8006058:	d079      	beq.n	800614e <HAL_RCC_OscConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	691b      	ldr	r3, [r3, #16]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d008      	beq.n	8006074 <HAL_RCC_OscConfig+0x1bc>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	691b      	ldr	r3, [r3, #16]
 8006066:	2b01      	cmp	r3, #1
 8006068:	d004      	beq.n	8006074 <HAL_RCC_OscConfig+0x1bc>
 800606a:	f240 11a1 	movw	r1, #417	; 0x1a1
 800606e:	484b      	ldr	r0, [pc, #300]	; (800619c <HAL_RCC_OscConfig+0x2e4>)
 8006070:	f7fc f8bb 	bl	80021ea <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	695b      	ldr	r3, [r3, #20]
 8006078:	2b1f      	cmp	r3, #31
 800607a:	d904      	bls.n	8006086 <HAL_RCC_OscConfig+0x1ce>
 800607c:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8006080:	4846      	ldr	r0, [pc, #280]	; (800619c <HAL_RCC_OscConfig+0x2e4>)
 8006082:	f7fc f8b2 	bl	80021ea <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006086:	4b46      	ldr	r3, [pc, #280]	; (80061a0 <HAL_RCC_OscConfig+0x2e8>)
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	f003 030c 	and.w	r3, r3, #12
 800608e:	2b00      	cmp	r3, #0
 8006090:	d00b      	beq.n	80060aa <HAL_RCC_OscConfig+0x1f2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006092:	4b43      	ldr	r3, [pc, #268]	; (80061a0 <HAL_RCC_OscConfig+0x2e8>)
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	f003 030c 	and.w	r3, r3, #12
 800609a:	2b08      	cmp	r3, #8
 800609c:	d11c      	bne.n	80060d8 <HAL_RCC_OscConfig+0x220>
 800609e:	4b40      	ldr	r3, [pc, #256]	; (80061a0 <HAL_RCC_OscConfig+0x2e8>)
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d116      	bne.n	80060d8 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060aa:	4b3d      	ldr	r3, [pc, #244]	; (80061a0 <HAL_RCC_OscConfig+0x2e8>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f003 0302 	and.w	r3, r3, #2
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d005      	beq.n	80060c2 <HAL_RCC_OscConfig+0x20a>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d001      	beq.n	80060c2 <HAL_RCC_OscConfig+0x20a>
      {
        return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e260      	b.n	8006584 <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060c2:	4b37      	ldr	r3, [pc, #220]	; (80061a0 <HAL_RCC_OscConfig+0x2e8>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	695b      	ldr	r3, [r3, #20]
 80060ce:	00db      	lsls	r3, r3, #3
 80060d0:	4933      	ldr	r1, [pc, #204]	; (80061a0 <HAL_RCC_OscConfig+0x2e8>)
 80060d2:	4313      	orrs	r3, r2
 80060d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060d6:	e03a      	b.n	800614e <HAL_RCC_OscConfig+0x296>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	691b      	ldr	r3, [r3, #16]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d020      	beq.n	8006122 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80060e0:	4b30      	ldr	r3, [pc, #192]	; (80061a4 <HAL_RCC_OscConfig+0x2ec>)
 80060e2:	2201      	movs	r2, #1
 80060e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060e6:	f7fc fecf 	bl	8002e88 <HAL_GetTick>
 80060ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060ec:	e008      	b.n	8006100 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060ee:	f7fc fecb 	bl	8002e88 <HAL_GetTick>
 80060f2:	4602      	mov	r2, r0
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	1ad3      	subs	r3, r2, r3
 80060f8:	2b02      	cmp	r3, #2
 80060fa:	d901      	bls.n	8006100 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80060fc:	2303      	movs	r3, #3
 80060fe:	e241      	b.n	8006584 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006100:	4b27      	ldr	r3, [pc, #156]	; (80061a0 <HAL_RCC_OscConfig+0x2e8>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f003 0302 	and.w	r3, r3, #2
 8006108:	2b00      	cmp	r3, #0
 800610a:	d0f0      	beq.n	80060ee <HAL_RCC_OscConfig+0x236>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800610c:	4b24      	ldr	r3, [pc, #144]	; (80061a0 <HAL_RCC_OscConfig+0x2e8>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	695b      	ldr	r3, [r3, #20]
 8006118:	00db      	lsls	r3, r3, #3
 800611a:	4921      	ldr	r1, [pc, #132]	; (80061a0 <HAL_RCC_OscConfig+0x2e8>)
 800611c:	4313      	orrs	r3, r2
 800611e:	600b      	str	r3, [r1, #0]
 8006120:	e015      	b.n	800614e <HAL_RCC_OscConfig+0x296>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006122:	4b20      	ldr	r3, [pc, #128]	; (80061a4 <HAL_RCC_OscConfig+0x2ec>)
 8006124:	2200      	movs	r2, #0
 8006126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006128:	f7fc feae 	bl	8002e88 <HAL_GetTick>
 800612c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800612e:	e008      	b.n	8006142 <HAL_RCC_OscConfig+0x28a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006130:	f7fc feaa 	bl	8002e88 <HAL_GetTick>
 8006134:	4602      	mov	r2, r0
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	1ad3      	subs	r3, r2, r3
 800613a:	2b02      	cmp	r3, #2
 800613c:	d901      	bls.n	8006142 <HAL_RCC_OscConfig+0x28a>
          {
            return HAL_TIMEOUT;
 800613e:	2303      	movs	r3, #3
 8006140:	e220      	b.n	8006584 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006142:	4b17      	ldr	r3, [pc, #92]	; (80061a0 <HAL_RCC_OscConfig+0x2e8>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f003 0302 	and.w	r3, r3, #2
 800614a:	2b00      	cmp	r3, #0
 800614c:	d1f0      	bne.n	8006130 <HAL_RCC_OscConfig+0x278>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f003 0308 	and.w	r3, r3, #8
 8006156:	2b00      	cmp	r3, #0
 8006158:	d048      	beq.n	80061ec <HAL_RCC_OscConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	699b      	ldr	r3, [r3, #24]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d008      	beq.n	8006174 <HAL_RCC_OscConfig+0x2bc>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	699b      	ldr	r3, [r3, #24]
 8006166:	2b01      	cmp	r3, #1
 8006168:	d004      	beq.n	8006174 <HAL_RCC_OscConfig+0x2bc>
 800616a:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 800616e:	480b      	ldr	r0, [pc, #44]	; (800619c <HAL_RCC_OscConfig+0x2e4>)
 8006170:	f7fc f83b 	bl	80021ea <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	699b      	ldr	r3, [r3, #24]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d021      	beq.n	80061c0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800617c:	4b0a      	ldr	r3, [pc, #40]	; (80061a8 <HAL_RCC_OscConfig+0x2f0>)
 800617e:	2201      	movs	r2, #1
 8006180:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006182:	f7fc fe81 	bl	8002e88 <HAL_GetTick>
 8006186:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006188:	e010      	b.n	80061ac <HAL_RCC_OscConfig+0x2f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800618a:	f7fc fe7d 	bl	8002e88 <HAL_GetTick>
 800618e:	4602      	mov	r2, r0
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	1ad3      	subs	r3, r2, r3
 8006194:	2b02      	cmp	r3, #2
 8006196:	d909      	bls.n	80061ac <HAL_RCC_OscConfig+0x2f4>
        {
          return HAL_TIMEOUT;
 8006198:	2303      	movs	r3, #3
 800619a:	e1f3      	b.n	8006584 <HAL_RCC_OscConfig+0x6cc>
 800619c:	0800c064 	.word	0x0800c064
 80061a0:	40021000 	.word	0x40021000
 80061a4:	42420000 	.word	0x42420000
 80061a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061ac:	4b67      	ldr	r3, [pc, #412]	; (800634c <HAL_RCC_OscConfig+0x494>)
 80061ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b0:	f003 0302 	and.w	r3, r3, #2
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d0e8      	beq.n	800618a <HAL_RCC_OscConfig+0x2d2>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80061b8:	2001      	movs	r0, #1
 80061ba:	f000 fc0f 	bl	80069dc <RCC_Delay>
 80061be:	e015      	b.n	80061ec <HAL_RCC_OscConfig+0x334>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061c0:	4b63      	ldr	r3, [pc, #396]	; (8006350 <HAL_RCC_OscConfig+0x498>)
 80061c2:	2200      	movs	r2, #0
 80061c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061c6:	f7fc fe5f 	bl	8002e88 <HAL_GetTick>
 80061ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061cc:	e008      	b.n	80061e0 <HAL_RCC_OscConfig+0x328>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061ce:	f7fc fe5b 	bl	8002e88 <HAL_GetTick>
 80061d2:	4602      	mov	r2, r0
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	1ad3      	subs	r3, r2, r3
 80061d8:	2b02      	cmp	r3, #2
 80061da:	d901      	bls.n	80061e0 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 80061dc:	2303      	movs	r3, #3
 80061de:	e1d1      	b.n	8006584 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061e0:	4b5a      	ldr	r3, [pc, #360]	; (800634c <HAL_RCC_OscConfig+0x494>)
 80061e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e4:	f003 0302 	and.w	r3, r3, #2
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d1f0      	bne.n	80061ce <HAL_RCC_OscConfig+0x316>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f003 0304 	and.w	r3, r3, #4
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	f000 80c0 	beq.w	800637a <HAL_RCC_OscConfig+0x4c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061fa:	2300      	movs	r3, #0
 80061fc:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d00c      	beq.n	8006220 <HAL_RCC_OscConfig+0x368>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	2b01      	cmp	r3, #1
 800620c:	d008      	beq.n	8006220 <HAL_RCC_OscConfig+0x368>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	68db      	ldr	r3, [r3, #12]
 8006212:	2b05      	cmp	r3, #5
 8006214:	d004      	beq.n	8006220 <HAL_RCC_OscConfig+0x368>
 8006216:	f240 2111 	movw	r1, #529	; 0x211
 800621a:	484e      	ldr	r0, [pc, #312]	; (8006354 <HAL_RCC_OscConfig+0x49c>)
 800621c:	f7fb ffe5 	bl	80021ea <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006220:	4b4a      	ldr	r3, [pc, #296]	; (800634c <HAL_RCC_OscConfig+0x494>)
 8006222:	69db      	ldr	r3, [r3, #28]
 8006224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006228:	2b00      	cmp	r3, #0
 800622a:	d10d      	bne.n	8006248 <HAL_RCC_OscConfig+0x390>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800622c:	4b47      	ldr	r3, [pc, #284]	; (800634c <HAL_RCC_OscConfig+0x494>)
 800622e:	69db      	ldr	r3, [r3, #28]
 8006230:	4a46      	ldr	r2, [pc, #280]	; (800634c <HAL_RCC_OscConfig+0x494>)
 8006232:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006236:	61d3      	str	r3, [r2, #28]
 8006238:	4b44      	ldr	r3, [pc, #272]	; (800634c <HAL_RCC_OscConfig+0x494>)
 800623a:	69db      	ldr	r3, [r3, #28]
 800623c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006240:	60bb      	str	r3, [r7, #8]
 8006242:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006244:	2301      	movs	r3, #1
 8006246:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006248:	4b43      	ldr	r3, [pc, #268]	; (8006358 <HAL_RCC_OscConfig+0x4a0>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006250:	2b00      	cmp	r3, #0
 8006252:	d118      	bne.n	8006286 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006254:	4b40      	ldr	r3, [pc, #256]	; (8006358 <HAL_RCC_OscConfig+0x4a0>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a3f      	ldr	r2, [pc, #252]	; (8006358 <HAL_RCC_OscConfig+0x4a0>)
 800625a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800625e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006260:	f7fc fe12 	bl	8002e88 <HAL_GetTick>
 8006264:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006266:	e008      	b.n	800627a <HAL_RCC_OscConfig+0x3c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006268:	f7fc fe0e 	bl	8002e88 <HAL_GetTick>
 800626c:	4602      	mov	r2, r0
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	1ad3      	subs	r3, r2, r3
 8006272:	2b64      	cmp	r3, #100	; 0x64
 8006274:	d901      	bls.n	800627a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8006276:	2303      	movs	r3, #3
 8006278:	e184      	b.n	8006584 <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800627a:	4b37      	ldr	r3, [pc, #220]	; (8006358 <HAL_RCC_OscConfig+0x4a0>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006282:	2b00      	cmp	r3, #0
 8006284:	d0f0      	beq.n	8006268 <HAL_RCC_OscConfig+0x3b0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	68db      	ldr	r3, [r3, #12]
 800628a:	2b01      	cmp	r3, #1
 800628c:	d106      	bne.n	800629c <HAL_RCC_OscConfig+0x3e4>
 800628e:	4b2f      	ldr	r3, [pc, #188]	; (800634c <HAL_RCC_OscConfig+0x494>)
 8006290:	6a1b      	ldr	r3, [r3, #32]
 8006292:	4a2e      	ldr	r2, [pc, #184]	; (800634c <HAL_RCC_OscConfig+0x494>)
 8006294:	f043 0301 	orr.w	r3, r3, #1
 8006298:	6213      	str	r3, [r2, #32]
 800629a:	e02d      	b.n	80062f8 <HAL_RCC_OscConfig+0x440>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	68db      	ldr	r3, [r3, #12]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d10c      	bne.n	80062be <HAL_RCC_OscConfig+0x406>
 80062a4:	4b29      	ldr	r3, [pc, #164]	; (800634c <HAL_RCC_OscConfig+0x494>)
 80062a6:	6a1b      	ldr	r3, [r3, #32]
 80062a8:	4a28      	ldr	r2, [pc, #160]	; (800634c <HAL_RCC_OscConfig+0x494>)
 80062aa:	f023 0301 	bic.w	r3, r3, #1
 80062ae:	6213      	str	r3, [r2, #32]
 80062b0:	4b26      	ldr	r3, [pc, #152]	; (800634c <HAL_RCC_OscConfig+0x494>)
 80062b2:	6a1b      	ldr	r3, [r3, #32]
 80062b4:	4a25      	ldr	r2, [pc, #148]	; (800634c <HAL_RCC_OscConfig+0x494>)
 80062b6:	f023 0304 	bic.w	r3, r3, #4
 80062ba:	6213      	str	r3, [r2, #32]
 80062bc:	e01c      	b.n	80062f8 <HAL_RCC_OscConfig+0x440>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	68db      	ldr	r3, [r3, #12]
 80062c2:	2b05      	cmp	r3, #5
 80062c4:	d10c      	bne.n	80062e0 <HAL_RCC_OscConfig+0x428>
 80062c6:	4b21      	ldr	r3, [pc, #132]	; (800634c <HAL_RCC_OscConfig+0x494>)
 80062c8:	6a1b      	ldr	r3, [r3, #32]
 80062ca:	4a20      	ldr	r2, [pc, #128]	; (800634c <HAL_RCC_OscConfig+0x494>)
 80062cc:	f043 0304 	orr.w	r3, r3, #4
 80062d0:	6213      	str	r3, [r2, #32]
 80062d2:	4b1e      	ldr	r3, [pc, #120]	; (800634c <HAL_RCC_OscConfig+0x494>)
 80062d4:	6a1b      	ldr	r3, [r3, #32]
 80062d6:	4a1d      	ldr	r2, [pc, #116]	; (800634c <HAL_RCC_OscConfig+0x494>)
 80062d8:	f043 0301 	orr.w	r3, r3, #1
 80062dc:	6213      	str	r3, [r2, #32]
 80062de:	e00b      	b.n	80062f8 <HAL_RCC_OscConfig+0x440>
 80062e0:	4b1a      	ldr	r3, [pc, #104]	; (800634c <HAL_RCC_OscConfig+0x494>)
 80062e2:	6a1b      	ldr	r3, [r3, #32]
 80062e4:	4a19      	ldr	r2, [pc, #100]	; (800634c <HAL_RCC_OscConfig+0x494>)
 80062e6:	f023 0301 	bic.w	r3, r3, #1
 80062ea:	6213      	str	r3, [r2, #32]
 80062ec:	4b17      	ldr	r3, [pc, #92]	; (800634c <HAL_RCC_OscConfig+0x494>)
 80062ee:	6a1b      	ldr	r3, [r3, #32]
 80062f0:	4a16      	ldr	r2, [pc, #88]	; (800634c <HAL_RCC_OscConfig+0x494>)
 80062f2:	f023 0304 	bic.w	r3, r3, #4
 80062f6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d015      	beq.n	800632c <HAL_RCC_OscConfig+0x474>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006300:	f7fc fdc2 	bl	8002e88 <HAL_GetTick>
 8006304:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006306:	e00a      	b.n	800631e <HAL_RCC_OscConfig+0x466>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006308:	f7fc fdbe 	bl	8002e88 <HAL_GetTick>
 800630c:	4602      	mov	r2, r0
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	1ad3      	subs	r3, r2, r3
 8006312:	f241 3288 	movw	r2, #5000	; 0x1388
 8006316:	4293      	cmp	r3, r2
 8006318:	d901      	bls.n	800631e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800631a:	2303      	movs	r3, #3
 800631c:	e132      	b.n	8006584 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800631e:	4b0b      	ldr	r3, [pc, #44]	; (800634c <HAL_RCC_OscConfig+0x494>)
 8006320:	6a1b      	ldr	r3, [r3, #32]
 8006322:	f003 0302 	and.w	r3, r3, #2
 8006326:	2b00      	cmp	r3, #0
 8006328:	d0ee      	beq.n	8006308 <HAL_RCC_OscConfig+0x450>
 800632a:	e01d      	b.n	8006368 <HAL_RCC_OscConfig+0x4b0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800632c:	f7fc fdac 	bl	8002e88 <HAL_GetTick>
 8006330:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006332:	e013      	b.n	800635c <HAL_RCC_OscConfig+0x4a4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006334:	f7fc fda8 	bl	8002e88 <HAL_GetTick>
 8006338:	4602      	mov	r2, r0
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	1ad3      	subs	r3, r2, r3
 800633e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006342:	4293      	cmp	r3, r2
 8006344:	d90a      	bls.n	800635c <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8006346:	2303      	movs	r3, #3
 8006348:	e11c      	b.n	8006584 <HAL_RCC_OscConfig+0x6cc>
 800634a:	bf00      	nop
 800634c:	40021000 	.word	0x40021000
 8006350:	42420480 	.word	0x42420480
 8006354:	0800c064 	.word	0x0800c064
 8006358:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800635c:	4b8b      	ldr	r3, [pc, #556]	; (800658c <HAL_RCC_OscConfig+0x6d4>)
 800635e:	6a1b      	ldr	r3, [r3, #32]
 8006360:	f003 0302 	and.w	r3, r3, #2
 8006364:	2b00      	cmp	r3, #0
 8006366:	d1e5      	bne.n	8006334 <HAL_RCC_OscConfig+0x47c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006368:	7dfb      	ldrb	r3, [r7, #23]
 800636a:	2b01      	cmp	r3, #1
 800636c:	d105      	bne.n	800637a <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800636e:	4b87      	ldr	r3, [pc, #540]	; (800658c <HAL_RCC_OscConfig+0x6d4>)
 8006370:	69db      	ldr	r3, [r3, #28]
 8006372:	4a86      	ldr	r2, [pc, #536]	; (800658c <HAL_RCC_OscConfig+0x6d4>)
 8006374:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006378:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	69db      	ldr	r3, [r3, #28]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d00c      	beq.n	800639c <HAL_RCC_OscConfig+0x4e4>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	69db      	ldr	r3, [r3, #28]
 8006386:	2b01      	cmp	r3, #1
 8006388:	d008      	beq.n	800639c <HAL_RCC_OscConfig+0x4e4>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	69db      	ldr	r3, [r3, #28]
 800638e:	2b02      	cmp	r3, #2
 8006390:	d004      	beq.n	800639c <HAL_RCC_OscConfig+0x4e4>
 8006392:	f240 21af 	movw	r1, #687	; 0x2af
 8006396:	487e      	ldr	r0, [pc, #504]	; (8006590 <HAL_RCC_OscConfig+0x6d8>)
 8006398:	f7fb ff27 	bl	80021ea <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	69db      	ldr	r3, [r3, #28]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	f000 80ee 	beq.w	8006582 <HAL_RCC_OscConfig+0x6ca>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80063a6:	4b79      	ldr	r3, [pc, #484]	; (800658c <HAL_RCC_OscConfig+0x6d4>)
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	f003 030c 	and.w	r3, r3, #12
 80063ae:	2b08      	cmp	r3, #8
 80063b0:	f000 80ce 	beq.w	8006550 <HAL_RCC_OscConfig+0x698>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	69db      	ldr	r3, [r3, #28]
 80063b8:	2b02      	cmp	r3, #2
 80063ba:	f040 80b2 	bne.w	8006522 <HAL_RCC_OscConfig+0x66a>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a1b      	ldr	r3, [r3, #32]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d009      	beq.n	80063da <HAL_RCC_OscConfig+0x522>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6a1b      	ldr	r3, [r3, #32]
 80063ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063ce:	d004      	beq.n	80063da <HAL_RCC_OscConfig+0x522>
 80063d0:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 80063d4:	486e      	ldr	r0, [pc, #440]	; (8006590 <HAL_RCC_OscConfig+0x6d8>)
 80063d6:	f7fb ff08 	bl	80021ea <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d04a      	beq.n	8006478 <HAL_RCC_OscConfig+0x5c0>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80063ea:	d045      	beq.n	8006478 <HAL_RCC_OscConfig+0x5c0>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80063f4:	d040      	beq.n	8006478 <HAL_RCC_OscConfig+0x5c0>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063fa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80063fe:	d03b      	beq.n	8006478 <HAL_RCC_OscConfig+0x5c0>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006404:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006408:	d036      	beq.n	8006478 <HAL_RCC_OscConfig+0x5c0>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8006412:	d031      	beq.n	8006478 <HAL_RCC_OscConfig+0x5c0>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006418:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800641c:	d02c      	beq.n	8006478 <HAL_RCC_OscConfig+0x5c0>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006422:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8006426:	d027      	beq.n	8006478 <HAL_RCC_OscConfig+0x5c0>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006430:	d022      	beq.n	8006478 <HAL_RCC_OscConfig+0x5c0>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006436:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800643a:	d01d      	beq.n	8006478 <HAL_RCC_OscConfig+0x5c0>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006440:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8006444:	d018      	beq.n	8006478 <HAL_RCC_OscConfig+0x5c0>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800644e:	d013      	beq.n	8006478 <HAL_RCC_OscConfig+0x5c0>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006454:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006458:	d00e      	beq.n	8006478 <HAL_RCC_OscConfig+0x5c0>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645e:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 8006462:	d009      	beq.n	8006478 <HAL_RCC_OscConfig+0x5c0>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006468:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 800646c:	d004      	beq.n	8006478 <HAL_RCC_OscConfig+0x5c0>
 800646e:	f240 21b9 	movw	r1, #697	; 0x2b9
 8006472:	4847      	ldr	r0, [pc, #284]	; (8006590 <HAL_RCC_OscConfig+0x6d8>)
 8006474:	f7fb feb9 	bl	80021ea <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006478:	4b46      	ldr	r3, [pc, #280]	; (8006594 <HAL_RCC_OscConfig+0x6dc>)
 800647a:	2200      	movs	r2, #0
 800647c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800647e:	f7fc fd03 	bl	8002e88 <HAL_GetTick>
 8006482:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006484:	e008      	b.n	8006498 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006486:	f7fc fcff 	bl	8002e88 <HAL_GetTick>
 800648a:	4602      	mov	r2, r0
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	1ad3      	subs	r3, r2, r3
 8006490:	2b02      	cmp	r3, #2
 8006492:	d901      	bls.n	8006498 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 8006494:	2303      	movs	r3, #3
 8006496:	e075      	b.n	8006584 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006498:	4b3c      	ldr	r3, [pc, #240]	; (800658c <HAL_RCC_OscConfig+0x6d4>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d1f0      	bne.n	8006486 <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6a1b      	ldr	r3, [r3, #32]
 80064a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064ac:	d116      	bne.n	80064dc <HAL_RCC_OscConfig+0x624>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d009      	beq.n	80064ca <HAL_RCC_OscConfig+0x612>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064be:	d004      	beq.n	80064ca <HAL_RCC_OscConfig+0x612>
 80064c0:	f240 21cf 	movw	r1, #719	; 0x2cf
 80064c4:	4832      	ldr	r0, [pc, #200]	; (8006590 <HAL_RCC_OscConfig+0x6d8>)
 80064c6:	f7fb fe90 	bl	80021ea <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80064ca:	4b30      	ldr	r3, [pc, #192]	; (800658c <HAL_RCC_OscConfig+0x6d4>)
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	492d      	ldr	r1, [pc, #180]	; (800658c <HAL_RCC_OscConfig+0x6d4>)
 80064d8:	4313      	orrs	r3, r2
 80064da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80064dc:	4b2b      	ldr	r3, [pc, #172]	; (800658c <HAL_RCC_OscConfig+0x6d4>)
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6a19      	ldr	r1, [r3, #32]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ec:	430b      	orrs	r3, r1
 80064ee:	4927      	ldr	r1, [pc, #156]	; (800658c <HAL_RCC_OscConfig+0x6d4>)
 80064f0:	4313      	orrs	r3, r2
 80064f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80064f4:	4b27      	ldr	r3, [pc, #156]	; (8006594 <HAL_RCC_OscConfig+0x6dc>)
 80064f6:	2201      	movs	r2, #1
 80064f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064fa:	f7fc fcc5 	bl	8002e88 <HAL_GetTick>
 80064fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006500:	e008      	b.n	8006514 <HAL_RCC_OscConfig+0x65c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006502:	f7fc fcc1 	bl	8002e88 <HAL_GetTick>
 8006506:	4602      	mov	r2, r0
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	1ad3      	subs	r3, r2, r3
 800650c:	2b02      	cmp	r3, #2
 800650e:	d901      	bls.n	8006514 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8006510:	2303      	movs	r3, #3
 8006512:	e037      	b.n	8006584 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006514:	4b1d      	ldr	r3, [pc, #116]	; (800658c <HAL_RCC_OscConfig+0x6d4>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800651c:	2b00      	cmp	r3, #0
 800651e:	d0f0      	beq.n	8006502 <HAL_RCC_OscConfig+0x64a>
 8006520:	e02f      	b.n	8006582 <HAL_RCC_OscConfig+0x6ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006522:	4b1c      	ldr	r3, [pc, #112]	; (8006594 <HAL_RCC_OscConfig+0x6dc>)
 8006524:	2200      	movs	r2, #0
 8006526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006528:	f7fc fcae 	bl	8002e88 <HAL_GetTick>
 800652c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800652e:	e008      	b.n	8006542 <HAL_RCC_OscConfig+0x68a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006530:	f7fc fcaa 	bl	8002e88 <HAL_GetTick>
 8006534:	4602      	mov	r2, r0
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	1ad3      	subs	r3, r2, r3
 800653a:	2b02      	cmp	r3, #2
 800653c:	d901      	bls.n	8006542 <HAL_RCC_OscConfig+0x68a>
          {
            return HAL_TIMEOUT;
 800653e:	2303      	movs	r3, #3
 8006540:	e020      	b.n	8006584 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006542:	4b12      	ldr	r3, [pc, #72]	; (800658c <HAL_RCC_OscConfig+0x6d4>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800654a:	2b00      	cmp	r3, #0
 800654c:	d1f0      	bne.n	8006530 <HAL_RCC_OscConfig+0x678>
 800654e:	e018      	b.n	8006582 <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	69db      	ldr	r3, [r3, #28]
 8006554:	2b01      	cmp	r3, #1
 8006556:	d101      	bne.n	800655c <HAL_RCC_OscConfig+0x6a4>
      {
        return HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	e013      	b.n	8006584 <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800655c:	4b0b      	ldr	r3, [pc, #44]	; (800658c <HAL_RCC_OscConfig+0x6d4>)
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6a1b      	ldr	r3, [r3, #32]
 800656c:	429a      	cmp	r2, r3
 800656e:	d106      	bne.n	800657e <HAL_RCC_OscConfig+0x6c6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800657a:	429a      	cmp	r2, r3
 800657c:	d001      	beq.n	8006582 <HAL_RCC_OscConfig+0x6ca>
        {
          return HAL_ERROR;
 800657e:	2301      	movs	r3, #1
 8006580:	e000      	b.n	8006584 <HAL_RCC_OscConfig+0x6cc>
        }
      }
    }
  }

  return HAL_OK;
 8006582:	2300      	movs	r3, #0
}
 8006584:	4618      	mov	r0, r3
 8006586:	3718      	adds	r7, #24
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}
 800658c:	40021000 	.word	0x40021000
 8006590:	0800c064 	.word	0x0800c064
 8006594:	42420060 	.word	0x42420060

08006598 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b084      	sub	sp, #16
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d101      	bne.n	80065ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80065a8:	2301      	movs	r3, #1
 80065aa:	e176      	b.n	800689a <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f003 0301 	and.w	r3, r3, #1
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d116      	bne.n	80065e6 <HAL_RCC_ClockConfig+0x4e>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f003 0302 	and.w	r3, r3, #2
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d110      	bne.n	80065e6 <HAL_RCC_ClockConfig+0x4e>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f003 0304 	and.w	r3, r3, #4
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d10a      	bne.n	80065e6 <HAL_RCC_ClockConfig+0x4e>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f003 0308 	and.w	r3, r3, #8
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d104      	bne.n	80065e6 <HAL_RCC_ClockConfig+0x4e>
 80065dc:	f44f 714e 	mov.w	r1, #824	; 0x338
 80065e0:	4874      	ldr	r0, [pc, #464]	; (80067b4 <HAL_RCC_ClockConfig+0x21c>)
 80065e2:	f7fb fe02 	bl	80021ea <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d00a      	beq.n	8006602 <HAL_RCC_ClockConfig+0x6a>
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d007      	beq.n	8006602 <HAL_RCC_ClockConfig+0x6a>
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	2b02      	cmp	r3, #2
 80065f6:	d004      	beq.n	8006602 <HAL_RCC_ClockConfig+0x6a>
 80065f8:	f240 3139 	movw	r1, #825	; 0x339
 80065fc:	486d      	ldr	r0, [pc, #436]	; (80067b4 <HAL_RCC_ClockConfig+0x21c>)
 80065fe:	f7fb fdf4 	bl	80021ea <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006602:	4b6d      	ldr	r3, [pc, #436]	; (80067b8 <HAL_RCC_ClockConfig+0x220>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f003 0307 	and.w	r3, r3, #7
 800660a:	683a      	ldr	r2, [r7, #0]
 800660c:	429a      	cmp	r2, r3
 800660e:	d910      	bls.n	8006632 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006610:	4b69      	ldr	r3, [pc, #420]	; (80067b8 <HAL_RCC_ClockConfig+0x220>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f023 0207 	bic.w	r2, r3, #7
 8006618:	4967      	ldr	r1, [pc, #412]	; (80067b8 <HAL_RCC_ClockConfig+0x220>)
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	4313      	orrs	r3, r2
 800661e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006620:	4b65      	ldr	r3, [pc, #404]	; (80067b8 <HAL_RCC_ClockConfig+0x220>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 0307 	and.w	r3, r3, #7
 8006628:	683a      	ldr	r2, [r7, #0]
 800662a:	429a      	cmp	r2, r3
 800662c:	d001      	beq.n	8006632 <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 800662e:	2301      	movs	r3, #1
 8006630:	e133      	b.n	800689a <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f003 0302 	and.w	r3, r3, #2
 800663a:	2b00      	cmp	r3, #0
 800663c:	d049      	beq.n	80066d2 <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 0304 	and.w	r3, r3, #4
 8006646:	2b00      	cmp	r3, #0
 8006648:	d005      	beq.n	8006656 <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800664a:	4b5c      	ldr	r3, [pc, #368]	; (80067bc <HAL_RCC_ClockConfig+0x224>)
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	4a5b      	ldr	r2, [pc, #364]	; (80067bc <HAL_RCC_ClockConfig+0x224>)
 8006650:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006654:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f003 0308 	and.w	r3, r3, #8
 800665e:	2b00      	cmp	r3, #0
 8006660:	d005      	beq.n	800666e <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006662:	4b56      	ldr	r3, [pc, #344]	; (80067bc <HAL_RCC_ClockConfig+0x224>)
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	4a55      	ldr	r2, [pc, #340]	; (80067bc <HAL_RCC_ClockConfig+0x224>)
 8006668:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800666c:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d024      	beq.n	80066c0 <HAL_RCC_ClockConfig+0x128>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	2b80      	cmp	r3, #128	; 0x80
 800667c:	d020      	beq.n	80066c0 <HAL_RCC_ClockConfig+0x128>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	2b90      	cmp	r3, #144	; 0x90
 8006684:	d01c      	beq.n	80066c0 <HAL_RCC_ClockConfig+0x128>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	2ba0      	cmp	r3, #160	; 0xa0
 800668c:	d018      	beq.n	80066c0 <HAL_RCC_ClockConfig+0x128>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	2bb0      	cmp	r3, #176	; 0xb0
 8006694:	d014      	beq.n	80066c0 <HAL_RCC_ClockConfig+0x128>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	2bc0      	cmp	r3, #192	; 0xc0
 800669c:	d010      	beq.n	80066c0 <HAL_RCC_ClockConfig+0x128>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	2bd0      	cmp	r3, #208	; 0xd0
 80066a4:	d00c      	beq.n	80066c0 <HAL_RCC_ClockConfig+0x128>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	2be0      	cmp	r3, #224	; 0xe0
 80066ac:	d008      	beq.n	80066c0 <HAL_RCC_ClockConfig+0x128>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	2bf0      	cmp	r3, #240	; 0xf0
 80066b4:	d004      	beq.n	80066c0 <HAL_RCC_ClockConfig+0x128>
 80066b6:	f240 315f 	movw	r1, #863	; 0x35f
 80066ba:	483e      	ldr	r0, [pc, #248]	; (80067b4 <HAL_RCC_ClockConfig+0x21c>)
 80066bc:	f7fb fd95 	bl	80021ea <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066c0:	4b3e      	ldr	r3, [pc, #248]	; (80067bc <HAL_RCC_ClockConfig+0x224>)
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	493b      	ldr	r1, [pc, #236]	; (80067bc <HAL_RCC_ClockConfig+0x224>)
 80066ce:	4313      	orrs	r3, r2
 80066d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f003 0301 	and.w	r3, r3, #1
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d051      	beq.n	8006782 <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d00c      	beq.n	8006700 <HAL_RCC_ClockConfig+0x168>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d008      	beq.n	8006700 <HAL_RCC_ClockConfig+0x168>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	2b02      	cmp	r3, #2
 80066f4:	d004      	beq.n	8006700 <HAL_RCC_ClockConfig+0x168>
 80066f6:	f240 3166 	movw	r1, #870	; 0x366
 80066fa:	482e      	ldr	r0, [pc, #184]	; (80067b4 <HAL_RCC_ClockConfig+0x21c>)
 80066fc:	f7fb fd75 	bl	80021ea <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	2b01      	cmp	r3, #1
 8006706:	d107      	bne.n	8006718 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006708:	4b2c      	ldr	r3, [pc, #176]	; (80067bc <HAL_RCC_ClockConfig+0x224>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006710:	2b00      	cmp	r3, #0
 8006712:	d115      	bne.n	8006740 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	e0c0      	b.n	800689a <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	2b02      	cmp	r3, #2
 800671e:	d107      	bne.n	8006730 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006720:	4b26      	ldr	r3, [pc, #152]	; (80067bc <HAL_RCC_ClockConfig+0x224>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006728:	2b00      	cmp	r3, #0
 800672a:	d109      	bne.n	8006740 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	e0b4      	b.n	800689a <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006730:	4b22      	ldr	r3, [pc, #136]	; (80067bc <HAL_RCC_ClockConfig+0x224>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f003 0302 	and.w	r3, r3, #2
 8006738:	2b00      	cmp	r3, #0
 800673a:	d101      	bne.n	8006740 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 800673c:	2301      	movs	r3, #1
 800673e:	e0ac      	b.n	800689a <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006740:	4b1e      	ldr	r3, [pc, #120]	; (80067bc <HAL_RCC_ClockConfig+0x224>)
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	f023 0203 	bic.w	r2, r3, #3
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	491b      	ldr	r1, [pc, #108]	; (80067bc <HAL_RCC_ClockConfig+0x224>)
 800674e:	4313      	orrs	r3, r2
 8006750:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006752:	f7fc fb99 	bl	8002e88 <HAL_GetTick>
 8006756:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006758:	e00a      	b.n	8006770 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800675a:	f7fc fb95 	bl	8002e88 <HAL_GetTick>
 800675e:	4602      	mov	r2, r0
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	1ad3      	subs	r3, r2, r3
 8006764:	f241 3288 	movw	r2, #5000	; 0x1388
 8006768:	4293      	cmp	r3, r2
 800676a:	d901      	bls.n	8006770 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 800676c:	2303      	movs	r3, #3
 800676e:	e094      	b.n	800689a <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006770:	4b12      	ldr	r3, [pc, #72]	; (80067bc <HAL_RCC_ClockConfig+0x224>)
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	f003 020c 	and.w	r2, r3, #12
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	429a      	cmp	r2, r3
 8006780:	d1eb      	bne.n	800675a <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006782:	4b0d      	ldr	r3, [pc, #52]	; (80067b8 <HAL_RCC_ClockConfig+0x220>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f003 0307 	and.w	r3, r3, #7
 800678a:	683a      	ldr	r2, [r7, #0]
 800678c:	429a      	cmp	r2, r3
 800678e:	d217      	bcs.n	80067c0 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006790:	4b09      	ldr	r3, [pc, #36]	; (80067b8 <HAL_RCC_ClockConfig+0x220>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f023 0207 	bic.w	r2, r3, #7
 8006798:	4907      	ldr	r1, [pc, #28]	; (80067b8 <HAL_RCC_ClockConfig+0x220>)
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	4313      	orrs	r3, r2
 800679e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067a0:	4b05      	ldr	r3, [pc, #20]	; (80067b8 <HAL_RCC_ClockConfig+0x220>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f003 0307 	and.w	r3, r3, #7
 80067a8:	683a      	ldr	r2, [r7, #0]
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d008      	beq.n	80067c0 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	e073      	b.n	800689a <HAL_RCC_ClockConfig+0x302>
 80067b2:	bf00      	nop
 80067b4:	0800c064 	.word	0x0800c064
 80067b8:	40022000 	.word	0x40022000
 80067bc:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f003 0304 	and.w	r3, r3, #4
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d025      	beq.n	8006818 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	68db      	ldr	r3, [r3, #12]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d018      	beq.n	8006806 <HAL_RCC_ClockConfig+0x26e>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	68db      	ldr	r3, [r3, #12]
 80067d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067dc:	d013      	beq.n	8006806 <HAL_RCC_ClockConfig+0x26e>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	68db      	ldr	r3, [r3, #12]
 80067e2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80067e6:	d00e      	beq.n	8006806 <HAL_RCC_ClockConfig+0x26e>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80067f0:	d009      	beq.n	8006806 <HAL_RCC_ClockConfig+0x26e>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	68db      	ldr	r3, [r3, #12]
 80067f6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80067fa:	d004      	beq.n	8006806 <HAL_RCC_ClockConfig+0x26e>
 80067fc:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8006800:	4828      	ldr	r0, [pc, #160]	; (80068a4 <HAL_RCC_ClockConfig+0x30c>)
 8006802:	f7fb fcf2 	bl	80021ea <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006806:	4b28      	ldr	r3, [pc, #160]	; (80068a8 <HAL_RCC_ClockConfig+0x310>)
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	4925      	ldr	r1, [pc, #148]	; (80068a8 <HAL_RCC_ClockConfig+0x310>)
 8006814:	4313      	orrs	r3, r2
 8006816:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f003 0308 	and.w	r3, r3, #8
 8006820:	2b00      	cmp	r3, #0
 8006822:	d026      	beq.n	8006872 <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	691b      	ldr	r3, [r3, #16]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d018      	beq.n	800685e <HAL_RCC_ClockConfig+0x2c6>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	691b      	ldr	r3, [r3, #16]
 8006830:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006834:	d013      	beq.n	800685e <HAL_RCC_ClockConfig+0x2c6>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	691b      	ldr	r3, [r3, #16]
 800683a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800683e:	d00e      	beq.n	800685e <HAL_RCC_ClockConfig+0x2c6>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	691b      	ldr	r3, [r3, #16]
 8006844:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006848:	d009      	beq.n	800685e <HAL_RCC_ClockConfig+0x2c6>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	691b      	ldr	r3, [r3, #16]
 800684e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006852:	d004      	beq.n	800685e <HAL_RCC_ClockConfig+0x2c6>
 8006854:	f240 31ab 	movw	r1, #939	; 0x3ab
 8006858:	4812      	ldr	r0, [pc, #72]	; (80068a4 <HAL_RCC_ClockConfig+0x30c>)
 800685a:	f7fb fcc6 	bl	80021ea <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800685e:	4b12      	ldr	r3, [pc, #72]	; (80068a8 <HAL_RCC_ClockConfig+0x310>)
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	691b      	ldr	r3, [r3, #16]
 800686a:	00db      	lsls	r3, r3, #3
 800686c:	490e      	ldr	r1, [pc, #56]	; (80068a8 <HAL_RCC_ClockConfig+0x310>)
 800686e:	4313      	orrs	r3, r2
 8006870:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006872:	f000 f821 	bl	80068b8 <HAL_RCC_GetSysClockFreq>
 8006876:	4602      	mov	r2, r0
 8006878:	4b0b      	ldr	r3, [pc, #44]	; (80068a8 <HAL_RCC_ClockConfig+0x310>)
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	091b      	lsrs	r3, r3, #4
 800687e:	f003 030f 	and.w	r3, r3, #15
 8006882:	490a      	ldr	r1, [pc, #40]	; (80068ac <HAL_RCC_ClockConfig+0x314>)
 8006884:	5ccb      	ldrb	r3, [r1, r3]
 8006886:	fa22 f303 	lsr.w	r3, r2, r3
 800688a:	4a09      	ldr	r2, [pc, #36]	; (80068b0 <HAL_RCC_ClockConfig+0x318>)
 800688c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800688e:	4b09      	ldr	r3, [pc, #36]	; (80068b4 <HAL_RCC_ClockConfig+0x31c>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4618      	mov	r0, r3
 8006894:	f7fc fab6 	bl	8002e04 <HAL_InitTick>

  return HAL_OK;
 8006898:	2300      	movs	r3, #0
}
 800689a:	4618      	mov	r0, r3
 800689c:	3710      	adds	r7, #16
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}
 80068a2:	bf00      	nop
 80068a4:	0800c064 	.word	0x0800c064
 80068a8:	40021000 	.word	0x40021000
 80068ac:	0800c1ec 	.word	0x0800c1ec
 80068b0:	2000000c 	.word	0x2000000c
 80068b4:	20000014 	.word	0x20000014

080068b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068b8:	b490      	push	{r4, r7}
 80068ba:	b08a      	sub	sp, #40	; 0x28
 80068bc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80068be:	4b2a      	ldr	r3, [pc, #168]	; (8006968 <HAL_RCC_GetSysClockFreq+0xb0>)
 80068c0:	1d3c      	adds	r4, r7, #4
 80068c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80068c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80068c8:	f240 2301 	movw	r3, #513	; 0x201
 80068cc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80068ce:	2300      	movs	r3, #0
 80068d0:	61fb      	str	r3, [r7, #28]
 80068d2:	2300      	movs	r3, #0
 80068d4:	61bb      	str	r3, [r7, #24]
 80068d6:	2300      	movs	r3, #0
 80068d8:	627b      	str	r3, [r7, #36]	; 0x24
 80068da:	2300      	movs	r3, #0
 80068dc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80068de:	2300      	movs	r3, #0
 80068e0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80068e2:	4b22      	ldr	r3, [pc, #136]	; (800696c <HAL_RCC_GetSysClockFreq+0xb4>)
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80068e8:	69fb      	ldr	r3, [r7, #28]
 80068ea:	f003 030c 	and.w	r3, r3, #12
 80068ee:	2b04      	cmp	r3, #4
 80068f0:	d002      	beq.n	80068f8 <HAL_RCC_GetSysClockFreq+0x40>
 80068f2:	2b08      	cmp	r3, #8
 80068f4:	d003      	beq.n	80068fe <HAL_RCC_GetSysClockFreq+0x46>
 80068f6:	e02d      	b.n	8006954 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80068f8:	4b1d      	ldr	r3, [pc, #116]	; (8006970 <HAL_RCC_GetSysClockFreq+0xb8>)
 80068fa:	623b      	str	r3, [r7, #32]
      break;
 80068fc:	e02d      	b.n	800695a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80068fe:	69fb      	ldr	r3, [r7, #28]
 8006900:	0c9b      	lsrs	r3, r3, #18
 8006902:	f003 030f 	and.w	r3, r3, #15
 8006906:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800690a:	4413      	add	r3, r2
 800690c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006910:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006912:	69fb      	ldr	r3, [r7, #28]
 8006914:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006918:	2b00      	cmp	r3, #0
 800691a:	d013      	beq.n	8006944 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800691c:	4b13      	ldr	r3, [pc, #76]	; (800696c <HAL_RCC_GetSysClockFreq+0xb4>)
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	0c5b      	lsrs	r3, r3, #17
 8006922:	f003 0301 	and.w	r3, r3, #1
 8006926:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800692a:	4413      	add	r3, r2
 800692c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006930:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	4a0e      	ldr	r2, [pc, #56]	; (8006970 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006936:	fb02 f203 	mul.w	r2, r2, r3
 800693a:	69bb      	ldr	r3, [r7, #24]
 800693c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006940:	627b      	str	r3, [r7, #36]	; 0x24
 8006942:	e004      	b.n	800694e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	4a0b      	ldr	r2, [pc, #44]	; (8006974 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006948:	fb02 f303 	mul.w	r3, r2, r3
 800694c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800694e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006950:	623b      	str	r3, [r7, #32]
      break;
 8006952:	e002      	b.n	800695a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006954:	4b06      	ldr	r3, [pc, #24]	; (8006970 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006956:	623b      	str	r3, [r7, #32]
      break;
 8006958:	bf00      	nop
    }
  }
  return sysclockfreq;
 800695a:	6a3b      	ldr	r3, [r7, #32]
}
 800695c:	4618      	mov	r0, r3
 800695e:	3728      	adds	r7, #40	; 0x28
 8006960:	46bd      	mov	sp, r7
 8006962:	bc90      	pop	{r4, r7}
 8006964:	4770      	bx	lr
 8006966:	bf00      	nop
 8006968:	0800c09c 	.word	0x0800c09c
 800696c:	40021000 	.word	0x40021000
 8006970:	007a1200 	.word	0x007a1200
 8006974:	003d0900 	.word	0x003d0900

08006978 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006978:	b480      	push	{r7}
 800697a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800697c:	4b02      	ldr	r3, [pc, #8]	; (8006988 <HAL_RCC_GetHCLKFreq+0x10>)
 800697e:	681b      	ldr	r3, [r3, #0]
}
 8006980:	4618      	mov	r0, r3
 8006982:	46bd      	mov	sp, r7
 8006984:	bc80      	pop	{r7}
 8006986:	4770      	bx	lr
 8006988:	2000000c 	.word	0x2000000c

0800698c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006990:	f7ff fff2 	bl	8006978 <HAL_RCC_GetHCLKFreq>
 8006994:	4602      	mov	r2, r0
 8006996:	4b05      	ldr	r3, [pc, #20]	; (80069ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	0a1b      	lsrs	r3, r3, #8
 800699c:	f003 0307 	and.w	r3, r3, #7
 80069a0:	4903      	ldr	r1, [pc, #12]	; (80069b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80069a2:	5ccb      	ldrb	r3, [r1, r3]
 80069a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	bd80      	pop	{r7, pc}
 80069ac:	40021000 	.word	0x40021000
 80069b0:	0800c1fc 	.word	0x0800c1fc

080069b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80069b8:	f7ff ffde 	bl	8006978 <HAL_RCC_GetHCLKFreq>
 80069bc:	4602      	mov	r2, r0
 80069be:	4b05      	ldr	r3, [pc, #20]	; (80069d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	0adb      	lsrs	r3, r3, #11
 80069c4:	f003 0307 	and.w	r3, r3, #7
 80069c8:	4903      	ldr	r1, [pc, #12]	; (80069d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80069ca:	5ccb      	ldrb	r3, [r1, r3]
 80069cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	bd80      	pop	{r7, pc}
 80069d4:	40021000 	.word	0x40021000
 80069d8:	0800c1fc 	.word	0x0800c1fc

080069dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80069dc:	b480      	push	{r7}
 80069de:	b085      	sub	sp, #20
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80069e4:	4b0a      	ldr	r3, [pc, #40]	; (8006a10 <RCC_Delay+0x34>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a0a      	ldr	r2, [pc, #40]	; (8006a14 <RCC_Delay+0x38>)
 80069ea:	fba2 2303 	umull	r2, r3, r2, r3
 80069ee:	0a5b      	lsrs	r3, r3, #9
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	fb02 f303 	mul.w	r3, r2, r3
 80069f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80069f8:	bf00      	nop
  }
  while (Delay --);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	1e5a      	subs	r2, r3, #1
 80069fe:	60fa      	str	r2, [r7, #12]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d1f9      	bne.n	80069f8 <RCC_Delay+0x1c>
}
 8006a04:	bf00      	nop
 8006a06:	bf00      	nop
 8006a08:	3714      	adds	r7, #20
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bc80      	pop	{r7}
 8006a0e:	4770      	bx	lr
 8006a10:	2000000c 	.word	0x2000000c
 8006a14:	10624dd3 	.word	0x10624dd3

08006a18 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b086      	sub	sp, #24
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006a20:	2300      	movs	r3, #0
 8006a22:	613b      	str	r3, [r7, #16]
 8006a24:	2300      	movs	r3, #0
 8006a26:	60fb      	str	r3, [r7, #12]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f003 0301 	and.w	r3, r3, #1
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d11b      	bne.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x54>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f003 0302 	and.w	r3, r3, #2
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d115      	bne.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x54>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f003 0304 	and.w	r3, r3, #4
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d10f      	bne.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x54>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f003 0308 	and.w	r3, r3, #8
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d109      	bne.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x54>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f003 0310 	and.w	r3, r3, #16
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d103      	bne.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x54>
 8006a64:	216c      	movs	r1, #108	; 0x6c
 8006a66:	4873      	ldr	r0, [pc, #460]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8006a68:	f7fb fbbf 	bl	80021ea <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f003 0301 	and.w	r3, r3, #1
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	f000 8095 	beq.w	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d012      	beq.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a8a:	d00d      	beq.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a94:	d008      	beq.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a9e:	d003      	beq.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006aa0:	2172      	movs	r1, #114	; 0x72
 8006aa2:	4864      	ldr	r0, [pc, #400]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8006aa4:	f7fb fba1 	bl	80021ea <assert_failed>

    FlagStatus       pwrclkchanged = RESET;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006aac:	4b62      	ldr	r3, [pc, #392]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8006aae:	69db      	ldr	r3, [r3, #28]
 8006ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d10d      	bne.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ab8:	4b5f      	ldr	r3, [pc, #380]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8006aba:	69db      	ldr	r3, [r3, #28]
 8006abc:	4a5e      	ldr	r2, [pc, #376]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8006abe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ac2:	61d3      	str	r3, [r2, #28]
 8006ac4:	4b5c      	ldr	r3, [pc, #368]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8006ac6:	69db      	ldr	r3, [r3, #28]
 8006ac8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006acc:	60bb      	str	r3, [r7, #8]
 8006ace:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ad4:	4b59      	ldr	r3, [pc, #356]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d118      	bne.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0xfa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006ae0:	4b56      	ldr	r3, [pc, #344]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a55      	ldr	r2, [pc, #340]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8006ae6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006aea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006aec:	f7fc f9cc 	bl	8002e88 <HAL_GetTick>
 8006af0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006af2:	e008      	b.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0xee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006af4:	f7fc f9c8 	bl	8002e88 <HAL_GetTick>
 8006af8:	4602      	mov	r2, r0
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	1ad3      	subs	r3, r2, r3
 8006afe:	2b64      	cmp	r3, #100	; 0x64
 8006b00:	d901      	bls.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0xee>
        {
          return HAL_TIMEOUT;
 8006b02:	2303      	movs	r3, #3
 8006b04:	e092      	b.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x214>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b06:	4b4d      	ldr	r3, [pc, #308]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d0f0      	beq.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0xdc>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006b12:	4b49      	ldr	r3, [pc, #292]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8006b14:	6a1b      	ldr	r3, [r3, #32]
 8006b16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b1a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d02e      	beq.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b2a:	68fa      	ldr	r2, [r7, #12]
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d027      	beq.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006b30:	4b41      	ldr	r3, [pc, #260]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8006b32:	6a1b      	ldr	r3, [r3, #32]
 8006b34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b38:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006b3a:	4b41      	ldr	r3, [pc, #260]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006b40:	4b3f      	ldr	r3, [pc, #252]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8006b42:	2200      	movs	r2, #0
 8006b44:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006b46:	4a3c      	ldr	r2, [pc, #240]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f003 0301 	and.w	r3, r3, #1
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d014      	beq.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b56:	f7fc f997 	bl	8002e88 <HAL_GetTick>
 8006b5a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b5c:	e00a      	b.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x15c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b5e:	f7fc f993 	bl	8002e88 <HAL_GetTick>
 8006b62:	4602      	mov	r2, r0
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	1ad3      	subs	r3, r2, r3
 8006b68:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d901      	bls.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          {
            return HAL_TIMEOUT;
 8006b70:	2303      	movs	r3, #3
 8006b72:	e05b      	b.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x214>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b74:	4b30      	ldr	r3, [pc, #192]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8006b76:	6a1b      	ldr	r3, [r3, #32]
 8006b78:	f003 0302 	and.w	r3, r3, #2
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d0ee      	beq.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x146>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b80:	4b2d      	ldr	r3, [pc, #180]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8006b82:	6a1b      	ldr	r3, [r3, #32]
 8006b84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	492a      	ldr	r1, [pc, #168]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006b92:	7dfb      	ldrb	r3, [r7, #23]
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d105      	bne.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b98:	4b27      	ldr	r3, [pc, #156]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8006b9a:	69db      	ldr	r3, [r3, #28]
 8006b9c:	4a26      	ldr	r2, [pc, #152]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8006b9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ba2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f003 0302 	and.w	r3, r3, #2
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d01f      	beq.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d012      	beq.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	689b      	ldr	r3, [r3, #8]
 8006bbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006bc0:	d00d      	beq.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bca:	d008      	beq.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006bd4:	d003      	beq.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8006bd6:	21b9      	movs	r1, #185	; 0xb9
 8006bd8:	4816      	ldr	r0, [pc, #88]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8006bda:	f7fb fb06 	bl	80021ea <assert_failed>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006bde:	4b16      	ldr	r3, [pc, #88]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	4913      	ldr	r1, [pc, #76]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8006bec:	4313      	orrs	r3, r2
 8006bee:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f003 0310 	and.w	r3, r3, #16
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d016      	beq.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	695b      	ldr	r3, [r3, #20]
 8006c00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c04:	d008      	beq.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	695b      	ldr	r3, [r3, #20]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d004      	beq.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006c0e:	f240 1115 	movw	r1, #277	; 0x115
 8006c12:	4808      	ldr	r0, [pc, #32]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8006c14:	f7fb fae9 	bl	80021ea <assert_failed>

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006c18:	4b07      	ldr	r3, [pc, #28]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	695b      	ldr	r3, [r3, #20]
 8006c24:	4904      	ldr	r1, [pc, #16]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8006c26:	4313      	orrs	r3, r2
 8006c28:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006c2a:	2300      	movs	r3, #0
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3718      	adds	r7, #24
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}
 8006c34:	0800c0ac 	.word	0x0800c0ac
 8006c38:	40021000 	.word	0x40021000
 8006c3c:	40007000 	.word	0x40007000
 8006c40:	42420440 	.word	0x42420440

08006c44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b082      	sub	sp, #8
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d101      	bne.n	8006c56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
 8006c54:	e175      	b.n	8006f42 <HAL_SPI_Init+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a6e      	ldr	r2, [pc, #440]	; (8006e14 <HAL_SPI_Init+0x1d0>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d00e      	beq.n	8006c7e <HAL_SPI_Init+0x3a>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a6c      	ldr	r2, [pc, #432]	; (8006e18 <HAL_SPI_Init+0x1d4>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d009      	beq.n	8006c7e <HAL_SPI_Init+0x3a>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a6b      	ldr	r2, [pc, #428]	; (8006e1c <HAL_SPI_Init+0x1d8>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d004      	beq.n	8006c7e <HAL_SPI_Init+0x3a>
 8006c74:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8006c78:	4869      	ldr	r0, [pc, #420]	; (8006e20 <HAL_SPI_Init+0x1dc>)
 8006c7a:	f7fb fab6 	bl	80021ea <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d009      	beq.n	8006c9a <HAL_SPI_Init+0x56>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c8e:	d004      	beq.n	8006c9a <HAL_SPI_Init+0x56>
 8006c90:	f240 1159 	movw	r1, #345	; 0x159
 8006c94:	4862      	ldr	r0, [pc, #392]	; (8006e20 <HAL_SPI_Init+0x1dc>)
 8006c96:	f7fb faa8 	bl	80021ea <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d00e      	beq.n	8006cc0 <HAL_SPI_Init+0x7c>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006caa:	d009      	beq.n	8006cc0 <HAL_SPI_Init+0x7c>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cb4:	d004      	beq.n	8006cc0 <HAL_SPI_Init+0x7c>
 8006cb6:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 8006cba:	4859      	ldr	r0, [pc, #356]	; (8006e20 <HAL_SPI_Init+0x1dc>)
 8006cbc:	f7fb fa95 	bl	80021ea <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	68db      	ldr	r3, [r3, #12]
 8006cc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cc8:	d008      	beq.n	8006cdc <HAL_SPI_Init+0x98>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	68db      	ldr	r3, [r3, #12]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d004      	beq.n	8006cdc <HAL_SPI_Init+0x98>
 8006cd2:	f240 115b 	movw	r1, #347	; 0x15b
 8006cd6:	4852      	ldr	r0, [pc, #328]	; (8006e20 <HAL_SPI_Init+0x1dc>)
 8006cd8:	f7fb fa87 	bl	80021ea <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	699b      	ldr	r3, [r3, #24]
 8006ce0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ce4:	d00d      	beq.n	8006d02 <HAL_SPI_Init+0xbe>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	699b      	ldr	r3, [r3, #24]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d009      	beq.n	8006d02 <HAL_SPI_Init+0xbe>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	699b      	ldr	r3, [r3, #24]
 8006cf2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006cf6:	d004      	beq.n	8006d02 <HAL_SPI_Init+0xbe>
 8006cf8:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8006cfc:	4848      	ldr	r0, [pc, #288]	; (8006e20 <HAL_SPI_Init+0x1dc>)
 8006cfe:	f7fb fa74 	bl	80021ea <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	69db      	ldr	r3, [r3, #28]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d020      	beq.n	8006d4c <HAL_SPI_Init+0x108>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	69db      	ldr	r3, [r3, #28]
 8006d0e:	2b08      	cmp	r3, #8
 8006d10:	d01c      	beq.n	8006d4c <HAL_SPI_Init+0x108>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	69db      	ldr	r3, [r3, #28]
 8006d16:	2b10      	cmp	r3, #16
 8006d18:	d018      	beq.n	8006d4c <HAL_SPI_Init+0x108>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	69db      	ldr	r3, [r3, #28]
 8006d1e:	2b18      	cmp	r3, #24
 8006d20:	d014      	beq.n	8006d4c <HAL_SPI_Init+0x108>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	69db      	ldr	r3, [r3, #28]
 8006d26:	2b20      	cmp	r3, #32
 8006d28:	d010      	beq.n	8006d4c <HAL_SPI_Init+0x108>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	69db      	ldr	r3, [r3, #28]
 8006d2e:	2b28      	cmp	r3, #40	; 0x28
 8006d30:	d00c      	beq.n	8006d4c <HAL_SPI_Init+0x108>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	69db      	ldr	r3, [r3, #28]
 8006d36:	2b30      	cmp	r3, #48	; 0x30
 8006d38:	d008      	beq.n	8006d4c <HAL_SPI_Init+0x108>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	69db      	ldr	r3, [r3, #28]
 8006d3e:	2b38      	cmp	r3, #56	; 0x38
 8006d40:	d004      	beq.n	8006d4c <HAL_SPI_Init+0x108>
 8006d42:	f240 115d 	movw	r1, #349	; 0x15d
 8006d46:	4836      	ldr	r0, [pc, #216]	; (8006e20 <HAL_SPI_Init+0x1dc>)
 8006d48:	f7fb fa4f 	bl	80021ea <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6a1b      	ldr	r3, [r3, #32]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d008      	beq.n	8006d66 <HAL_SPI_Init+0x122>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6a1b      	ldr	r3, [r3, #32]
 8006d58:	2b80      	cmp	r3, #128	; 0x80
 8006d5a:	d004      	beq.n	8006d66 <HAL_SPI_Init+0x122>
 8006d5c:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8006d60:	482f      	ldr	r0, [pc, #188]	; (8006e20 <HAL_SPI_Init+0x1dc>)
 8006d62:	f7fb fa42 	bl	80021ea <assert_failed>
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d004      	beq.n	8006d78 <HAL_SPI_Init+0x134>
 8006d6e:	f240 1161 	movw	r1, #353	; 0x161
 8006d72:	482b      	ldr	r0, [pc, #172]	; (8006e20 <HAL_SPI_Init+0x1dc>)
 8006d74:	f7fb fa39 	bl	80021ea <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d151      	bne.n	8006e24 <HAL_SPI_Init+0x1e0>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	691b      	ldr	r3, [r3, #16]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d008      	beq.n	8006d9a <HAL_SPI_Init+0x156>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	691b      	ldr	r3, [r3, #16]
 8006d8c:	2b02      	cmp	r3, #2
 8006d8e:	d004      	beq.n	8006d9a <HAL_SPI_Init+0x156>
 8006d90:	f44f 71b2 	mov.w	r1, #356	; 0x164
 8006d94:	4822      	ldr	r0, [pc, #136]	; (8006e20 <HAL_SPI_Init+0x1dc>)
 8006d96:	f7fb fa28 	bl	80021ea <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	695b      	ldr	r3, [r3, #20]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d008      	beq.n	8006db4 <HAL_SPI_Init+0x170>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	695b      	ldr	r3, [r3, #20]
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d004      	beq.n	8006db4 <HAL_SPI_Init+0x170>
 8006daa:	f240 1165 	movw	r1, #357	; 0x165
 8006dae:	481c      	ldr	r0, [pc, #112]	; (8006e20 <HAL_SPI_Init+0x1dc>)
 8006db0:	f7fb fa1b 	bl	80021ea <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006dbc:	d125      	bne.n	8006e0a <HAL_SPI_Init+0x1c6>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	69db      	ldr	r3, [r3, #28]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d059      	beq.n	8006e7a <HAL_SPI_Init+0x236>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	69db      	ldr	r3, [r3, #28]
 8006dca:	2b08      	cmp	r3, #8
 8006dcc:	d055      	beq.n	8006e7a <HAL_SPI_Init+0x236>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	69db      	ldr	r3, [r3, #28]
 8006dd2:	2b10      	cmp	r3, #16
 8006dd4:	d051      	beq.n	8006e7a <HAL_SPI_Init+0x236>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	69db      	ldr	r3, [r3, #28]
 8006dda:	2b18      	cmp	r3, #24
 8006ddc:	d04d      	beq.n	8006e7a <HAL_SPI_Init+0x236>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	69db      	ldr	r3, [r3, #28]
 8006de2:	2b20      	cmp	r3, #32
 8006de4:	d049      	beq.n	8006e7a <HAL_SPI_Init+0x236>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	69db      	ldr	r3, [r3, #28]
 8006dea:	2b28      	cmp	r3, #40	; 0x28
 8006dec:	d045      	beq.n	8006e7a <HAL_SPI_Init+0x236>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	69db      	ldr	r3, [r3, #28]
 8006df2:	2b30      	cmp	r3, #48	; 0x30
 8006df4:	d041      	beq.n	8006e7a <HAL_SPI_Init+0x236>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	69db      	ldr	r3, [r3, #28]
 8006dfa:	2b38      	cmp	r3, #56	; 0x38
 8006dfc:	d03d      	beq.n	8006e7a <HAL_SPI_Init+0x236>
 8006dfe:	f240 1169 	movw	r1, #361	; 0x169
 8006e02:	4807      	ldr	r0, [pc, #28]	; (8006e20 <HAL_SPI_Init+0x1dc>)
 8006e04:	f7fb f9f1 	bl	80021ea <assert_failed>
 8006e08:	e037      	b.n	8006e7a <HAL_SPI_Init+0x236>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	61da      	str	r2, [r3, #28]
 8006e10:	e033      	b.n	8006e7a <HAL_SPI_Init+0x236>
 8006e12:	bf00      	nop
 8006e14:	40013000 	.word	0x40013000
 8006e18:	40003800 	.word	0x40003800
 8006e1c:	40003c00 	.word	0x40003c00
 8006e20:	0800c0f8 	.word	0x0800c0f8
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	69db      	ldr	r3, [r3, #28]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d020      	beq.n	8006e6e <HAL_SPI_Init+0x22a>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	69db      	ldr	r3, [r3, #28]
 8006e30:	2b08      	cmp	r3, #8
 8006e32:	d01c      	beq.n	8006e6e <HAL_SPI_Init+0x22a>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	69db      	ldr	r3, [r3, #28]
 8006e38:	2b10      	cmp	r3, #16
 8006e3a:	d018      	beq.n	8006e6e <HAL_SPI_Init+0x22a>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	69db      	ldr	r3, [r3, #28]
 8006e40:	2b18      	cmp	r3, #24
 8006e42:	d014      	beq.n	8006e6e <HAL_SPI_Init+0x22a>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	69db      	ldr	r3, [r3, #28]
 8006e48:	2b20      	cmp	r3, #32
 8006e4a:	d010      	beq.n	8006e6e <HAL_SPI_Init+0x22a>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	69db      	ldr	r3, [r3, #28]
 8006e50:	2b28      	cmp	r3, #40	; 0x28
 8006e52:	d00c      	beq.n	8006e6e <HAL_SPI_Init+0x22a>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	69db      	ldr	r3, [r3, #28]
 8006e58:	2b30      	cmp	r3, #48	; 0x30
 8006e5a:	d008      	beq.n	8006e6e <HAL_SPI_Init+0x22a>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	69db      	ldr	r3, [r3, #28]
 8006e60:	2b38      	cmp	r3, #56	; 0x38
 8006e62:	d004      	beq.n	8006e6e <HAL_SPI_Init+0x22a>
 8006e64:	f240 1173 	movw	r1, #371	; 0x173
 8006e68:	4838      	ldr	r0, [pc, #224]	; (8006f4c <HAL_SPI_Init+0x308>)
 8006e6a:	f7fb f9be 	bl	80021ea <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2200      	movs	r2, #0
 8006e72:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2200      	movs	r2, #0
 8006e78:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d106      	bne.n	8006e9a <HAL_SPI_Init+0x256>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f7fb f9e9 	bl	800226c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2202      	movs	r2, #2
 8006e9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006eb0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006ec2:	431a      	orrs	r2, r3
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	68db      	ldr	r3, [r3, #12]
 8006ec8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ecc:	431a      	orrs	r2, r3
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	691b      	ldr	r3, [r3, #16]
 8006ed2:	f003 0302 	and.w	r3, r3, #2
 8006ed6:	431a      	orrs	r2, r3
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	695b      	ldr	r3, [r3, #20]
 8006edc:	f003 0301 	and.w	r3, r3, #1
 8006ee0:	431a      	orrs	r2, r3
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	699b      	ldr	r3, [r3, #24]
 8006ee6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006eea:	431a      	orrs	r2, r3
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	69db      	ldr	r3, [r3, #28]
 8006ef0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ef4:	431a      	orrs	r2, r3
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6a1b      	ldr	r3, [r3, #32]
 8006efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006efe:	ea42 0103 	orr.w	r1, r2, r3
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f06:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	430a      	orrs	r2, r1
 8006f10:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	699b      	ldr	r3, [r3, #24]
 8006f16:	0c1a      	lsrs	r2, r3, #16
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f002 0204 	and.w	r2, r2, #4
 8006f20:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	69da      	ldr	r2, [r3, #28]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f30:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2200      	movs	r2, #0
 8006f36:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006f40:	2300      	movs	r3, #0
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3708      	adds	r7, #8
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}
 8006f4a:	bf00      	nop
 8006f4c:	0800c0f8 	.word	0x0800c0f8

08006f50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b082      	sub	sp, #8
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d101      	bne.n	8006f62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e0c5      	b.n	80070ee <HAL_TIM_Base_Init+0x19e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a64      	ldr	r2, [pc, #400]	; (80070f8 <HAL_TIM_Base_Init+0x1a8>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d045      	beq.n	8006ff8 <HAL_TIM_Base_Init+0xa8>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a62      	ldr	r2, [pc, #392]	; (80070fc <HAL_TIM_Base_Init+0x1ac>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d040      	beq.n	8006ff8 <HAL_TIM_Base_Init+0xa8>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f7e:	d03b      	beq.n	8006ff8 <HAL_TIM_Base_Init+0xa8>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a5e      	ldr	r2, [pc, #376]	; (8007100 <HAL_TIM_Base_Init+0x1b0>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d036      	beq.n	8006ff8 <HAL_TIM_Base_Init+0xa8>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a5d      	ldr	r2, [pc, #372]	; (8007104 <HAL_TIM_Base_Init+0x1b4>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d031      	beq.n	8006ff8 <HAL_TIM_Base_Init+0xa8>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a5b      	ldr	r2, [pc, #364]	; (8007108 <HAL_TIM_Base_Init+0x1b8>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d02c      	beq.n	8006ff8 <HAL_TIM_Base_Init+0xa8>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a5a      	ldr	r2, [pc, #360]	; (800710c <HAL_TIM_Base_Init+0x1bc>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d027      	beq.n	8006ff8 <HAL_TIM_Base_Init+0xa8>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a58      	ldr	r2, [pc, #352]	; (8007110 <HAL_TIM_Base_Init+0x1c0>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d022      	beq.n	8006ff8 <HAL_TIM_Base_Init+0xa8>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a57      	ldr	r2, [pc, #348]	; (8007114 <HAL_TIM_Base_Init+0x1c4>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d01d      	beq.n	8006ff8 <HAL_TIM_Base_Init+0xa8>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a55      	ldr	r2, [pc, #340]	; (8007118 <HAL_TIM_Base_Init+0x1c8>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d018      	beq.n	8006ff8 <HAL_TIM_Base_Init+0xa8>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a54      	ldr	r2, [pc, #336]	; (800711c <HAL_TIM_Base_Init+0x1cc>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d013      	beq.n	8006ff8 <HAL_TIM_Base_Init+0xa8>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a52      	ldr	r2, [pc, #328]	; (8007120 <HAL_TIM_Base_Init+0x1d0>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d00e      	beq.n	8006ff8 <HAL_TIM_Base_Init+0xa8>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a51      	ldr	r2, [pc, #324]	; (8007124 <HAL_TIM_Base_Init+0x1d4>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d009      	beq.n	8006ff8 <HAL_TIM_Base_Init+0xa8>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a4f      	ldr	r2, [pc, #316]	; (8007128 <HAL_TIM_Base_Init+0x1d8>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d004      	beq.n	8006ff8 <HAL_TIM_Base_Init+0xa8>
 8006fee:	f240 1113 	movw	r1, #275	; 0x113
 8006ff2:	484e      	ldr	r0, [pc, #312]	; (800712c <HAL_TIM_Base_Init+0x1dc>)
 8006ff4:	f7fb f8f9 	bl	80021ea <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d014      	beq.n	800702a <HAL_TIM_Base_Init+0xda>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	2b10      	cmp	r3, #16
 8007006:	d010      	beq.n	800702a <HAL_TIM_Base_Init+0xda>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	2b20      	cmp	r3, #32
 800700e:	d00c      	beq.n	800702a <HAL_TIM_Base_Init+0xda>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	689b      	ldr	r3, [r3, #8]
 8007014:	2b40      	cmp	r3, #64	; 0x40
 8007016:	d008      	beq.n	800702a <HAL_TIM_Base_Init+0xda>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	2b60      	cmp	r3, #96	; 0x60
 800701e:	d004      	beq.n	800702a <HAL_TIM_Base_Init+0xda>
 8007020:	f44f 718a 	mov.w	r1, #276	; 0x114
 8007024:	4841      	ldr	r0, [pc, #260]	; (800712c <HAL_TIM_Base_Init+0x1dc>)
 8007026:	f7fb f8e0 	bl	80021ea <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	691b      	ldr	r3, [r3, #16]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d00e      	beq.n	8007050 <HAL_TIM_Base_Init+0x100>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	691b      	ldr	r3, [r3, #16]
 8007036:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800703a:	d009      	beq.n	8007050 <HAL_TIM_Base_Init+0x100>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	691b      	ldr	r3, [r3, #16]
 8007040:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007044:	d004      	beq.n	8007050 <HAL_TIM_Base_Init+0x100>
 8007046:	f240 1115 	movw	r1, #277	; 0x115
 800704a:	4838      	ldr	r0, [pc, #224]	; (800712c <HAL_TIM_Base_Init+0x1dc>)
 800704c:	f7fb f8cd 	bl	80021ea <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	699b      	ldr	r3, [r3, #24]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d008      	beq.n	800706a <HAL_TIM_Base_Init+0x11a>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	699b      	ldr	r3, [r3, #24]
 800705c:	2b80      	cmp	r3, #128	; 0x80
 800705e:	d004      	beq.n	800706a <HAL_TIM_Base_Init+0x11a>
 8007060:	f44f 718b 	mov.w	r1, #278	; 0x116
 8007064:	4831      	ldr	r0, [pc, #196]	; (800712c <HAL_TIM_Base_Init+0x1dc>)
 8007066:	f7fb f8c0 	bl	80021ea <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007070:	b2db      	uxtb	r3, r3
 8007072:	2b00      	cmp	r3, #0
 8007074:	d106      	bne.n	8007084 <HAL_TIM_Base_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2200      	movs	r2, #0
 800707a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f7fb fb3c 	bl	80026fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2202      	movs	r2, #2
 8007088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681a      	ldr	r2, [r3, #0]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	3304      	adds	r3, #4
 8007094:	4619      	mov	r1, r3
 8007096:	4610      	mov	r0, r2
 8007098:	f001 f832 	bl	8008100 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2201      	movs	r2, #1
 80070a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2201      	movs	r2, #1
 80070a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2201      	movs	r2, #1
 80070b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2201      	movs	r2, #1
 80070b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2201      	movs	r2, #1
 80070c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2201      	movs	r2, #1
 80070c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2201      	movs	r2, #1
 80070d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2201      	movs	r2, #1
 80070e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2201      	movs	r2, #1
 80070e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80070ec:	2300      	movs	r3, #0
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3708      	adds	r7, #8
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
 80070f6:	bf00      	nop
 80070f8:	40012c00 	.word	0x40012c00
 80070fc:	40013400 	.word	0x40013400
 8007100:	40000400 	.word	0x40000400
 8007104:	40000800 	.word	0x40000800
 8007108:	40000c00 	.word	0x40000c00
 800710c:	40001000 	.word	0x40001000
 8007110:	40001400 	.word	0x40001400
 8007114:	40014c00 	.word	0x40014c00
 8007118:	40015000 	.word	0x40015000
 800711c:	40015400 	.word	0x40015400
 8007120:	40001800 	.word	0x40001800
 8007124:	40001c00 	.word	0x40001c00
 8007128:	40002000 	.word	0x40002000
 800712c:	0800c130 	.word	0x0800c130

08007130 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a4d      	ldr	r2, [pc, #308]	; (8007274 <HAL_TIM_Base_Start+0x144>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d045      	beq.n	80071ce <HAL_TIM_Base_Start+0x9e>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a4c      	ldr	r2, [pc, #304]	; (8007278 <HAL_TIM_Base_Start+0x148>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d040      	beq.n	80071ce <HAL_TIM_Base_Start+0x9e>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007154:	d03b      	beq.n	80071ce <HAL_TIM_Base_Start+0x9e>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a48      	ldr	r2, [pc, #288]	; (800727c <HAL_TIM_Base_Start+0x14c>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d036      	beq.n	80071ce <HAL_TIM_Base_Start+0x9e>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a46      	ldr	r2, [pc, #280]	; (8007280 <HAL_TIM_Base_Start+0x150>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d031      	beq.n	80071ce <HAL_TIM_Base_Start+0x9e>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a45      	ldr	r2, [pc, #276]	; (8007284 <HAL_TIM_Base_Start+0x154>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d02c      	beq.n	80071ce <HAL_TIM_Base_Start+0x9e>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a43      	ldr	r2, [pc, #268]	; (8007288 <HAL_TIM_Base_Start+0x158>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d027      	beq.n	80071ce <HAL_TIM_Base_Start+0x9e>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a42      	ldr	r2, [pc, #264]	; (800728c <HAL_TIM_Base_Start+0x15c>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d022      	beq.n	80071ce <HAL_TIM_Base_Start+0x9e>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a40      	ldr	r2, [pc, #256]	; (8007290 <HAL_TIM_Base_Start+0x160>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d01d      	beq.n	80071ce <HAL_TIM_Base_Start+0x9e>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a3f      	ldr	r2, [pc, #252]	; (8007294 <HAL_TIM_Base_Start+0x164>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d018      	beq.n	80071ce <HAL_TIM_Base_Start+0x9e>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a3d      	ldr	r2, [pc, #244]	; (8007298 <HAL_TIM_Base_Start+0x168>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d013      	beq.n	80071ce <HAL_TIM_Base_Start+0x9e>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a3c      	ldr	r2, [pc, #240]	; (800729c <HAL_TIM_Base_Start+0x16c>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d00e      	beq.n	80071ce <HAL_TIM_Base_Start+0x9e>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a3a      	ldr	r2, [pc, #232]	; (80072a0 <HAL_TIM_Base_Start+0x170>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d009      	beq.n	80071ce <HAL_TIM_Base_Start+0x9e>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a39      	ldr	r2, [pc, #228]	; (80072a4 <HAL_TIM_Base_Start+0x174>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d004      	beq.n	80071ce <HAL_TIM_Base_Start+0x9e>
 80071c4:	f44f 71ca 	mov.w	r1, #404	; 0x194
 80071c8:	4837      	ldr	r0, [pc, #220]	; (80072a8 <HAL_TIM_Base_Start+0x178>)
 80071ca:	f7fb f80e 	bl	80021ea <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	d001      	beq.n	80071de <HAL_TIM_Base_Start+0xae>
  {
    return HAL_ERROR;
 80071da:	2301      	movs	r3, #1
 80071dc:	e046      	b.n	800726c <HAL_TIM_Base_Start+0x13c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2202      	movs	r2, #2
 80071e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a22      	ldr	r2, [pc, #136]	; (8007274 <HAL_TIM_Base_Start+0x144>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d022      	beq.n	8007236 <HAL_TIM_Base_Start+0x106>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a20      	ldr	r2, [pc, #128]	; (8007278 <HAL_TIM_Base_Start+0x148>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d01d      	beq.n	8007236 <HAL_TIM_Base_Start+0x106>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007202:	d018      	beq.n	8007236 <HAL_TIM_Base_Start+0x106>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a1c      	ldr	r2, [pc, #112]	; (800727c <HAL_TIM_Base_Start+0x14c>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d013      	beq.n	8007236 <HAL_TIM_Base_Start+0x106>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a1b      	ldr	r2, [pc, #108]	; (8007280 <HAL_TIM_Base_Start+0x150>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d00e      	beq.n	8007236 <HAL_TIM_Base_Start+0x106>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a19      	ldr	r2, [pc, #100]	; (8007284 <HAL_TIM_Base_Start+0x154>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d009      	beq.n	8007236 <HAL_TIM_Base_Start+0x106>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a1a      	ldr	r2, [pc, #104]	; (8007290 <HAL_TIM_Base_Start+0x160>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d004      	beq.n	8007236 <HAL_TIM_Base_Start+0x106>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a1a      	ldr	r2, [pc, #104]	; (800729c <HAL_TIM_Base_Start+0x16c>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d111      	bne.n	800725a <HAL_TIM_Base_Start+0x12a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	689b      	ldr	r3, [r3, #8]
 800723c:	f003 0307 	and.w	r3, r3, #7
 8007240:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2b06      	cmp	r3, #6
 8007246:	d010      	beq.n	800726a <HAL_TIM_Base_Start+0x13a>
    {
      __HAL_TIM_ENABLE(htim);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	681a      	ldr	r2, [r3, #0]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f042 0201 	orr.w	r2, r2, #1
 8007256:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007258:	e007      	b.n	800726a <HAL_TIM_Base_Start+0x13a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f042 0201 	orr.w	r2, r2, #1
 8007268:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800726a:	2300      	movs	r3, #0
}
 800726c:	4618      	mov	r0, r3
 800726e:	3710      	adds	r7, #16
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}
 8007274:	40012c00 	.word	0x40012c00
 8007278:	40013400 	.word	0x40013400
 800727c:	40000400 	.word	0x40000400
 8007280:	40000800 	.word	0x40000800
 8007284:	40000c00 	.word	0x40000c00
 8007288:	40001000 	.word	0x40001000
 800728c:	40001400 	.word	0x40001400
 8007290:	40014c00 	.word	0x40014c00
 8007294:	40015000 	.word	0x40015000
 8007298:	40015400 	.word	0x40015400
 800729c:	40001800 	.word	0x40001800
 80072a0:	40001c00 	.word	0x40001c00
 80072a4:	40002000 	.word	0x40002000
 80072a8:	0800c130 	.word	0x0800c130

080072ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b082      	sub	sp, #8
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d101      	bne.n	80072be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	e0c5      	b.n	800744a <HAL_TIM_PWM_Init+0x19e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a64      	ldr	r2, [pc, #400]	; (8007454 <HAL_TIM_PWM_Init+0x1a8>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d045      	beq.n	8007354 <HAL_TIM_PWM_Init+0xa8>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a62      	ldr	r2, [pc, #392]	; (8007458 <HAL_TIM_PWM_Init+0x1ac>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d040      	beq.n	8007354 <HAL_TIM_PWM_Init+0xa8>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072da:	d03b      	beq.n	8007354 <HAL_TIM_PWM_Init+0xa8>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a5e      	ldr	r2, [pc, #376]	; (800745c <HAL_TIM_PWM_Init+0x1b0>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d036      	beq.n	8007354 <HAL_TIM_PWM_Init+0xa8>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a5d      	ldr	r2, [pc, #372]	; (8007460 <HAL_TIM_PWM_Init+0x1b4>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d031      	beq.n	8007354 <HAL_TIM_PWM_Init+0xa8>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a5b      	ldr	r2, [pc, #364]	; (8007464 <HAL_TIM_PWM_Init+0x1b8>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d02c      	beq.n	8007354 <HAL_TIM_PWM_Init+0xa8>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a5a      	ldr	r2, [pc, #360]	; (8007468 <HAL_TIM_PWM_Init+0x1bc>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d027      	beq.n	8007354 <HAL_TIM_PWM_Init+0xa8>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a58      	ldr	r2, [pc, #352]	; (800746c <HAL_TIM_PWM_Init+0x1c0>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d022      	beq.n	8007354 <HAL_TIM_PWM_Init+0xa8>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a57      	ldr	r2, [pc, #348]	; (8007470 <HAL_TIM_PWM_Init+0x1c4>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d01d      	beq.n	8007354 <HAL_TIM_PWM_Init+0xa8>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a55      	ldr	r2, [pc, #340]	; (8007474 <HAL_TIM_PWM_Init+0x1c8>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d018      	beq.n	8007354 <HAL_TIM_PWM_Init+0xa8>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a54      	ldr	r2, [pc, #336]	; (8007478 <HAL_TIM_PWM_Init+0x1cc>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d013      	beq.n	8007354 <HAL_TIM_PWM_Init+0xa8>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a52      	ldr	r2, [pc, #328]	; (800747c <HAL_TIM_PWM_Init+0x1d0>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d00e      	beq.n	8007354 <HAL_TIM_PWM_Init+0xa8>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a51      	ldr	r2, [pc, #324]	; (8007480 <HAL_TIM_PWM_Init+0x1d4>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d009      	beq.n	8007354 <HAL_TIM_PWM_Init+0xa8>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a4f      	ldr	r2, [pc, #316]	; (8007484 <HAL_TIM_PWM_Init+0x1d8>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d004      	beq.n	8007354 <HAL_TIM_PWM_Init+0xa8>
 800734a:	f240 510e 	movw	r1, #1294	; 0x50e
 800734e:	484e      	ldr	r0, [pc, #312]	; (8007488 <HAL_TIM_PWM_Init+0x1dc>)
 8007350:	f7fa ff4b 	bl	80021ea <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d014      	beq.n	8007386 <HAL_TIM_PWM_Init+0xda>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	2b10      	cmp	r3, #16
 8007362:	d010      	beq.n	8007386 <HAL_TIM_PWM_Init+0xda>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	2b20      	cmp	r3, #32
 800736a:	d00c      	beq.n	8007386 <HAL_TIM_PWM_Init+0xda>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	2b40      	cmp	r3, #64	; 0x40
 8007372:	d008      	beq.n	8007386 <HAL_TIM_PWM_Init+0xda>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	2b60      	cmp	r3, #96	; 0x60
 800737a:	d004      	beq.n	8007386 <HAL_TIM_PWM_Init+0xda>
 800737c:	f240 510f 	movw	r1, #1295	; 0x50f
 8007380:	4841      	ldr	r0, [pc, #260]	; (8007488 <HAL_TIM_PWM_Init+0x1dc>)
 8007382:	f7fa ff32 	bl	80021ea <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	691b      	ldr	r3, [r3, #16]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d00e      	beq.n	80073ac <HAL_TIM_PWM_Init+0x100>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	691b      	ldr	r3, [r3, #16]
 8007392:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007396:	d009      	beq.n	80073ac <HAL_TIM_PWM_Init+0x100>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	691b      	ldr	r3, [r3, #16]
 800739c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073a0:	d004      	beq.n	80073ac <HAL_TIM_PWM_Init+0x100>
 80073a2:	f44f 61a2 	mov.w	r1, #1296	; 0x510
 80073a6:	4838      	ldr	r0, [pc, #224]	; (8007488 <HAL_TIM_PWM_Init+0x1dc>)
 80073a8:	f7fa ff1f 	bl	80021ea <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	699b      	ldr	r3, [r3, #24]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d008      	beq.n	80073c6 <HAL_TIM_PWM_Init+0x11a>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	699b      	ldr	r3, [r3, #24]
 80073b8:	2b80      	cmp	r3, #128	; 0x80
 80073ba:	d004      	beq.n	80073c6 <HAL_TIM_PWM_Init+0x11a>
 80073bc:	f240 5111 	movw	r1, #1297	; 0x511
 80073c0:	4831      	ldr	r0, [pc, #196]	; (8007488 <HAL_TIM_PWM_Init+0x1dc>)
 80073c2:	f7fa ff12 	bl	80021ea <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073cc:	b2db      	uxtb	r3, r3
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d106      	bne.n	80073e0 <HAL_TIM_PWM_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2200      	movs	r2, #0
 80073d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f7fb f968 	bl	80026b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2202      	movs	r2, #2
 80073e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	3304      	adds	r3, #4
 80073f0:	4619      	mov	r1, r3
 80073f2:	4610      	mov	r0, r2
 80073f4:	f000 fe84 	bl	8008100 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2201      	movs	r2, #1
 80073fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2201      	movs	r2, #1
 8007404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2201      	movs	r2, #1
 800740c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2201      	movs	r2, #1
 8007414:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2201      	movs	r2, #1
 800741c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2201      	movs	r2, #1
 8007424:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2201      	movs	r2, #1
 800742c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2201      	movs	r2, #1
 8007434:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2201      	movs	r2, #1
 800743c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2201      	movs	r2, #1
 8007444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007448:	2300      	movs	r3, #0
}
 800744a:	4618      	mov	r0, r3
 800744c:	3708      	adds	r7, #8
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}
 8007452:	bf00      	nop
 8007454:	40012c00 	.word	0x40012c00
 8007458:	40013400 	.word	0x40013400
 800745c:	40000400 	.word	0x40000400
 8007460:	40000800 	.word	0x40000800
 8007464:	40000c00 	.word	0x40000c00
 8007468:	40001000 	.word	0x40001000
 800746c:	40001400 	.word	0x40001400
 8007470:	40014c00 	.word	0x40014c00
 8007474:	40015000 	.word	0x40015000
 8007478:	40015400 	.word	0x40015400
 800747c:	40001800 	.word	0x40001800
 8007480:	40001c00 	.word	0x40001c00
 8007484:	40002000 	.word	0x40002000
 8007488:	0800c130 	.word	0x0800c130

0800748c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b084      	sub	sp, #16
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a9d      	ldr	r2, [pc, #628]	; (8007710 <HAL_TIM_PWM_Start_IT+0x284>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d10f      	bne.n	80074c0 <HAL_TIM_PWM_Start_IT+0x34>
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	f000 809f 	beq.w	80075e6 <HAL_TIM_PWM_Start_IT+0x15a>
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	2b04      	cmp	r3, #4
 80074ac:	f000 809b 	beq.w	80075e6 <HAL_TIM_PWM_Start_IT+0x15a>
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	2b08      	cmp	r3, #8
 80074b4:	f000 8097 	beq.w	80075e6 <HAL_TIM_PWM_Start_IT+0x15a>
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	2b0c      	cmp	r3, #12
 80074bc:	f000 8093 	beq.w	80075e6 <HAL_TIM_PWM_Start_IT+0x15a>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a93      	ldr	r2, [pc, #588]	; (8007714 <HAL_TIM_PWM_Start_IT+0x288>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d10e      	bne.n	80074e8 <HAL_TIM_PWM_Start_IT+0x5c>
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	f000 808a 	beq.w	80075e6 <HAL_TIM_PWM_Start_IT+0x15a>
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	2b04      	cmp	r3, #4
 80074d6:	f000 8086 	beq.w	80075e6 <HAL_TIM_PWM_Start_IT+0x15a>
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	2b08      	cmp	r3, #8
 80074de:	f000 8082 	beq.w	80075e6 <HAL_TIM_PWM_Start_IT+0x15a>
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	2b0c      	cmp	r3, #12
 80074e6:	d07e      	beq.n	80075e6 <HAL_TIM_PWM_Start_IT+0x15a>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074f0:	d10b      	bne.n	800750a <HAL_TIM_PWM_Start_IT+0x7e>
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d076      	beq.n	80075e6 <HAL_TIM_PWM_Start_IT+0x15a>
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	2b04      	cmp	r3, #4
 80074fc:	d073      	beq.n	80075e6 <HAL_TIM_PWM_Start_IT+0x15a>
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	2b08      	cmp	r3, #8
 8007502:	d070      	beq.n	80075e6 <HAL_TIM_PWM_Start_IT+0x15a>
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	2b0c      	cmp	r3, #12
 8007508:	d06d      	beq.n	80075e6 <HAL_TIM_PWM_Start_IT+0x15a>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a82      	ldr	r2, [pc, #520]	; (8007718 <HAL_TIM_PWM_Start_IT+0x28c>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d10b      	bne.n	800752c <HAL_TIM_PWM_Start_IT+0xa0>
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d065      	beq.n	80075e6 <HAL_TIM_PWM_Start_IT+0x15a>
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	2b04      	cmp	r3, #4
 800751e:	d062      	beq.n	80075e6 <HAL_TIM_PWM_Start_IT+0x15a>
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	2b08      	cmp	r3, #8
 8007524:	d05f      	beq.n	80075e6 <HAL_TIM_PWM_Start_IT+0x15a>
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	2b0c      	cmp	r3, #12
 800752a:	d05c      	beq.n	80075e6 <HAL_TIM_PWM_Start_IT+0x15a>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a7a      	ldr	r2, [pc, #488]	; (800771c <HAL_TIM_PWM_Start_IT+0x290>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d10b      	bne.n	800754e <HAL_TIM_PWM_Start_IT+0xc2>
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d054      	beq.n	80075e6 <HAL_TIM_PWM_Start_IT+0x15a>
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	2b04      	cmp	r3, #4
 8007540:	d051      	beq.n	80075e6 <HAL_TIM_PWM_Start_IT+0x15a>
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	2b08      	cmp	r3, #8
 8007546:	d04e      	beq.n	80075e6 <HAL_TIM_PWM_Start_IT+0x15a>
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	2b0c      	cmp	r3, #12
 800754c:	d04b      	beq.n	80075e6 <HAL_TIM_PWM_Start_IT+0x15a>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a73      	ldr	r2, [pc, #460]	; (8007720 <HAL_TIM_PWM_Start_IT+0x294>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d10b      	bne.n	8007570 <HAL_TIM_PWM_Start_IT+0xe4>
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d043      	beq.n	80075e6 <HAL_TIM_PWM_Start_IT+0x15a>
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	2b04      	cmp	r3, #4
 8007562:	d040      	beq.n	80075e6 <HAL_TIM_PWM_Start_IT+0x15a>
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	2b08      	cmp	r3, #8
 8007568:	d03d      	beq.n	80075e6 <HAL_TIM_PWM_Start_IT+0x15a>
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	2b0c      	cmp	r3, #12
 800756e:	d03a      	beq.n	80075e6 <HAL_TIM_PWM_Start_IT+0x15a>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a6b      	ldr	r2, [pc, #428]	; (8007724 <HAL_TIM_PWM_Start_IT+0x298>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d105      	bne.n	8007586 <HAL_TIM_PWM_Start_IT+0xfa>
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d032      	beq.n	80075e6 <HAL_TIM_PWM_Start_IT+0x15a>
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	2b04      	cmp	r3, #4
 8007584:	d02f      	beq.n	80075e6 <HAL_TIM_PWM_Start_IT+0x15a>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a67      	ldr	r2, [pc, #412]	; (8007728 <HAL_TIM_PWM_Start_IT+0x29c>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d102      	bne.n	8007596 <HAL_TIM_PWM_Start_IT+0x10a>
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d027      	beq.n	80075e6 <HAL_TIM_PWM_Start_IT+0x15a>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a64      	ldr	r2, [pc, #400]	; (800772c <HAL_TIM_PWM_Start_IT+0x2a0>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d102      	bne.n	80075a6 <HAL_TIM_PWM_Start_IT+0x11a>
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d01f      	beq.n	80075e6 <HAL_TIM_PWM_Start_IT+0x15a>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a61      	ldr	r2, [pc, #388]	; (8007730 <HAL_TIM_PWM_Start_IT+0x2a4>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d105      	bne.n	80075bc <HAL_TIM_PWM_Start_IT+0x130>
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d017      	beq.n	80075e6 <HAL_TIM_PWM_Start_IT+0x15a>
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	2b04      	cmp	r3, #4
 80075ba:	d014      	beq.n	80075e6 <HAL_TIM_PWM_Start_IT+0x15a>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a5c      	ldr	r2, [pc, #368]	; (8007734 <HAL_TIM_PWM_Start_IT+0x2a8>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d102      	bne.n	80075cc <HAL_TIM_PWM_Start_IT+0x140>
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d00c      	beq.n	80075e6 <HAL_TIM_PWM_Start_IT+0x15a>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a59      	ldr	r2, [pc, #356]	; (8007738 <HAL_TIM_PWM_Start_IT+0x2ac>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d102      	bne.n	80075dc <HAL_TIM_PWM_Start_IT+0x150>
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d004      	beq.n	80075e6 <HAL_TIM_PWM_Start_IT+0x15a>
 80075dc:	f240 51ec 	movw	r1, #1516	; 0x5ec
 80075e0:	4856      	ldr	r0, [pc, #344]	; (800773c <HAL_TIM_PWM_Start_IT+0x2b0>)
 80075e2:	f7fa fe02 	bl	80021ea <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d109      	bne.n	8007600 <HAL_TIM_PWM_Start_IT+0x174>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80075f2:	b2db      	uxtb	r3, r3
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	bf14      	ite	ne
 80075f8:	2301      	movne	r3, #1
 80075fa:	2300      	moveq	r3, #0
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	e022      	b.n	8007646 <HAL_TIM_PWM_Start_IT+0x1ba>
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	2b04      	cmp	r3, #4
 8007604:	d109      	bne.n	800761a <HAL_TIM_PWM_Start_IT+0x18e>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800760c:	b2db      	uxtb	r3, r3
 800760e:	2b01      	cmp	r3, #1
 8007610:	bf14      	ite	ne
 8007612:	2301      	movne	r3, #1
 8007614:	2300      	moveq	r3, #0
 8007616:	b2db      	uxtb	r3, r3
 8007618:	e015      	b.n	8007646 <HAL_TIM_PWM_Start_IT+0x1ba>
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	2b08      	cmp	r3, #8
 800761e:	d109      	bne.n	8007634 <HAL_TIM_PWM_Start_IT+0x1a8>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007626:	b2db      	uxtb	r3, r3
 8007628:	2b01      	cmp	r3, #1
 800762a:	bf14      	ite	ne
 800762c:	2301      	movne	r3, #1
 800762e:	2300      	moveq	r3, #0
 8007630:	b2db      	uxtb	r3, r3
 8007632:	e008      	b.n	8007646 <HAL_TIM_PWM_Start_IT+0x1ba>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800763a:	b2db      	uxtb	r3, r3
 800763c:	2b01      	cmp	r3, #1
 800763e:	bf14      	ite	ne
 8007640:	2301      	movne	r3, #1
 8007642:	2300      	moveq	r3, #0
 8007644:	b2db      	uxtb	r3, r3
 8007646:	2b00      	cmp	r3, #0
 8007648:	d001      	beq.n	800764e <HAL_TIM_PWM_Start_IT+0x1c2>
  {
    return HAL_ERROR;
 800764a:	2301      	movs	r3, #1
 800764c:	e0da      	b.n	8007804 <HAL_TIM_PWM_Start_IT+0x378>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d104      	bne.n	800765e <HAL_TIM_PWM_Start_IT+0x1d2>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2202      	movs	r2, #2
 8007658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800765c:	e013      	b.n	8007686 <HAL_TIM_PWM_Start_IT+0x1fa>
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	2b04      	cmp	r3, #4
 8007662:	d104      	bne.n	800766e <HAL_TIM_PWM_Start_IT+0x1e2>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2202      	movs	r2, #2
 8007668:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800766c:	e00b      	b.n	8007686 <HAL_TIM_PWM_Start_IT+0x1fa>
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	2b08      	cmp	r3, #8
 8007672:	d104      	bne.n	800767e <HAL_TIM_PWM_Start_IT+0x1f2>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2202      	movs	r2, #2
 8007678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800767c:	e003      	b.n	8007686 <HAL_TIM_PWM_Start_IT+0x1fa>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2202      	movs	r2, #2
 8007682:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	2b0c      	cmp	r3, #12
 800768a:	d859      	bhi.n	8007740 <HAL_TIM_PWM_Start_IT+0x2b4>
 800768c:	a201      	add	r2, pc, #4	; (adr r2, 8007694 <HAL_TIM_PWM_Start_IT+0x208>)
 800768e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007692:	bf00      	nop
 8007694:	080076c9 	.word	0x080076c9
 8007698:	08007741 	.word	0x08007741
 800769c:	08007741 	.word	0x08007741
 80076a0:	08007741 	.word	0x08007741
 80076a4:	080076db 	.word	0x080076db
 80076a8:	08007741 	.word	0x08007741
 80076ac:	08007741 	.word	0x08007741
 80076b0:	08007741 	.word	0x08007741
 80076b4:	080076ed 	.word	0x080076ed
 80076b8:	08007741 	.word	0x08007741
 80076bc:	08007741 	.word	0x08007741
 80076c0:	08007741 	.word	0x08007741
 80076c4:	080076ff 	.word	0x080076ff
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	68da      	ldr	r2, [r3, #12]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f042 0202 	orr.w	r2, r2, #2
 80076d6:	60da      	str	r2, [r3, #12]
      break;
 80076d8:	e033      	b.n	8007742 <HAL_TIM_PWM_Start_IT+0x2b6>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	68da      	ldr	r2, [r3, #12]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f042 0204 	orr.w	r2, r2, #4
 80076e8:	60da      	str	r2, [r3, #12]
      break;
 80076ea:	e02a      	b.n	8007742 <HAL_TIM_PWM_Start_IT+0x2b6>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	68da      	ldr	r2, [r3, #12]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f042 0208 	orr.w	r2, r2, #8
 80076fa:	60da      	str	r2, [r3, #12]
      break;
 80076fc:	e021      	b.n	8007742 <HAL_TIM_PWM_Start_IT+0x2b6>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	68da      	ldr	r2, [r3, #12]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f042 0210 	orr.w	r2, r2, #16
 800770c:	60da      	str	r2, [r3, #12]
      break;
 800770e:	e018      	b.n	8007742 <HAL_TIM_PWM_Start_IT+0x2b6>
 8007710:	40012c00 	.word	0x40012c00
 8007714:	40013400 	.word	0x40013400
 8007718:	40000400 	.word	0x40000400
 800771c:	40000800 	.word	0x40000800
 8007720:	40000c00 	.word	0x40000c00
 8007724:	40014c00 	.word	0x40014c00
 8007728:	40015000 	.word	0x40015000
 800772c:	40015400 	.word	0x40015400
 8007730:	40001800 	.word	0x40001800
 8007734:	40001c00 	.word	0x40001c00
 8007738:	40002000 	.word	0x40002000
 800773c:	0800c130 	.word	0x0800c130
    }

    default:
      break;
 8007740:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	2201      	movs	r2, #1
 8007748:	6839      	ldr	r1, [r7, #0]
 800774a:	4618      	mov	r0, r3
 800774c:	f000 ffb0 	bl	80086b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a2d      	ldr	r2, [pc, #180]	; (800780c <HAL_TIM_PWM_Start_IT+0x380>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d004      	beq.n	8007764 <HAL_TIM_PWM_Start_IT+0x2d8>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a2c      	ldr	r2, [pc, #176]	; (8007810 <HAL_TIM_PWM_Start_IT+0x384>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d101      	bne.n	8007768 <HAL_TIM_PWM_Start_IT+0x2dc>
 8007764:	2301      	movs	r3, #1
 8007766:	e000      	b.n	800776a <HAL_TIM_PWM_Start_IT+0x2de>
 8007768:	2300      	movs	r3, #0
 800776a:	2b00      	cmp	r3, #0
 800776c:	d007      	beq.n	800777e <HAL_TIM_PWM_Start_IT+0x2f2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800777c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a22      	ldr	r2, [pc, #136]	; (800780c <HAL_TIM_PWM_Start_IT+0x380>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d022      	beq.n	80077ce <HAL_TIM_PWM_Start_IT+0x342>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a20      	ldr	r2, [pc, #128]	; (8007810 <HAL_TIM_PWM_Start_IT+0x384>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d01d      	beq.n	80077ce <HAL_TIM_PWM_Start_IT+0x342>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800779a:	d018      	beq.n	80077ce <HAL_TIM_PWM_Start_IT+0x342>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a1c      	ldr	r2, [pc, #112]	; (8007814 <HAL_TIM_PWM_Start_IT+0x388>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d013      	beq.n	80077ce <HAL_TIM_PWM_Start_IT+0x342>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a1b      	ldr	r2, [pc, #108]	; (8007818 <HAL_TIM_PWM_Start_IT+0x38c>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d00e      	beq.n	80077ce <HAL_TIM_PWM_Start_IT+0x342>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4a19      	ldr	r2, [pc, #100]	; (800781c <HAL_TIM_PWM_Start_IT+0x390>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d009      	beq.n	80077ce <HAL_TIM_PWM_Start_IT+0x342>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a18      	ldr	r2, [pc, #96]	; (8007820 <HAL_TIM_PWM_Start_IT+0x394>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d004      	beq.n	80077ce <HAL_TIM_PWM_Start_IT+0x342>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a16      	ldr	r2, [pc, #88]	; (8007824 <HAL_TIM_PWM_Start_IT+0x398>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d111      	bne.n	80077f2 <HAL_TIM_PWM_Start_IT+0x366>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	f003 0307 	and.w	r3, r3, #7
 80077d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2b06      	cmp	r3, #6
 80077de:	d010      	beq.n	8007802 <HAL_TIM_PWM_Start_IT+0x376>
    {
      __HAL_TIM_ENABLE(htim);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	681a      	ldr	r2, [r3, #0]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f042 0201 	orr.w	r2, r2, #1
 80077ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077f0:	e007      	b.n	8007802 <HAL_TIM_PWM_Start_IT+0x376>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	681a      	ldr	r2, [r3, #0]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f042 0201 	orr.w	r2, r2, #1
 8007800:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007802:	2300      	movs	r3, #0
}
 8007804:	4618      	mov	r0, r3
 8007806:	3710      	adds	r7, #16
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}
 800780c:	40012c00 	.word	0x40012c00
 8007810:	40013400 	.word	0x40013400
 8007814:	40000400 	.word	0x40000400
 8007818:	40000800 	.word	0x40000800
 800781c:	40000c00 	.word	0x40000c00
 8007820:	40014c00 	.word	0x40014c00
 8007824:	40001800 	.word	0x40001800

08007828 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b082      	sub	sp, #8
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4aa1      	ldr	r2, [pc, #644]	; (8007abc <HAL_TIM_PWM_Stop_IT+0x294>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d10f      	bne.n	800785c <HAL_TIM_PWM_Stop_IT+0x34>
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	2b00      	cmp	r3, #0
 8007840:	f000 809f 	beq.w	8007982 <HAL_TIM_PWM_Stop_IT+0x15a>
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	2b04      	cmp	r3, #4
 8007848:	f000 809b 	beq.w	8007982 <HAL_TIM_PWM_Stop_IT+0x15a>
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	2b08      	cmp	r3, #8
 8007850:	f000 8097 	beq.w	8007982 <HAL_TIM_PWM_Stop_IT+0x15a>
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	2b0c      	cmp	r3, #12
 8007858:	f000 8093 	beq.w	8007982 <HAL_TIM_PWM_Stop_IT+0x15a>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a97      	ldr	r2, [pc, #604]	; (8007ac0 <HAL_TIM_PWM_Stop_IT+0x298>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d10e      	bne.n	8007884 <HAL_TIM_PWM_Stop_IT+0x5c>
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	2b00      	cmp	r3, #0
 800786a:	f000 808a 	beq.w	8007982 <HAL_TIM_PWM_Stop_IT+0x15a>
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	2b04      	cmp	r3, #4
 8007872:	f000 8086 	beq.w	8007982 <HAL_TIM_PWM_Stop_IT+0x15a>
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	2b08      	cmp	r3, #8
 800787a:	f000 8082 	beq.w	8007982 <HAL_TIM_PWM_Stop_IT+0x15a>
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	2b0c      	cmp	r3, #12
 8007882:	d07e      	beq.n	8007982 <HAL_TIM_PWM_Stop_IT+0x15a>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800788c:	d10b      	bne.n	80078a6 <HAL_TIM_PWM_Stop_IT+0x7e>
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d076      	beq.n	8007982 <HAL_TIM_PWM_Stop_IT+0x15a>
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	2b04      	cmp	r3, #4
 8007898:	d073      	beq.n	8007982 <HAL_TIM_PWM_Stop_IT+0x15a>
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	2b08      	cmp	r3, #8
 800789e:	d070      	beq.n	8007982 <HAL_TIM_PWM_Stop_IT+0x15a>
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	2b0c      	cmp	r3, #12
 80078a4:	d06d      	beq.n	8007982 <HAL_TIM_PWM_Stop_IT+0x15a>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a86      	ldr	r2, [pc, #536]	; (8007ac4 <HAL_TIM_PWM_Stop_IT+0x29c>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d10b      	bne.n	80078c8 <HAL_TIM_PWM_Stop_IT+0xa0>
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d065      	beq.n	8007982 <HAL_TIM_PWM_Stop_IT+0x15a>
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	2b04      	cmp	r3, #4
 80078ba:	d062      	beq.n	8007982 <HAL_TIM_PWM_Stop_IT+0x15a>
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	2b08      	cmp	r3, #8
 80078c0:	d05f      	beq.n	8007982 <HAL_TIM_PWM_Stop_IT+0x15a>
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	2b0c      	cmp	r3, #12
 80078c6:	d05c      	beq.n	8007982 <HAL_TIM_PWM_Stop_IT+0x15a>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a7e      	ldr	r2, [pc, #504]	; (8007ac8 <HAL_TIM_PWM_Stop_IT+0x2a0>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d10b      	bne.n	80078ea <HAL_TIM_PWM_Stop_IT+0xc2>
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d054      	beq.n	8007982 <HAL_TIM_PWM_Stop_IT+0x15a>
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	2b04      	cmp	r3, #4
 80078dc:	d051      	beq.n	8007982 <HAL_TIM_PWM_Stop_IT+0x15a>
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	2b08      	cmp	r3, #8
 80078e2:	d04e      	beq.n	8007982 <HAL_TIM_PWM_Stop_IT+0x15a>
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	2b0c      	cmp	r3, #12
 80078e8:	d04b      	beq.n	8007982 <HAL_TIM_PWM_Stop_IT+0x15a>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a77      	ldr	r2, [pc, #476]	; (8007acc <HAL_TIM_PWM_Stop_IT+0x2a4>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d10b      	bne.n	800790c <HAL_TIM_PWM_Stop_IT+0xe4>
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d043      	beq.n	8007982 <HAL_TIM_PWM_Stop_IT+0x15a>
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	2b04      	cmp	r3, #4
 80078fe:	d040      	beq.n	8007982 <HAL_TIM_PWM_Stop_IT+0x15a>
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	2b08      	cmp	r3, #8
 8007904:	d03d      	beq.n	8007982 <HAL_TIM_PWM_Stop_IT+0x15a>
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	2b0c      	cmp	r3, #12
 800790a:	d03a      	beq.n	8007982 <HAL_TIM_PWM_Stop_IT+0x15a>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a6f      	ldr	r2, [pc, #444]	; (8007ad0 <HAL_TIM_PWM_Stop_IT+0x2a8>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d105      	bne.n	8007922 <HAL_TIM_PWM_Stop_IT+0xfa>
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d032      	beq.n	8007982 <HAL_TIM_PWM_Stop_IT+0x15a>
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	2b04      	cmp	r3, #4
 8007920:	d02f      	beq.n	8007982 <HAL_TIM_PWM_Stop_IT+0x15a>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a6b      	ldr	r2, [pc, #428]	; (8007ad4 <HAL_TIM_PWM_Stop_IT+0x2ac>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d102      	bne.n	8007932 <HAL_TIM_PWM_Stop_IT+0x10a>
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d027      	beq.n	8007982 <HAL_TIM_PWM_Stop_IT+0x15a>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a68      	ldr	r2, [pc, #416]	; (8007ad8 <HAL_TIM_PWM_Stop_IT+0x2b0>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d102      	bne.n	8007942 <HAL_TIM_PWM_Stop_IT+0x11a>
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d01f      	beq.n	8007982 <HAL_TIM_PWM_Stop_IT+0x15a>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4a65      	ldr	r2, [pc, #404]	; (8007adc <HAL_TIM_PWM_Stop_IT+0x2b4>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d105      	bne.n	8007958 <HAL_TIM_PWM_Stop_IT+0x130>
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d017      	beq.n	8007982 <HAL_TIM_PWM_Stop_IT+0x15a>
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	2b04      	cmp	r3, #4
 8007956:	d014      	beq.n	8007982 <HAL_TIM_PWM_Stop_IT+0x15a>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a60      	ldr	r2, [pc, #384]	; (8007ae0 <HAL_TIM_PWM_Stop_IT+0x2b8>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d102      	bne.n	8007968 <HAL_TIM_PWM_Stop_IT+0x140>
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d00c      	beq.n	8007982 <HAL_TIM_PWM_Stop_IT+0x15a>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a5d      	ldr	r2, [pc, #372]	; (8007ae4 <HAL_TIM_PWM_Stop_IT+0x2bc>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d102      	bne.n	8007978 <HAL_TIM_PWM_Stop_IT+0x150>
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d004      	beq.n	8007982 <HAL_TIM_PWM_Stop_IT+0x15a>
 8007978:	f240 6142 	movw	r1, #1602	; 0x642
 800797c:	485a      	ldr	r0, [pc, #360]	; (8007ae8 <HAL_TIM_PWM_Stop_IT+0x2c0>)
 800797e:	f7fa fc34 	bl	80021ea <assert_failed>
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	2b0c      	cmp	r3, #12
 8007986:	d841      	bhi.n	8007a0c <HAL_TIM_PWM_Stop_IT+0x1e4>
 8007988:	a201      	add	r2, pc, #4	; (adr r2, 8007990 <HAL_TIM_PWM_Stop_IT+0x168>)
 800798a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800798e:	bf00      	nop
 8007990:	080079c5 	.word	0x080079c5
 8007994:	08007a0d 	.word	0x08007a0d
 8007998:	08007a0d 	.word	0x08007a0d
 800799c:	08007a0d 	.word	0x08007a0d
 80079a0:	080079d7 	.word	0x080079d7
 80079a4:	08007a0d 	.word	0x08007a0d
 80079a8:	08007a0d 	.word	0x08007a0d
 80079ac:	08007a0d 	.word	0x08007a0d
 80079b0:	080079e9 	.word	0x080079e9
 80079b4:	08007a0d 	.word	0x08007a0d
 80079b8:	08007a0d 	.word	0x08007a0d
 80079bc:	08007a0d 	.word	0x08007a0d
 80079c0:	080079fb 	.word	0x080079fb
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	68da      	ldr	r2, [r3, #12]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f022 0202 	bic.w	r2, r2, #2
 80079d2:	60da      	str	r2, [r3, #12]
      break;
 80079d4:	e01b      	b.n	8007a0e <HAL_TIM_PWM_Stop_IT+0x1e6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	68da      	ldr	r2, [r3, #12]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f022 0204 	bic.w	r2, r2, #4
 80079e4:	60da      	str	r2, [r3, #12]
      break;
 80079e6:	e012      	b.n	8007a0e <HAL_TIM_PWM_Stop_IT+0x1e6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	68da      	ldr	r2, [r3, #12]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f022 0208 	bic.w	r2, r2, #8
 80079f6:	60da      	str	r2, [r3, #12]
      break;
 80079f8:	e009      	b.n	8007a0e <HAL_TIM_PWM_Stop_IT+0x1e6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	68da      	ldr	r2, [r3, #12]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f022 0210 	bic.w	r2, r2, #16
 8007a08:	60da      	str	r2, [r3, #12]
      break;
 8007a0a:	e000      	b.n	8007a0e <HAL_TIM_PWM_Stop_IT+0x1e6>
    }

    default:
      break;
 8007a0c:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	2200      	movs	r2, #0
 8007a14:	6839      	ldr	r1, [r7, #0]
 8007a16:	4618      	mov	r0, r3
 8007a18:	f000 fe4a 	bl	80086b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a26      	ldr	r2, [pc, #152]	; (8007abc <HAL_TIM_PWM_Stop_IT+0x294>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d004      	beq.n	8007a30 <HAL_TIM_PWM_Stop_IT+0x208>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a25      	ldr	r2, [pc, #148]	; (8007ac0 <HAL_TIM_PWM_Stop_IT+0x298>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d101      	bne.n	8007a34 <HAL_TIM_PWM_Stop_IT+0x20c>
 8007a30:	2301      	movs	r3, #1
 8007a32:	e000      	b.n	8007a36 <HAL_TIM_PWM_Stop_IT+0x20e>
 8007a34:	2300      	movs	r3, #0
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d017      	beq.n	8007a6a <HAL_TIM_PWM_Stop_IT+0x242>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	6a1a      	ldr	r2, [r3, #32]
 8007a40:	f241 1311 	movw	r3, #4369	; 0x1111
 8007a44:	4013      	ands	r3, r2
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d10f      	bne.n	8007a6a <HAL_TIM_PWM_Stop_IT+0x242>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	6a1a      	ldr	r2, [r3, #32]
 8007a50:	f240 4344 	movw	r3, #1092	; 0x444
 8007a54:	4013      	ands	r3, r2
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d107      	bne.n	8007a6a <HAL_TIM_PWM_Stop_IT+0x242>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007a68:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	6a1a      	ldr	r2, [r3, #32]
 8007a70:	f241 1311 	movw	r3, #4369	; 0x1111
 8007a74:	4013      	ands	r3, r2
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d10f      	bne.n	8007a9a <HAL_TIM_PWM_Stop_IT+0x272>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	6a1a      	ldr	r2, [r3, #32]
 8007a80:	f240 4344 	movw	r3, #1092	; 0x444
 8007a84:	4013      	ands	r3, r2
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d107      	bne.n	8007a9a <HAL_TIM_PWM_Stop_IT+0x272>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	681a      	ldr	r2, [r3, #0]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f022 0201 	bic.w	r2, r2, #1
 8007a98:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d104      	bne.n	8007aaa <HAL_TIM_PWM_Stop_IT+0x282>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007aa8:	e02c      	b.n	8007b04 <HAL_TIM_PWM_Stop_IT+0x2dc>
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	2b04      	cmp	r3, #4
 8007aae:	d11d      	bne.n	8007aec <HAL_TIM_PWM_Stop_IT+0x2c4>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ab8:	e024      	b.n	8007b04 <HAL_TIM_PWM_Stop_IT+0x2dc>
 8007aba:	bf00      	nop
 8007abc:	40012c00 	.word	0x40012c00
 8007ac0:	40013400 	.word	0x40013400
 8007ac4:	40000400 	.word	0x40000400
 8007ac8:	40000800 	.word	0x40000800
 8007acc:	40000c00 	.word	0x40000c00
 8007ad0:	40014c00 	.word	0x40014c00
 8007ad4:	40015000 	.word	0x40015000
 8007ad8:	40015400 	.word	0x40015400
 8007adc:	40001800 	.word	0x40001800
 8007ae0:	40001c00 	.word	0x40001c00
 8007ae4:	40002000 	.word	0x40002000
 8007ae8:	0800c130 	.word	0x0800c130
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	2b08      	cmp	r3, #8
 8007af0:	d104      	bne.n	8007afc <HAL_TIM_PWM_Stop_IT+0x2d4>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2201      	movs	r2, #1
 8007af6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007afa:	e003      	b.n	8007b04 <HAL_TIM_PWM_Stop_IT+0x2dc>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2201      	movs	r2, #1
 8007b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8007b04:	2300      	movs	r3, #0
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3708      	adds	r7, #8
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}
 8007b0e:	bf00      	nop

08007b10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b082      	sub	sp, #8
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	691b      	ldr	r3, [r3, #16]
 8007b1e:	f003 0302 	and.w	r3, r3, #2
 8007b22:	2b02      	cmp	r3, #2
 8007b24:	d122      	bne.n	8007b6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	68db      	ldr	r3, [r3, #12]
 8007b2c:	f003 0302 	and.w	r3, r3, #2
 8007b30:	2b02      	cmp	r3, #2
 8007b32:	d11b      	bne.n	8007b6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f06f 0202 	mvn.w	r2, #2
 8007b3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2201      	movs	r2, #1
 8007b42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	699b      	ldr	r3, [r3, #24]
 8007b4a:	f003 0303 	and.w	r3, r3, #3
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d003      	beq.n	8007b5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 fac1 	bl	80080da <HAL_TIM_IC_CaptureCallback>
 8007b58:	e005      	b.n	8007b66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f7fa fea6 	bl	80028ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f7fa fe31 	bl	80027c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	691b      	ldr	r3, [r3, #16]
 8007b72:	f003 0304 	and.w	r3, r3, #4
 8007b76:	2b04      	cmp	r3, #4
 8007b78:	d122      	bne.n	8007bc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	68db      	ldr	r3, [r3, #12]
 8007b80:	f003 0304 	and.w	r3, r3, #4
 8007b84:	2b04      	cmp	r3, #4
 8007b86:	d11b      	bne.n	8007bc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f06f 0204 	mvn.w	r2, #4
 8007b90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2202      	movs	r2, #2
 8007b96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	699b      	ldr	r3, [r3, #24]
 8007b9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d003      	beq.n	8007bae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f000 fa97 	bl	80080da <HAL_TIM_IC_CaptureCallback>
 8007bac:	e005      	b.n	8007bba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f7fa fe7c 	bl	80028ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f7fa fe07 	bl	80027c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	691b      	ldr	r3, [r3, #16]
 8007bc6:	f003 0308 	and.w	r3, r3, #8
 8007bca:	2b08      	cmp	r3, #8
 8007bcc:	d122      	bne.n	8007c14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	68db      	ldr	r3, [r3, #12]
 8007bd4:	f003 0308 	and.w	r3, r3, #8
 8007bd8:	2b08      	cmp	r3, #8
 8007bda:	d11b      	bne.n	8007c14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f06f 0208 	mvn.w	r2, #8
 8007be4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2204      	movs	r2, #4
 8007bea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	69db      	ldr	r3, [r3, #28]
 8007bf2:	f003 0303 	and.w	r3, r3, #3
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d003      	beq.n	8007c02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 fa6d 	bl	80080da <HAL_TIM_IC_CaptureCallback>
 8007c00:	e005      	b.n	8007c0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f7fa fe52 	bl	80028ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f7fa fddd 	bl	80027c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2200      	movs	r2, #0
 8007c12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	691b      	ldr	r3, [r3, #16]
 8007c1a:	f003 0310 	and.w	r3, r3, #16
 8007c1e:	2b10      	cmp	r3, #16
 8007c20:	d122      	bne.n	8007c68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	68db      	ldr	r3, [r3, #12]
 8007c28:	f003 0310 	and.w	r3, r3, #16
 8007c2c:	2b10      	cmp	r3, #16
 8007c2e:	d11b      	bne.n	8007c68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f06f 0210 	mvn.w	r2, #16
 8007c38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2208      	movs	r2, #8
 8007c3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	69db      	ldr	r3, [r3, #28]
 8007c46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d003      	beq.n	8007c56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f000 fa43 	bl	80080da <HAL_TIM_IC_CaptureCallback>
 8007c54:	e005      	b.n	8007c62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f7fa fe28 	bl	80028ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f7fa fdb3 	bl	80027c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2200      	movs	r2, #0
 8007c66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	691b      	ldr	r3, [r3, #16]
 8007c6e:	f003 0301 	and.w	r3, r3, #1
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	d10e      	bne.n	8007c94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	68db      	ldr	r3, [r3, #12]
 8007c7c:	f003 0301 	and.w	r3, r3, #1
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d107      	bne.n	8007c94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f06f 0201 	mvn.w	r2, #1
 8007c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f000 fa1a 	bl	80080c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	691b      	ldr	r3, [r3, #16]
 8007c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c9e:	2b80      	cmp	r3, #128	; 0x80
 8007ca0:	d10e      	bne.n	8007cc0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	68db      	ldr	r3, [r3, #12]
 8007ca8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cac:	2b80      	cmp	r3, #128	; 0x80
 8007cae:	d107      	bne.n	8007cc0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 fe69 	bl	8008992 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	691b      	ldr	r3, [r3, #16]
 8007cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cca:	2b40      	cmp	r3, #64	; 0x40
 8007ccc:	d10e      	bne.n	8007cec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	68db      	ldr	r3, [r3, #12]
 8007cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cd8:	2b40      	cmp	r3, #64	; 0x40
 8007cda:	d107      	bne.n	8007cec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007ce4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f000 fa00 	bl	80080ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	691b      	ldr	r3, [r3, #16]
 8007cf2:	f003 0320 	and.w	r3, r3, #32
 8007cf6:	2b20      	cmp	r3, #32
 8007cf8:	d10e      	bne.n	8007d18 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	68db      	ldr	r3, [r3, #12]
 8007d00:	f003 0320 	and.w	r3, r3, #32
 8007d04:	2b20      	cmp	r3, #32
 8007d06:	d107      	bne.n	8007d18 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f06f 0220 	mvn.w	r2, #32
 8007d10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f000 fe34 	bl	8008980 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007d18:	bf00      	nop
 8007d1a:	3708      	adds	r7, #8
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}

08007d20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b084      	sub	sp, #16
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	60f8      	str	r0, [r7, #12]
 8007d28:	60b9      	str	r1, [r7, #8]
 8007d2a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d010      	beq.n	8007d54 <HAL_TIM_PWM_ConfigChannel+0x34>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2b04      	cmp	r3, #4
 8007d36:	d00d      	beq.n	8007d54 <HAL_TIM_PWM_ConfigChannel+0x34>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2b08      	cmp	r3, #8
 8007d3c:	d00a      	beq.n	8007d54 <HAL_TIM_PWM_ConfigChannel+0x34>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2b0c      	cmp	r3, #12
 8007d42:	d007      	beq.n	8007d54 <HAL_TIM_PWM_ConfigChannel+0x34>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2b3c      	cmp	r3, #60	; 0x3c
 8007d48:	d004      	beq.n	8007d54 <HAL_TIM_PWM_ConfigChannel+0x34>
 8007d4a:	f241 0112 	movw	r1, #4114	; 0x1012
 8007d4e:	4883      	ldr	r0, [pc, #524]	; (8007f5c <HAL_TIM_PWM_ConfigChannel+0x23c>)
 8007d50:	f7fa fa4b 	bl	80021ea <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	2b60      	cmp	r3, #96	; 0x60
 8007d5a:	d008      	beq.n	8007d6e <HAL_TIM_PWM_ConfigChannel+0x4e>
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	2b70      	cmp	r3, #112	; 0x70
 8007d62:	d004      	beq.n	8007d6e <HAL_TIM_PWM_ConfigChannel+0x4e>
 8007d64:	f241 0113 	movw	r1, #4115	; 0x1013
 8007d68:	487c      	ldr	r0, [pc, #496]	; (8007f5c <HAL_TIM_PWM_ConfigChannel+0x23c>)
 8007d6a:	f7fa fa3e 	bl	80021ea <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	689b      	ldr	r3, [r3, #8]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d008      	beq.n	8007d88 <HAL_TIM_PWM_ConfigChannel+0x68>
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	2b02      	cmp	r3, #2
 8007d7c:	d004      	beq.n	8007d88 <HAL_TIM_PWM_ConfigChannel+0x68>
 8007d7e:	f241 0114 	movw	r1, #4116	; 0x1014
 8007d82:	4876      	ldr	r0, [pc, #472]	; (8007f5c <HAL_TIM_PWM_ConfigChannel+0x23c>)
 8007d84:	f7fa fa31 	bl	80021ea <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	691b      	ldr	r3, [r3, #16]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d008      	beq.n	8007da2 <HAL_TIM_PWM_ConfigChannel+0x82>
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	691b      	ldr	r3, [r3, #16]
 8007d94:	2b04      	cmp	r3, #4
 8007d96:	d004      	beq.n	8007da2 <HAL_TIM_PWM_ConfigChannel+0x82>
 8007d98:	f241 0115 	movw	r1, #4117	; 0x1015
 8007d9c:	486f      	ldr	r0, [pc, #444]	; (8007f5c <HAL_TIM_PWM_ConfigChannel+0x23c>)
 8007d9e:	f7fa fa24 	bl	80021ea <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	d101      	bne.n	8007db0 <HAL_TIM_PWM_ConfigChannel+0x90>
 8007dac:	2302      	movs	r3, #2
 8007dae:	e17a      	b.n	80080a6 <HAL_TIM_PWM_ConfigChannel+0x386>
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2201      	movs	r2, #1
 8007db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2b0c      	cmp	r3, #12
 8007dbc:	f200 816d 	bhi.w	800809a <HAL_TIM_PWM_ConfigChannel+0x37a>
 8007dc0:	a201      	add	r2, pc, #4	; (adr r2, 8007dc8 <HAL_TIM_PWM_ConfigChannel+0xa8>)
 8007dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dc6:	bf00      	nop
 8007dc8:	08007dfd 	.word	0x08007dfd
 8007dcc:	0800809b 	.word	0x0800809b
 8007dd0:	0800809b 	.word	0x0800809b
 8007dd4:	0800809b 	.word	0x0800809b
 8007dd8:	08007ebf 	.word	0x08007ebf
 8007ddc:	0800809b 	.word	0x0800809b
 8007de0:	0800809b 	.word	0x0800809b
 8007de4:	0800809b 	.word	0x0800809b
 8007de8:	08007f8d 	.word	0x08007f8d
 8007dec:	0800809b 	.word	0x0800809b
 8007df0:	0800809b 	.word	0x0800809b
 8007df4:	0800809b 	.word	0x0800809b
 8007df8:	08008013 	.word	0x08008013
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a57      	ldr	r2, [pc, #348]	; (8007f60 <HAL_TIM_PWM_ConfigChannel+0x240>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d03b      	beq.n	8007e7e <HAL_TIM_PWM_ConfigChannel+0x15e>
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a56      	ldr	r2, [pc, #344]	; (8007f64 <HAL_TIM_PWM_ConfigChannel+0x244>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d036      	beq.n	8007e7e <HAL_TIM_PWM_ConfigChannel+0x15e>
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e18:	d031      	beq.n	8007e7e <HAL_TIM_PWM_ConfigChannel+0x15e>
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a52      	ldr	r2, [pc, #328]	; (8007f68 <HAL_TIM_PWM_ConfigChannel+0x248>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d02c      	beq.n	8007e7e <HAL_TIM_PWM_ConfigChannel+0x15e>
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a50      	ldr	r2, [pc, #320]	; (8007f6c <HAL_TIM_PWM_ConfigChannel+0x24c>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d027      	beq.n	8007e7e <HAL_TIM_PWM_ConfigChannel+0x15e>
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a4f      	ldr	r2, [pc, #316]	; (8007f70 <HAL_TIM_PWM_ConfigChannel+0x250>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d022      	beq.n	8007e7e <HAL_TIM_PWM_ConfigChannel+0x15e>
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a4d      	ldr	r2, [pc, #308]	; (8007f74 <HAL_TIM_PWM_ConfigChannel+0x254>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d01d      	beq.n	8007e7e <HAL_TIM_PWM_ConfigChannel+0x15e>
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a4c      	ldr	r2, [pc, #304]	; (8007f78 <HAL_TIM_PWM_ConfigChannel+0x258>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d018      	beq.n	8007e7e <HAL_TIM_PWM_ConfigChannel+0x15e>
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a4a      	ldr	r2, [pc, #296]	; (8007f7c <HAL_TIM_PWM_ConfigChannel+0x25c>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d013      	beq.n	8007e7e <HAL_TIM_PWM_ConfigChannel+0x15e>
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a49      	ldr	r2, [pc, #292]	; (8007f80 <HAL_TIM_PWM_ConfigChannel+0x260>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d00e      	beq.n	8007e7e <HAL_TIM_PWM_ConfigChannel+0x15e>
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a47      	ldr	r2, [pc, #284]	; (8007f84 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d009      	beq.n	8007e7e <HAL_TIM_PWM_ConfigChannel+0x15e>
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a46      	ldr	r2, [pc, #280]	; (8007f88 <HAL_TIM_PWM_ConfigChannel+0x268>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d004      	beq.n	8007e7e <HAL_TIM_PWM_ConfigChannel+0x15e>
 8007e74:	f241 011f 	movw	r1, #4127	; 0x101f
 8007e78:	4838      	ldr	r0, [pc, #224]	; (8007f5c <HAL_TIM_PWM_ConfigChannel+0x23c>)
 8007e7a:	f7fa f9b6 	bl	80021ea <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	68b9      	ldr	r1, [r7, #8]
 8007e84:	4618      	mov	r0, r3
 8007e86:	f000 f9d9 	bl	800823c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	699a      	ldr	r2, [r3, #24]
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f042 0208 	orr.w	r2, r2, #8
 8007e98:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	699a      	ldr	r2, [r3, #24]
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f022 0204 	bic.w	r2, r2, #4
 8007ea8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	6999      	ldr	r1, [r3, #24]
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	691a      	ldr	r2, [r3, #16]
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	430a      	orrs	r2, r1
 8007eba:	619a      	str	r2, [r3, #24]
      break;
 8007ebc:	e0ee      	b.n	800809c <HAL_TIM_PWM_ConfigChannel+0x37c>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a27      	ldr	r2, [pc, #156]	; (8007f60 <HAL_TIM_PWM_ConfigChannel+0x240>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d027      	beq.n	8007f18 <HAL_TIM_PWM_ConfigChannel+0x1f8>
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a25      	ldr	r2, [pc, #148]	; (8007f64 <HAL_TIM_PWM_ConfigChannel+0x244>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d022      	beq.n	8007f18 <HAL_TIM_PWM_ConfigChannel+0x1f8>
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007eda:	d01d      	beq.n	8007f18 <HAL_TIM_PWM_ConfigChannel+0x1f8>
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a21      	ldr	r2, [pc, #132]	; (8007f68 <HAL_TIM_PWM_ConfigChannel+0x248>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d018      	beq.n	8007f18 <HAL_TIM_PWM_ConfigChannel+0x1f8>
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a20      	ldr	r2, [pc, #128]	; (8007f6c <HAL_TIM_PWM_ConfigChannel+0x24c>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d013      	beq.n	8007f18 <HAL_TIM_PWM_ConfigChannel+0x1f8>
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a1e      	ldr	r2, [pc, #120]	; (8007f70 <HAL_TIM_PWM_ConfigChannel+0x250>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d00e      	beq.n	8007f18 <HAL_TIM_PWM_ConfigChannel+0x1f8>
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4a1d      	ldr	r2, [pc, #116]	; (8007f74 <HAL_TIM_PWM_ConfigChannel+0x254>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d009      	beq.n	8007f18 <HAL_TIM_PWM_ConfigChannel+0x1f8>
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a1d      	ldr	r2, [pc, #116]	; (8007f80 <HAL_TIM_PWM_ConfigChannel+0x260>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d004      	beq.n	8007f18 <HAL_TIM_PWM_ConfigChannel+0x1f8>
 8007f0e:	f241 0130 	movw	r1, #4144	; 0x1030
 8007f12:	4812      	ldr	r0, [pc, #72]	; (8007f5c <HAL_TIM_PWM_ConfigChannel+0x23c>)
 8007f14:	f7fa f969 	bl	80021ea <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	68b9      	ldr	r1, [r7, #8]
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f000 fa26 	bl	8008370 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	699a      	ldr	r2, [r3, #24]
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	699a      	ldr	r2, [r3, #24]
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	6999      	ldr	r1, [r3, #24]
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	691b      	ldr	r3, [r3, #16]
 8007f4e:	021a      	lsls	r2, r3, #8
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	430a      	orrs	r2, r1
 8007f56:	619a      	str	r2, [r3, #24]
      break;
 8007f58:	e0a0      	b.n	800809c <HAL_TIM_PWM_ConfigChannel+0x37c>
 8007f5a:	bf00      	nop
 8007f5c:	0800c130 	.word	0x0800c130
 8007f60:	40012c00 	.word	0x40012c00
 8007f64:	40013400 	.word	0x40013400
 8007f68:	40000400 	.word	0x40000400
 8007f6c:	40000800 	.word	0x40000800
 8007f70:	40000c00 	.word	0x40000c00
 8007f74:	40014c00 	.word	0x40014c00
 8007f78:	40015000 	.word	0x40015000
 8007f7c:	40015400 	.word	0x40015400
 8007f80:	40001800 	.word	0x40001800
 8007f84:	40001c00 	.word	0x40001c00
 8007f88:	40002000 	.word	0x40002000
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a47      	ldr	r2, [pc, #284]	; (80080b0 <HAL_TIM_PWM_ConfigChannel+0x390>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d01d      	beq.n	8007fd2 <HAL_TIM_PWM_ConfigChannel+0x2b2>
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a46      	ldr	r2, [pc, #280]	; (80080b4 <HAL_TIM_PWM_ConfigChannel+0x394>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d018      	beq.n	8007fd2 <HAL_TIM_PWM_ConfigChannel+0x2b2>
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fa8:	d013      	beq.n	8007fd2 <HAL_TIM_PWM_ConfigChannel+0x2b2>
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4a42      	ldr	r2, [pc, #264]	; (80080b8 <HAL_TIM_PWM_ConfigChannel+0x398>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d00e      	beq.n	8007fd2 <HAL_TIM_PWM_ConfigChannel+0x2b2>
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a40      	ldr	r2, [pc, #256]	; (80080bc <HAL_TIM_PWM_ConfigChannel+0x39c>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d009      	beq.n	8007fd2 <HAL_TIM_PWM_ConfigChannel+0x2b2>
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4a3f      	ldr	r2, [pc, #252]	; (80080c0 <HAL_TIM_PWM_ConfigChannel+0x3a0>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d004      	beq.n	8007fd2 <HAL_TIM_PWM_ConfigChannel+0x2b2>
 8007fc8:	f241 0141 	movw	r1, #4161	; 0x1041
 8007fcc:	483d      	ldr	r0, [pc, #244]	; (80080c4 <HAL_TIM_PWM_ConfigChannel+0x3a4>)
 8007fce:	f7fa f90c 	bl	80021ea <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	68b9      	ldr	r1, [r7, #8]
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f000 fa67 	bl	80084ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	69da      	ldr	r2, [r3, #28]
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f042 0208 	orr.w	r2, r2, #8
 8007fec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	69da      	ldr	r2, [r3, #28]
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f022 0204 	bic.w	r2, r2, #4
 8007ffc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	69d9      	ldr	r1, [r3, #28]
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	691a      	ldr	r2, [r3, #16]
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	430a      	orrs	r2, r1
 800800e:	61da      	str	r2, [r3, #28]
      break;
 8008010:	e044      	b.n	800809c <HAL_TIM_PWM_ConfigChannel+0x37c>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a26      	ldr	r2, [pc, #152]	; (80080b0 <HAL_TIM_PWM_ConfigChannel+0x390>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d01d      	beq.n	8008058 <HAL_TIM_PWM_ConfigChannel+0x338>
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a24      	ldr	r2, [pc, #144]	; (80080b4 <HAL_TIM_PWM_ConfigChannel+0x394>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d018      	beq.n	8008058 <HAL_TIM_PWM_ConfigChannel+0x338>
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800802e:	d013      	beq.n	8008058 <HAL_TIM_PWM_ConfigChannel+0x338>
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a20      	ldr	r2, [pc, #128]	; (80080b8 <HAL_TIM_PWM_ConfigChannel+0x398>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d00e      	beq.n	8008058 <HAL_TIM_PWM_ConfigChannel+0x338>
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4a1f      	ldr	r2, [pc, #124]	; (80080bc <HAL_TIM_PWM_ConfigChannel+0x39c>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d009      	beq.n	8008058 <HAL_TIM_PWM_ConfigChannel+0x338>
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a1d      	ldr	r2, [pc, #116]	; (80080c0 <HAL_TIM_PWM_ConfigChannel+0x3a0>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d004      	beq.n	8008058 <HAL_TIM_PWM_ConfigChannel+0x338>
 800804e:	f241 0152 	movw	r1, #4178	; 0x1052
 8008052:	481c      	ldr	r0, [pc, #112]	; (80080c4 <HAL_TIM_PWM_ConfigChannel+0x3a4>)
 8008054:	f7fa f8c9 	bl	80021ea <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	68b9      	ldr	r1, [r7, #8]
 800805e:	4618      	mov	r0, r3
 8008060:	f000 fac2 	bl	80085e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	69da      	ldr	r2, [r3, #28]
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008072:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	69da      	ldr	r2, [r3, #28]
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008082:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	69d9      	ldr	r1, [r3, #28]
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	691b      	ldr	r3, [r3, #16]
 800808e:	021a      	lsls	r2, r3, #8
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	430a      	orrs	r2, r1
 8008096:	61da      	str	r2, [r3, #28]
      break;
 8008098:	e000      	b.n	800809c <HAL_TIM_PWM_ConfigChannel+0x37c>
    }

    default:
      break;
 800809a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	2200      	movs	r2, #0
 80080a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80080a4:	2300      	movs	r3, #0
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	3710      	adds	r7, #16
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}
 80080ae:	bf00      	nop
 80080b0:	40012c00 	.word	0x40012c00
 80080b4:	40013400 	.word	0x40013400
 80080b8:	40000400 	.word	0x40000400
 80080bc:	40000800 	.word	0x40000800
 80080c0:	40000c00 	.word	0x40000c00
 80080c4:	0800c130 	.word	0x0800c130

080080c8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b083      	sub	sp, #12
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80080d0:	bf00      	nop
 80080d2:	370c      	adds	r7, #12
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bc80      	pop	{r7}
 80080d8:	4770      	bx	lr

080080da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80080da:	b480      	push	{r7}
 80080dc:	b083      	sub	sp, #12
 80080de:	af00      	add	r7, sp, #0
 80080e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80080e2:	bf00      	nop
 80080e4:	370c      	adds	r7, #12
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bc80      	pop	{r7}
 80080ea:	4770      	bx	lr

080080ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b083      	sub	sp, #12
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80080f4:	bf00      	nop
 80080f6:	370c      	adds	r7, #12
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bc80      	pop	{r7}
 80080fc:	4770      	bx	lr
	...

08008100 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008100:	b480      	push	{r7}
 8008102:	b085      	sub	sp, #20
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	4a3f      	ldr	r2, [pc, #252]	; (8008210 <TIM_Base_SetConfig+0x110>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d013      	beq.n	8008140 <TIM_Base_SetConfig+0x40>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	4a3e      	ldr	r2, [pc, #248]	; (8008214 <TIM_Base_SetConfig+0x114>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d00f      	beq.n	8008140 <TIM_Base_SetConfig+0x40>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008126:	d00b      	beq.n	8008140 <TIM_Base_SetConfig+0x40>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	4a3b      	ldr	r2, [pc, #236]	; (8008218 <TIM_Base_SetConfig+0x118>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d007      	beq.n	8008140 <TIM_Base_SetConfig+0x40>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	4a3a      	ldr	r2, [pc, #232]	; (800821c <TIM_Base_SetConfig+0x11c>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d003      	beq.n	8008140 <TIM_Base_SetConfig+0x40>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	4a39      	ldr	r2, [pc, #228]	; (8008220 <TIM_Base_SetConfig+0x120>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d108      	bne.n	8008152 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008146:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	68fa      	ldr	r2, [r7, #12]
 800814e:	4313      	orrs	r3, r2
 8008150:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	4a2e      	ldr	r2, [pc, #184]	; (8008210 <TIM_Base_SetConfig+0x110>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d02b      	beq.n	80081b2 <TIM_Base_SetConfig+0xb2>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	4a2d      	ldr	r2, [pc, #180]	; (8008214 <TIM_Base_SetConfig+0x114>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d027      	beq.n	80081b2 <TIM_Base_SetConfig+0xb2>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008168:	d023      	beq.n	80081b2 <TIM_Base_SetConfig+0xb2>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	4a2a      	ldr	r2, [pc, #168]	; (8008218 <TIM_Base_SetConfig+0x118>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d01f      	beq.n	80081b2 <TIM_Base_SetConfig+0xb2>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	4a29      	ldr	r2, [pc, #164]	; (800821c <TIM_Base_SetConfig+0x11c>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d01b      	beq.n	80081b2 <TIM_Base_SetConfig+0xb2>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	4a28      	ldr	r2, [pc, #160]	; (8008220 <TIM_Base_SetConfig+0x120>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d017      	beq.n	80081b2 <TIM_Base_SetConfig+0xb2>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	4a27      	ldr	r2, [pc, #156]	; (8008224 <TIM_Base_SetConfig+0x124>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d013      	beq.n	80081b2 <TIM_Base_SetConfig+0xb2>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	4a26      	ldr	r2, [pc, #152]	; (8008228 <TIM_Base_SetConfig+0x128>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d00f      	beq.n	80081b2 <TIM_Base_SetConfig+0xb2>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	4a25      	ldr	r2, [pc, #148]	; (800822c <TIM_Base_SetConfig+0x12c>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d00b      	beq.n	80081b2 <TIM_Base_SetConfig+0xb2>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	4a24      	ldr	r2, [pc, #144]	; (8008230 <TIM_Base_SetConfig+0x130>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d007      	beq.n	80081b2 <TIM_Base_SetConfig+0xb2>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	4a23      	ldr	r2, [pc, #140]	; (8008234 <TIM_Base_SetConfig+0x134>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d003      	beq.n	80081b2 <TIM_Base_SetConfig+0xb2>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	4a22      	ldr	r2, [pc, #136]	; (8008238 <TIM_Base_SetConfig+0x138>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d108      	bne.n	80081c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	68db      	ldr	r3, [r3, #12]
 80081be:	68fa      	ldr	r2, [r7, #12]
 80081c0:	4313      	orrs	r3, r2
 80081c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	695b      	ldr	r3, [r3, #20]
 80081ce:	4313      	orrs	r3, r2
 80081d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	68fa      	ldr	r2, [r7, #12]
 80081d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	689a      	ldr	r2, [r3, #8]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	681a      	ldr	r2, [r3, #0]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	4a09      	ldr	r2, [pc, #36]	; (8008210 <TIM_Base_SetConfig+0x110>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d003      	beq.n	80081f8 <TIM_Base_SetConfig+0xf8>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	4a08      	ldr	r2, [pc, #32]	; (8008214 <TIM_Base_SetConfig+0x114>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d103      	bne.n	8008200 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	691a      	ldr	r2, [r3, #16]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2201      	movs	r2, #1
 8008204:	615a      	str	r2, [r3, #20]
}
 8008206:	bf00      	nop
 8008208:	3714      	adds	r7, #20
 800820a:	46bd      	mov	sp, r7
 800820c:	bc80      	pop	{r7}
 800820e:	4770      	bx	lr
 8008210:	40012c00 	.word	0x40012c00
 8008214:	40013400 	.word	0x40013400
 8008218:	40000400 	.word	0x40000400
 800821c:	40000800 	.word	0x40000800
 8008220:	40000c00 	.word	0x40000c00
 8008224:	40014c00 	.word	0x40014c00
 8008228:	40015000 	.word	0x40015000
 800822c:	40015400 	.word	0x40015400
 8008230:	40001800 	.word	0x40001800
 8008234:	40001c00 	.word	0x40001c00
 8008238:	40002000 	.word	0x40002000

0800823c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b086      	sub	sp, #24
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
 8008244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6a1b      	ldr	r3, [r3, #32]
 800824a:	f023 0201 	bic.w	r2, r3, #1
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6a1b      	ldr	r3, [r3, #32]
 8008256:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	685b      	ldr	r3, [r3, #4]
 800825c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	699b      	ldr	r3, [r3, #24]
 8008262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800826a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	f023 0303 	bic.w	r3, r3, #3
 8008272:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	68fa      	ldr	r2, [r7, #12]
 800827a:	4313      	orrs	r3, r2
 800827c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	f023 0302 	bic.w	r3, r3, #2
 8008284:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	689b      	ldr	r3, [r3, #8]
 800828a:	697a      	ldr	r2, [r7, #20]
 800828c:	4313      	orrs	r3, r2
 800828e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	4a34      	ldr	r2, [pc, #208]	; (8008364 <TIM_OC1_SetConfig+0x128>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d003      	beq.n	80082a0 <TIM_OC1_SetConfig+0x64>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	4a33      	ldr	r2, [pc, #204]	; (8008368 <TIM_OC1_SetConfig+0x12c>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d119      	bne.n	80082d4 <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	68db      	ldr	r3, [r3, #12]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d008      	beq.n	80082ba <TIM_OC1_SetConfig+0x7e>
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	68db      	ldr	r3, [r3, #12]
 80082ac:	2b08      	cmp	r3, #8
 80082ae:	d004      	beq.n	80082ba <TIM_OC1_SetConfig+0x7e>
 80082b0:	f641 2103 	movw	r1, #6659	; 0x1a03
 80082b4:	482d      	ldr	r0, [pc, #180]	; (800836c <TIM_OC1_SetConfig+0x130>)
 80082b6:	f7f9 ff98 	bl	80021ea <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	f023 0308 	bic.w	r3, r3, #8
 80082c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	68db      	ldr	r3, [r3, #12]
 80082c6:	697a      	ldr	r2, [r7, #20]
 80082c8:	4313      	orrs	r3, r2
 80082ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	f023 0304 	bic.w	r3, r3, #4
 80082d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	4a23      	ldr	r2, [pc, #140]	; (8008364 <TIM_OC1_SetConfig+0x128>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d003      	beq.n	80082e4 <TIM_OC1_SetConfig+0xa8>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	4a22      	ldr	r2, [pc, #136]	; (8008368 <TIM_OC1_SetConfig+0x12c>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d12d      	bne.n	8008340 <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	699b      	ldr	r3, [r3, #24]
 80082e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082ec:	d008      	beq.n	8008300 <TIM_OC1_SetConfig+0xc4>
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	699b      	ldr	r3, [r3, #24]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d004      	beq.n	8008300 <TIM_OC1_SetConfig+0xc4>
 80082f6:	f641 2110 	movw	r1, #6672	; 0x1a10
 80082fa:	481c      	ldr	r0, [pc, #112]	; (800836c <TIM_OC1_SetConfig+0x130>)
 80082fc:	f7f9 ff75 	bl	80021ea <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	695b      	ldr	r3, [r3, #20]
 8008304:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008308:	d008      	beq.n	800831c <TIM_OC1_SetConfig+0xe0>
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	695b      	ldr	r3, [r3, #20]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d004      	beq.n	800831c <TIM_OC1_SetConfig+0xe0>
 8008312:	f641 2111 	movw	r1, #6673	; 0x1a11
 8008316:	4815      	ldr	r0, [pc, #84]	; (800836c <TIM_OC1_SetConfig+0x130>)
 8008318:	f7f9 ff67 	bl	80021ea <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008322:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800832a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	695b      	ldr	r3, [r3, #20]
 8008330:	693a      	ldr	r2, [r7, #16]
 8008332:	4313      	orrs	r3, r2
 8008334:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	699b      	ldr	r3, [r3, #24]
 800833a:	693a      	ldr	r2, [r7, #16]
 800833c:	4313      	orrs	r3, r2
 800833e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	693a      	ldr	r2, [r7, #16]
 8008344:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	68fa      	ldr	r2, [r7, #12]
 800834a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	685a      	ldr	r2, [r3, #4]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	697a      	ldr	r2, [r7, #20]
 8008358:	621a      	str	r2, [r3, #32]
}
 800835a:	bf00      	nop
 800835c:	3718      	adds	r7, #24
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}
 8008362:	bf00      	nop
 8008364:	40012c00 	.word	0x40012c00
 8008368:	40013400 	.word	0x40013400
 800836c:	0800c130 	.word	0x0800c130

08008370 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b086      	sub	sp, #24
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
 8008378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6a1b      	ldr	r3, [r3, #32]
 800837e:	f023 0210 	bic.w	r2, r3, #16
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6a1b      	ldr	r3, [r3, #32]
 800838a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	699b      	ldr	r3, [r3, #24]
 8008396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800839e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	021b      	lsls	r3, r3, #8
 80083ae:	68fa      	ldr	r2, [r7, #12]
 80083b0:	4313      	orrs	r3, r2
 80083b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	f023 0320 	bic.w	r3, r3, #32
 80083ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	689b      	ldr	r3, [r3, #8]
 80083c0:	011b      	lsls	r3, r3, #4
 80083c2:	697a      	ldr	r2, [r7, #20]
 80083c4:	4313      	orrs	r3, r2
 80083c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	4a35      	ldr	r2, [pc, #212]	; (80084a0 <TIM_OC2_SetConfig+0x130>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d003      	beq.n	80083d8 <TIM_OC2_SetConfig+0x68>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	4a34      	ldr	r2, [pc, #208]	; (80084a4 <TIM_OC2_SetConfig+0x134>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d11a      	bne.n	800840e <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	68db      	ldr	r3, [r3, #12]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d008      	beq.n	80083f2 <TIM_OC2_SetConfig+0x82>
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	68db      	ldr	r3, [r3, #12]
 80083e4:	2b08      	cmp	r3, #8
 80083e6:	d004      	beq.n	80083f2 <TIM_OC2_SetConfig+0x82>
 80083e8:	f641 214e 	movw	r1, #6734	; 0x1a4e
 80083ec:	482e      	ldr	r0, [pc, #184]	; (80084a8 <TIM_OC2_SetConfig+0x138>)
 80083ee:	f7f9 fefc 	bl	80021ea <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	68db      	ldr	r3, [r3, #12]
 80083fe:	011b      	lsls	r3, r3, #4
 8008400:	697a      	ldr	r2, [r7, #20]
 8008402:	4313      	orrs	r3, r2
 8008404:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800840c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	4a23      	ldr	r2, [pc, #140]	; (80084a0 <TIM_OC2_SetConfig+0x130>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d003      	beq.n	800841e <TIM_OC2_SetConfig+0xae>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	4a22      	ldr	r2, [pc, #136]	; (80084a4 <TIM_OC2_SetConfig+0x134>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d12f      	bne.n	800847e <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	699b      	ldr	r3, [r3, #24]
 8008422:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008426:	d008      	beq.n	800843a <TIM_OC2_SetConfig+0xca>
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	699b      	ldr	r3, [r3, #24]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d004      	beq.n	800843a <TIM_OC2_SetConfig+0xca>
 8008430:	f641 215c 	movw	r1, #6748	; 0x1a5c
 8008434:	481c      	ldr	r0, [pc, #112]	; (80084a8 <TIM_OC2_SetConfig+0x138>)
 8008436:	f7f9 fed8 	bl	80021ea <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	695b      	ldr	r3, [r3, #20]
 800843e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008442:	d008      	beq.n	8008456 <TIM_OC2_SetConfig+0xe6>
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	695b      	ldr	r3, [r3, #20]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d004      	beq.n	8008456 <TIM_OC2_SetConfig+0xe6>
 800844c:	f641 215d 	movw	r1, #6749	; 0x1a5d
 8008450:	4815      	ldr	r0, [pc, #84]	; (80084a8 <TIM_OC2_SetConfig+0x138>)
 8008452:	f7f9 feca 	bl	80021ea <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800845c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008464:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	695b      	ldr	r3, [r3, #20]
 800846a:	009b      	lsls	r3, r3, #2
 800846c:	693a      	ldr	r2, [r7, #16]
 800846e:	4313      	orrs	r3, r2
 8008470:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	699b      	ldr	r3, [r3, #24]
 8008476:	009b      	lsls	r3, r3, #2
 8008478:	693a      	ldr	r2, [r7, #16]
 800847a:	4313      	orrs	r3, r2
 800847c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	693a      	ldr	r2, [r7, #16]
 8008482:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	68fa      	ldr	r2, [r7, #12]
 8008488:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	685a      	ldr	r2, [r3, #4]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	697a      	ldr	r2, [r7, #20]
 8008496:	621a      	str	r2, [r3, #32]
}
 8008498:	bf00      	nop
 800849a:	3718      	adds	r7, #24
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}
 80084a0:	40012c00 	.word	0x40012c00
 80084a4:	40013400 	.word	0x40013400
 80084a8:	0800c130 	.word	0x0800c130

080084ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b086      	sub	sp, #24
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
 80084b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6a1b      	ldr	r3, [r3, #32]
 80084ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6a1b      	ldr	r3, [r3, #32]
 80084c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	685b      	ldr	r3, [r3, #4]
 80084cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	69db      	ldr	r3, [r3, #28]
 80084d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f023 0303 	bic.w	r3, r3, #3
 80084e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	68fa      	ldr	r2, [r7, #12]
 80084ea:	4313      	orrs	r3, r2
 80084ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80084f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	689b      	ldr	r3, [r3, #8]
 80084fa:	021b      	lsls	r3, r3, #8
 80084fc:	697a      	ldr	r2, [r7, #20]
 80084fe:	4313      	orrs	r3, r2
 8008500:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	4a35      	ldr	r2, [pc, #212]	; (80085dc <TIM_OC3_SetConfig+0x130>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d003      	beq.n	8008512 <TIM_OC3_SetConfig+0x66>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	4a34      	ldr	r2, [pc, #208]	; (80085e0 <TIM_OC3_SetConfig+0x134>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d11a      	bne.n	8008548 <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	68db      	ldr	r3, [r3, #12]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d008      	beq.n	800852c <TIM_OC3_SetConfig+0x80>
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	68db      	ldr	r3, [r3, #12]
 800851e:	2b08      	cmp	r3, #8
 8008520:	d004      	beq.n	800852c <TIM_OC3_SetConfig+0x80>
 8008522:	f641 2199 	movw	r1, #6809	; 0x1a99
 8008526:	482f      	ldr	r0, [pc, #188]	; (80085e4 <TIM_OC3_SetConfig+0x138>)
 8008528:	f7f9 fe5f 	bl	80021ea <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008532:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	68db      	ldr	r3, [r3, #12]
 8008538:	021b      	lsls	r3, r3, #8
 800853a:	697a      	ldr	r2, [r7, #20]
 800853c:	4313      	orrs	r3, r2
 800853e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008546:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	4a24      	ldr	r2, [pc, #144]	; (80085dc <TIM_OC3_SetConfig+0x130>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d003      	beq.n	8008558 <TIM_OC3_SetConfig+0xac>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	4a23      	ldr	r2, [pc, #140]	; (80085e0 <TIM_OC3_SetConfig+0x134>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d12f      	bne.n	80085b8 <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	699b      	ldr	r3, [r3, #24]
 800855c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008560:	d008      	beq.n	8008574 <TIM_OC3_SetConfig+0xc8>
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	699b      	ldr	r3, [r3, #24]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d004      	beq.n	8008574 <TIM_OC3_SetConfig+0xc8>
 800856a:	f641 21a6 	movw	r1, #6822	; 0x1aa6
 800856e:	481d      	ldr	r0, [pc, #116]	; (80085e4 <TIM_OC3_SetConfig+0x138>)
 8008570:	f7f9 fe3b 	bl	80021ea <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	695b      	ldr	r3, [r3, #20]
 8008578:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800857c:	d008      	beq.n	8008590 <TIM_OC3_SetConfig+0xe4>
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	695b      	ldr	r3, [r3, #20]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d004      	beq.n	8008590 <TIM_OC3_SetConfig+0xe4>
 8008586:	f641 21a7 	movw	r1, #6823	; 0x1aa7
 800858a:	4816      	ldr	r0, [pc, #88]	; (80085e4 <TIM_OC3_SetConfig+0x138>)
 800858c:	f7f9 fe2d 	bl	80021ea <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008596:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800859e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	695b      	ldr	r3, [r3, #20]
 80085a4:	011b      	lsls	r3, r3, #4
 80085a6:	693a      	ldr	r2, [r7, #16]
 80085a8:	4313      	orrs	r3, r2
 80085aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	699b      	ldr	r3, [r3, #24]
 80085b0:	011b      	lsls	r3, r3, #4
 80085b2:	693a      	ldr	r2, [r7, #16]
 80085b4:	4313      	orrs	r3, r2
 80085b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	693a      	ldr	r2, [r7, #16]
 80085bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	68fa      	ldr	r2, [r7, #12]
 80085c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	685a      	ldr	r2, [r3, #4]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	697a      	ldr	r2, [r7, #20]
 80085d0:	621a      	str	r2, [r3, #32]
}
 80085d2:	bf00      	nop
 80085d4:	3718      	adds	r7, #24
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}
 80085da:	bf00      	nop
 80085dc:	40012c00 	.word	0x40012c00
 80085e0:	40013400 	.word	0x40013400
 80085e4:	0800c130 	.word	0x0800c130

080085e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b086      	sub	sp, #24
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6a1b      	ldr	r3, [r3, #32]
 80085f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6a1b      	ldr	r3, [r3, #32]
 8008602:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	69db      	ldr	r3, [r3, #28]
 800860e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008616:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800861e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	021b      	lsls	r3, r3, #8
 8008626:	68fa      	ldr	r2, [r7, #12]
 8008628:	4313      	orrs	r3, r2
 800862a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800862c:	693b      	ldr	r3, [r7, #16]
 800862e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008632:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	689b      	ldr	r3, [r3, #8]
 8008638:	031b      	lsls	r3, r3, #12
 800863a:	693a      	ldr	r2, [r7, #16]
 800863c:	4313      	orrs	r3, r2
 800863e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	4a18      	ldr	r2, [pc, #96]	; (80086a4 <TIM_OC4_SetConfig+0xbc>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d003      	beq.n	8008650 <TIM_OC4_SetConfig+0x68>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	4a17      	ldr	r2, [pc, #92]	; (80086a8 <TIM_OC4_SetConfig+0xc0>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d117      	bne.n	8008680 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	695b      	ldr	r3, [r3, #20]
 8008654:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008658:	d008      	beq.n	800866c <TIM_OC4_SetConfig+0x84>
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	695b      	ldr	r3, [r3, #20]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d004      	beq.n	800866c <TIM_OC4_SetConfig+0x84>
 8008662:	f641 21e5 	movw	r1, #6885	; 0x1ae5
 8008666:	4811      	ldr	r0, [pc, #68]	; (80086ac <TIM_OC4_SetConfig+0xc4>)
 8008668:	f7f9 fdbf 	bl	80021ea <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008672:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	695b      	ldr	r3, [r3, #20]
 8008678:	019b      	lsls	r3, r3, #6
 800867a:	697a      	ldr	r2, [r7, #20]
 800867c:	4313      	orrs	r3, r2
 800867e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	697a      	ldr	r2, [r7, #20]
 8008684:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	68fa      	ldr	r2, [r7, #12]
 800868a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	685a      	ldr	r2, [r3, #4]
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	693a      	ldr	r2, [r7, #16]
 8008698:	621a      	str	r2, [r3, #32]
}
 800869a:	bf00      	nop
 800869c:	3718      	adds	r7, #24
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}
 80086a2:	bf00      	nop
 80086a4:	40012c00 	.word	0x40012c00
 80086a8:	40013400 	.word	0x40013400
 80086ac:	0800c130 	.word	0x0800c130

080086b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b086      	sub	sp, #24
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	60f8      	str	r0, [r7, #12]
 80086b8:	60b9      	str	r1, [r7, #8]
 80086ba:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	4a32      	ldr	r2, [pc, #200]	; (8008788 <TIM_CCxChannelCmd+0xd8>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d030      	beq.n	8008726 <TIM_CCxChannelCmd+0x76>
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	4a31      	ldr	r2, [pc, #196]	; (800878c <TIM_CCxChannelCmd+0xdc>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d02c      	beq.n	8008726 <TIM_CCxChannelCmd+0x76>
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086d2:	d028      	beq.n	8008726 <TIM_CCxChannelCmd+0x76>
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	4a2e      	ldr	r2, [pc, #184]	; (8008790 <TIM_CCxChannelCmd+0xe0>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d024      	beq.n	8008726 <TIM_CCxChannelCmd+0x76>
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	4a2d      	ldr	r2, [pc, #180]	; (8008794 <TIM_CCxChannelCmd+0xe4>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d020      	beq.n	8008726 <TIM_CCxChannelCmd+0x76>
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	4a2c      	ldr	r2, [pc, #176]	; (8008798 <TIM_CCxChannelCmd+0xe8>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d01c      	beq.n	8008726 <TIM_CCxChannelCmd+0x76>
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	4a2b      	ldr	r2, [pc, #172]	; (800879c <TIM_CCxChannelCmd+0xec>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d018      	beq.n	8008726 <TIM_CCxChannelCmd+0x76>
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	4a2a      	ldr	r2, [pc, #168]	; (80087a0 <TIM_CCxChannelCmd+0xf0>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d014      	beq.n	8008726 <TIM_CCxChannelCmd+0x76>
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	4a29      	ldr	r2, [pc, #164]	; (80087a4 <TIM_CCxChannelCmd+0xf4>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d010      	beq.n	8008726 <TIM_CCxChannelCmd+0x76>
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	4a28      	ldr	r2, [pc, #160]	; (80087a8 <TIM_CCxChannelCmd+0xf8>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d00c      	beq.n	8008726 <TIM_CCxChannelCmd+0x76>
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	4a27      	ldr	r2, [pc, #156]	; (80087ac <TIM_CCxChannelCmd+0xfc>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d008      	beq.n	8008726 <TIM_CCxChannelCmd+0x76>
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	4a26      	ldr	r2, [pc, #152]	; (80087b0 <TIM_CCxChannelCmd+0x100>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d004      	beq.n	8008726 <TIM_CCxChannelCmd+0x76>
 800871c:	f641 41cb 	movw	r1, #7371	; 0x1ccb
 8008720:	4824      	ldr	r0, [pc, #144]	; (80087b4 <TIM_CCxChannelCmd+0x104>)
 8008722:	f7f9 fd62 	bl	80021ea <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d010      	beq.n	800874e <TIM_CCxChannelCmd+0x9e>
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	2b04      	cmp	r3, #4
 8008730:	d00d      	beq.n	800874e <TIM_CCxChannelCmd+0x9e>
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	2b08      	cmp	r3, #8
 8008736:	d00a      	beq.n	800874e <TIM_CCxChannelCmd+0x9e>
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	2b0c      	cmp	r3, #12
 800873c:	d007      	beq.n	800874e <TIM_CCxChannelCmd+0x9e>
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	2b3c      	cmp	r3, #60	; 0x3c
 8008742:	d004      	beq.n	800874e <TIM_CCxChannelCmd+0x9e>
 8008744:	f641 41cc 	movw	r1, #7372	; 0x1ccc
 8008748:	481a      	ldr	r0, [pc, #104]	; (80087b4 <TIM_CCxChannelCmd+0x104>)
 800874a:	f7f9 fd4e 	bl	80021ea <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	f003 031f 	and.w	r3, r3, #31
 8008754:	2201      	movs	r2, #1
 8008756:	fa02 f303 	lsl.w	r3, r2, r3
 800875a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	6a1a      	ldr	r2, [r3, #32]
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	43db      	mvns	r3, r3
 8008764:	401a      	ands	r2, r3
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	6a1a      	ldr	r2, [r3, #32]
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	f003 031f 	and.w	r3, r3, #31
 8008774:	6879      	ldr	r1, [r7, #4]
 8008776:	fa01 f303 	lsl.w	r3, r1, r3
 800877a:	431a      	orrs	r2, r3
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	621a      	str	r2, [r3, #32]
}
 8008780:	bf00      	nop
 8008782:	3718      	adds	r7, #24
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}
 8008788:	40012c00 	.word	0x40012c00
 800878c:	40013400 	.word	0x40013400
 8008790:	40000400 	.word	0x40000400
 8008794:	40000800 	.word	0x40000800
 8008798:	40000c00 	.word	0x40000c00
 800879c:	40014c00 	.word	0x40014c00
 80087a0:	40015000 	.word	0x40015000
 80087a4:	40015400 	.word	0x40015400
 80087a8:	40001800 	.word	0x40001800
 80087ac:	40001c00 	.word	0x40001c00
 80087b0:	40002000 	.word	0x40002000
 80087b4:	0800c130 	.word	0x0800c130

080087b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b084      	sub	sp, #16
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a64      	ldr	r2, [pc, #400]	; (8008958 <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d02c      	beq.n	8008826 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	4a62      	ldr	r2, [pc, #392]	; (800895c <HAL_TIMEx_MasterConfigSynchronization+0x1a4>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d027      	beq.n	8008826 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087de:	d022      	beq.n	8008826 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a5e      	ldr	r2, [pc, #376]	; (8008960 <HAL_TIMEx_MasterConfigSynchronization+0x1a8>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d01d      	beq.n	8008826 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4a5d      	ldr	r2, [pc, #372]	; (8008964 <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d018      	beq.n	8008826 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a5b      	ldr	r2, [pc, #364]	; (8008968 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d013      	beq.n	8008826 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4a5a      	ldr	r2, [pc, #360]	; (800896c <HAL_TIMEx_MasterConfigSynchronization+0x1b4>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d00e      	beq.n	8008826 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a58      	ldr	r2, [pc, #352]	; (8008970 <HAL_TIMEx_MasterConfigSynchronization+0x1b8>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d009      	beq.n	8008826 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a57      	ldr	r2, [pc, #348]	; (8008974 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d004      	beq.n	8008826 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800881c:	f240 715f 	movw	r1, #1887	; 0x75f
 8008820:	4855      	ldr	r0, [pc, #340]	; (8008978 <HAL_TIMEx_MasterConfigSynchronization+0x1c0>)
 8008822:	f7f9 fce2 	bl	80021ea <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d020      	beq.n	8008870 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	2b10      	cmp	r3, #16
 8008834:	d01c      	beq.n	8008870 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	2b20      	cmp	r3, #32
 800883c:	d018      	beq.n	8008870 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	2b30      	cmp	r3, #48	; 0x30
 8008844:	d014      	beq.n	8008870 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	2b40      	cmp	r3, #64	; 0x40
 800884c:	d010      	beq.n	8008870 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	2b50      	cmp	r3, #80	; 0x50
 8008854:	d00c      	beq.n	8008870 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	2b60      	cmp	r3, #96	; 0x60
 800885c:	d008      	beq.n	8008870 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	2b70      	cmp	r3, #112	; 0x70
 8008864:	d004      	beq.n	8008870 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008866:	f44f 61ec 	mov.w	r1, #1888	; 0x760
 800886a:	4843      	ldr	r0, [pc, #268]	; (8008978 <HAL_TIMEx_MasterConfigSynchronization+0x1c0>)
 800886c:	f7f9 fcbd 	bl	80021ea <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	685b      	ldr	r3, [r3, #4]
 8008874:	2b80      	cmp	r3, #128	; 0x80
 8008876:	d008      	beq.n	800888a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d004      	beq.n	800888a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 8008880:	f240 7161 	movw	r1, #1889	; 0x761
 8008884:	483c      	ldr	r0, [pc, #240]	; (8008978 <HAL_TIMEx_MasterConfigSynchronization+0x1c0>)
 8008886:	f7f9 fcb0 	bl	80021ea <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008890:	2b01      	cmp	r3, #1
 8008892:	d101      	bne.n	8008898 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8008894:	2302      	movs	r3, #2
 8008896:	e05a      	b.n	800894e <HAL_TIMEx_MasterConfigSynchronization+0x196>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2201      	movs	r2, #1
 800889c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2202      	movs	r2, #2
 80088a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	689b      	ldr	r3, [r3, #8]
 80088b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	68fa      	ldr	r2, [r7, #12]
 80088c6:	4313      	orrs	r3, r2
 80088c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	68fa      	ldr	r2, [r7, #12]
 80088d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4a20      	ldr	r2, [pc, #128]	; (8008958 <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d022      	beq.n	8008922 <HAL_TIMEx_MasterConfigSynchronization+0x16a>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4a1e      	ldr	r2, [pc, #120]	; (800895c <HAL_TIMEx_MasterConfigSynchronization+0x1a4>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d01d      	beq.n	8008922 <HAL_TIMEx_MasterConfigSynchronization+0x16a>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088ee:	d018      	beq.n	8008922 <HAL_TIMEx_MasterConfigSynchronization+0x16a>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4a1a      	ldr	r2, [pc, #104]	; (8008960 <HAL_TIMEx_MasterConfigSynchronization+0x1a8>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d013      	beq.n	8008922 <HAL_TIMEx_MasterConfigSynchronization+0x16a>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	4a19      	ldr	r2, [pc, #100]	; (8008964 <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d00e      	beq.n	8008922 <HAL_TIMEx_MasterConfigSynchronization+0x16a>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4a17      	ldr	r2, [pc, #92]	; (8008968 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d009      	beq.n	8008922 <HAL_TIMEx_MasterConfigSynchronization+0x16a>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4a1a      	ldr	r2, [pc, #104]	; (800897c <HAL_TIMEx_MasterConfigSynchronization+0x1c4>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d004      	beq.n	8008922 <HAL_TIMEx_MasterConfigSynchronization+0x16a>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4a15      	ldr	r2, [pc, #84]	; (8008974 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d10c      	bne.n	800893c <HAL_TIMEx_MasterConfigSynchronization+0x184>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008928:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	68ba      	ldr	r2, [r7, #8]
 8008930:	4313      	orrs	r3, r2
 8008932:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	68ba      	ldr	r2, [r7, #8]
 800893a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2201      	movs	r2, #1
 8008940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2200      	movs	r2, #0
 8008948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800894c:	2300      	movs	r3, #0
}
 800894e:	4618      	mov	r0, r3
 8008950:	3710      	adds	r7, #16
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}
 8008956:	bf00      	nop
 8008958:	40012c00 	.word	0x40012c00
 800895c:	40013400 	.word	0x40013400
 8008960:	40000400 	.word	0x40000400
 8008964:	40000800 	.word	0x40000800
 8008968:	40000c00 	.word	0x40000c00
 800896c:	40001000 	.word	0x40001000
 8008970:	40001400 	.word	0x40001400
 8008974:	40001800 	.word	0x40001800
 8008978:	0800c168 	.word	0x0800c168
 800897c:	40014c00 	.word	0x40014c00

08008980 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008980:	b480      	push	{r7}
 8008982:	b083      	sub	sp, #12
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008988:	bf00      	nop
 800898a:	370c      	adds	r7, #12
 800898c:	46bd      	mov	sp, r7
 800898e:	bc80      	pop	{r7}
 8008990:	4770      	bx	lr

08008992 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008992:	b480      	push	{r7}
 8008994:	b083      	sub	sp, #12
 8008996:	af00      	add	r7, sp, #0
 8008998:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800899a:	bf00      	nop
 800899c:	370c      	adds	r7, #12
 800899e:	46bd      	mov	sp, r7
 80089a0:	bc80      	pop	{r7}
 80089a2:	4770      	bx	lr

080089a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b082      	sub	sp, #8
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d101      	bne.n	80089b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80089b2:	2301      	movs	r3, #1
 80089b4:	e09c      	b.n	8008af0 <HAL_UART_Init+0x14c>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	699b      	ldr	r3, [r3, #24]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d02c      	beq.n	8008a18 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4a4d      	ldr	r2, [pc, #308]	; (8008af8 <HAL_UART_Init+0x154>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d00e      	beq.n	80089e6 <HAL_UART_Init+0x42>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4a4b      	ldr	r2, [pc, #300]	; (8008afc <HAL_UART_Init+0x158>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d009      	beq.n	80089e6 <HAL_UART_Init+0x42>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4a4a      	ldr	r2, [pc, #296]	; (8008b00 <HAL_UART_Init+0x15c>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d004      	beq.n	80089e6 <HAL_UART_Init+0x42>
 80089dc:	f44f 71a3 	mov.w	r1, #326	; 0x146
 80089e0:	4848      	ldr	r0, [pc, #288]	; (8008b04 <HAL_UART_Init+0x160>)
 80089e2:	f7f9 fc02 	bl	80021ea <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	699b      	ldr	r3, [r3, #24]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d032      	beq.n	8008a54 <HAL_UART_Init+0xb0>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	699b      	ldr	r3, [r3, #24]
 80089f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089f6:	d02d      	beq.n	8008a54 <HAL_UART_Init+0xb0>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	699b      	ldr	r3, [r3, #24]
 80089fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a00:	d028      	beq.n	8008a54 <HAL_UART_Init+0xb0>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	699b      	ldr	r3, [r3, #24]
 8008a06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a0a:	d023      	beq.n	8008a54 <HAL_UART_Init+0xb0>
 8008a0c:	f240 1147 	movw	r1, #327	; 0x147
 8008a10:	483c      	ldr	r0, [pc, #240]	; (8008b04 <HAL_UART_Init+0x160>)
 8008a12:	f7f9 fbea 	bl	80021ea <assert_failed>
 8008a16:	e01d      	b.n	8008a54 <HAL_UART_Init+0xb0>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4a36      	ldr	r2, [pc, #216]	; (8008af8 <HAL_UART_Init+0x154>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d018      	beq.n	8008a54 <HAL_UART_Init+0xb0>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4a35      	ldr	r2, [pc, #212]	; (8008afc <HAL_UART_Init+0x158>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d013      	beq.n	8008a54 <HAL_UART_Init+0xb0>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4a33      	ldr	r2, [pc, #204]	; (8008b00 <HAL_UART_Init+0x15c>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d00e      	beq.n	8008a54 <HAL_UART_Init+0xb0>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4a33      	ldr	r2, [pc, #204]	; (8008b08 <HAL_UART_Init+0x164>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d009      	beq.n	8008a54 <HAL_UART_Init+0xb0>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4a31      	ldr	r2, [pc, #196]	; (8008b0c <HAL_UART_Init+0x168>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d004      	beq.n	8008a54 <HAL_UART_Init+0xb0>
 8008a4a:	f240 114b 	movw	r1, #331	; 0x14b
 8008a4e:	482d      	ldr	r0, [pc, #180]	; (8008b04 <HAL_UART_Init+0x160>)
 8008a50:	f7f9 fbcb 	bl	80021ea <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	689b      	ldr	r3, [r3, #8]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d009      	beq.n	8008a70 <HAL_UART_Init+0xcc>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	689b      	ldr	r3, [r3, #8]
 8008a60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a64:	d004      	beq.n	8008a70 <HAL_UART_Init+0xcc>
 8008a66:	f240 114d 	movw	r1, #333	; 0x14d
 8008a6a:	4826      	ldr	r0, [pc, #152]	; (8008b04 <HAL_UART_Init+0x160>)
 8008a6c:	f7f9 fbbd 	bl	80021ea <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008a76:	b2db      	uxtb	r3, r3
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d106      	bne.n	8008a8a <HAL_UART_Init+0xe6>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f7f9 ffdb 	bl	8002a40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2224      	movs	r2, #36	; 0x24
 8008a8e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	68da      	ldr	r2, [r3, #12]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008aa0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f000 fc2e 	bl	8009304 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	691a      	ldr	r2, [r3, #16]
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008ab6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	695a      	ldr	r2, [r3, #20]
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008ac6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	68da      	ldr	r2, [r3, #12]
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008ad6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2200      	movs	r2, #0
 8008adc:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2220      	movs	r2, #32
 8008ae2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2220      	movs	r2, #32
 8008aea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008aee:	2300      	movs	r3, #0
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3708      	adds	r7, #8
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}
 8008af8:	40013800 	.word	0x40013800
 8008afc:	40004400 	.word	0x40004400
 8008b00:	40004800 	.word	0x40004800
 8008b04:	0800c1a4 	.word	0x0800c1a4
 8008b08:	40004c00 	.word	0x40004c00
 8008b0c:	40005000 	.word	0x40005000

08008b10 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b08a      	sub	sp, #40	; 0x28
 8008b14:	af02      	add	r7, sp, #8
 8008b16:	60f8      	str	r0, [r7, #12]
 8008b18:	60b9      	str	r1, [r7, #8]
 8008b1a:	603b      	str	r3, [r7, #0]
 8008b1c:	4613      	mov	r3, r2
 8008b1e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008b20:	2300      	movs	r3, #0
 8008b22:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008b2a:	b2db      	uxtb	r3, r3
 8008b2c:	2b20      	cmp	r3, #32
 8008b2e:	d17c      	bne.n	8008c2a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d002      	beq.n	8008b3c <HAL_UART_Transmit+0x2c>
 8008b36:	88fb      	ldrh	r3, [r7, #6]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d101      	bne.n	8008b40 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	e075      	b.n	8008c2c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008b46:	2b01      	cmp	r3, #1
 8008b48:	d101      	bne.n	8008b4e <HAL_UART_Transmit+0x3e>
 8008b4a:	2302      	movs	r3, #2
 8008b4c:	e06e      	b.n	8008c2c <HAL_UART_Transmit+0x11c>
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2201      	movs	r2, #1
 8008b52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	2221      	movs	r2, #33	; 0x21
 8008b60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008b64:	f7fa f990 	bl	8002e88 <HAL_GetTick>
 8008b68:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	88fa      	ldrh	r2, [r7, #6]
 8008b6e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	88fa      	ldrh	r2, [r7, #6]
 8008b74:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	689b      	ldr	r3, [r3, #8]
 8008b7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b7e:	d108      	bne.n	8008b92 <HAL_UART_Transmit+0x82>
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	691b      	ldr	r3, [r3, #16]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d104      	bne.n	8008b92 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	61bb      	str	r3, [r7, #24]
 8008b90:	e003      	b.n	8008b9a <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008b96:	2300      	movs	r3, #0
 8008b98:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8008ba2:	e02a      	b.n	8008bfa <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	9300      	str	r3, [sp, #0]
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	2200      	movs	r2, #0
 8008bac:	2180      	movs	r1, #128	; 0x80
 8008bae:	68f8      	ldr	r0, [r7, #12]
 8008bb0:	f000 fa46 	bl	8009040 <UART_WaitOnFlagUntilTimeout>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d001      	beq.n	8008bbe <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008bba:	2303      	movs	r3, #3
 8008bbc:	e036      	b.n	8008c2c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008bbe:	69fb      	ldr	r3, [r7, #28]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d10b      	bne.n	8008bdc <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008bc4:	69bb      	ldr	r3, [r7, #24]
 8008bc6:	881b      	ldrh	r3, [r3, #0]
 8008bc8:	461a      	mov	r2, r3
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008bd2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008bd4:	69bb      	ldr	r3, [r7, #24]
 8008bd6:	3302      	adds	r3, #2
 8008bd8:	61bb      	str	r3, [r7, #24]
 8008bda:	e007      	b.n	8008bec <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008bdc:	69fb      	ldr	r3, [r7, #28]
 8008bde:	781a      	ldrb	r2, [r3, #0]
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008be6:	69fb      	ldr	r3, [r7, #28]
 8008be8:	3301      	adds	r3, #1
 8008bea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008bf0:	b29b      	uxth	r3, r3
 8008bf2:	3b01      	subs	r3, #1
 8008bf4:	b29a      	uxth	r2, r3
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008bfe:	b29b      	uxth	r3, r3
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d1cf      	bne.n	8008ba4 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	9300      	str	r3, [sp, #0]
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	2140      	movs	r1, #64	; 0x40
 8008c0e:	68f8      	ldr	r0, [r7, #12]
 8008c10:	f000 fa16 	bl	8009040 <UART_WaitOnFlagUntilTimeout>
 8008c14:	4603      	mov	r3, r0
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d001      	beq.n	8008c1e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008c1a:	2303      	movs	r3, #3
 8008c1c:	e006      	b.n	8008c2c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	2220      	movs	r2, #32
 8008c22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8008c26:	2300      	movs	r3, #0
 8008c28:	e000      	b.n	8008c2c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008c2a:	2302      	movs	r3, #2
  }
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3720      	adds	r7, #32
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}

08008c34 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b08a      	sub	sp, #40	; 0x28
 8008c38:	af02      	add	r7, sp, #8
 8008c3a:	60f8      	str	r0, [r7, #12]
 8008c3c:	60b9      	str	r1, [r7, #8]
 8008c3e:	603b      	str	r3, [r7, #0]
 8008c40:	4613      	mov	r3, r2
 8008c42:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008c44:	2300      	movs	r3, #0
 8008c46:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008c4e:	b2db      	uxtb	r3, r3
 8008c50:	2b20      	cmp	r3, #32
 8008c52:	f040 8089 	bne.w	8008d68 <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d002      	beq.n	8008c62 <HAL_UART_Receive+0x2e>
 8008c5c:	88fb      	ldrh	r3, [r7, #6]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d101      	bne.n	8008c66 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8008c62:	2301      	movs	r3, #1
 8008c64:	e081      	b.n	8008d6a <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008c6c:	2b01      	cmp	r3, #1
 8008c6e:	d101      	bne.n	8008c74 <HAL_UART_Receive+0x40>
 8008c70:	2302      	movs	r3, #2
 8008c72:	e07a      	b.n	8008d6a <HAL_UART_Receive+0x136>
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	2201      	movs	r2, #1
 8008c78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	2222      	movs	r2, #34	; 0x22
 8008c86:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008c8a:	f7fa f8fd 	bl	8002e88 <HAL_GetTick>
 8008c8e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	88fa      	ldrh	r2, [r7, #6]
 8008c94:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	88fa      	ldrh	r2, [r7, #6]
 8008c9a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	689b      	ldr	r3, [r3, #8]
 8008ca0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ca4:	d108      	bne.n	8008cb8 <HAL_UART_Receive+0x84>
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	691b      	ldr	r3, [r3, #16]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d104      	bne.n	8008cb8 <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	61bb      	str	r3, [r7, #24]
 8008cb6:	e003      	b.n	8008cc0 <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8008cc8:	e043      	b.n	8008d52 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	9300      	str	r3, [sp, #0]
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	2120      	movs	r1, #32
 8008cd4:	68f8      	ldr	r0, [r7, #12]
 8008cd6:	f000 f9b3 	bl	8009040 <UART_WaitOnFlagUntilTimeout>
 8008cda:	4603      	mov	r3, r0
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d001      	beq.n	8008ce4 <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 8008ce0:	2303      	movs	r3, #3
 8008ce2:	e042      	b.n	8008d6a <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 8008ce4:	69fb      	ldr	r3, [r7, #28]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d10c      	bne.n	8008d04 <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	b29b      	uxth	r3, r3
 8008cf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cf6:	b29a      	uxth	r2, r3
 8008cf8:	69bb      	ldr	r3, [r7, #24]
 8008cfa:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008cfc:	69bb      	ldr	r3, [r7, #24]
 8008cfe:	3302      	adds	r3, #2
 8008d00:	61bb      	str	r3, [r7, #24]
 8008d02:	e01f      	b.n	8008d44 <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	689b      	ldr	r3, [r3, #8]
 8008d08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d0c:	d007      	beq.n	8008d1e <HAL_UART_Receive+0xea>
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	689b      	ldr	r3, [r3, #8]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d10a      	bne.n	8008d2c <HAL_UART_Receive+0xf8>
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	691b      	ldr	r3, [r3, #16]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d106      	bne.n	8008d2c <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	b2da      	uxtb	r2, r3
 8008d26:	69fb      	ldr	r3, [r7, #28]
 8008d28:	701a      	strb	r2, [r3, #0]
 8008d2a:	e008      	b.n	8008d3e <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	685b      	ldr	r3, [r3, #4]
 8008d32:	b2db      	uxtb	r3, r3
 8008d34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d38:	b2da      	uxtb	r2, r3
 8008d3a:	69fb      	ldr	r3, [r7, #28]
 8008d3c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8008d3e:	69fb      	ldr	r3, [r7, #28]
 8008d40:	3301      	adds	r3, #1
 8008d42:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008d48:	b29b      	uxth	r3, r3
 8008d4a:	3b01      	subs	r3, #1
 8008d4c:	b29a      	uxth	r2, r3
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008d56:	b29b      	uxth	r3, r3
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d1b6      	bne.n	8008cca <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	2220      	movs	r2, #32
 8008d60:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8008d64:	2300      	movs	r3, #0
 8008d66:	e000      	b.n	8008d6a <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 8008d68:	2302      	movs	r3, #2
  }
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	3720      	adds	r7, #32
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}

08008d72 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008d72:	b480      	push	{r7}
 8008d74:	b085      	sub	sp, #20
 8008d76:	af00      	add	r7, sp, #0
 8008d78:	60f8      	str	r0, [r7, #12]
 8008d7a:	60b9      	str	r1, [r7, #8]
 8008d7c:	4613      	mov	r3, r2
 8008d7e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008d86:	b2db      	uxtb	r3, r3
 8008d88:	2b20      	cmp	r3, #32
 8008d8a:	d140      	bne.n	8008e0e <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d002      	beq.n	8008d98 <HAL_UART_Receive_IT+0x26>
 8008d92:	88fb      	ldrh	r3, [r7, #6]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d101      	bne.n	8008d9c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008d98:	2301      	movs	r3, #1
 8008d9a:	e039      	b.n	8008e10 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008da2:	2b01      	cmp	r3, #1
 8008da4:	d101      	bne.n	8008daa <HAL_UART_Receive_IT+0x38>
 8008da6:	2302      	movs	r3, #2
 8008da8:	e032      	b.n	8008e10 <HAL_UART_Receive_IT+0x9e>
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2201      	movs	r2, #1
 8008dae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	68ba      	ldr	r2, [r7, #8]
 8008db6:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	88fa      	ldrh	r2, [r7, #6]
 8008dbc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	88fa      	ldrh	r2, [r7, #6]
 8008dc2:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	2222      	movs	r2, #34	; 0x22
 8008dce:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	68da      	ldr	r2, [r3, #12]
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008de8:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	695a      	ldr	r2, [r3, #20]
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f042 0201 	orr.w	r2, r2, #1
 8008df8:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	68da      	ldr	r2, [r3, #12]
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f042 0220 	orr.w	r2, r2, #32
 8008e08:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	e000      	b.n	8008e10 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8008e0e:	2302      	movs	r3, #2
  }
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3714      	adds	r7, #20
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bc80      	pop	{r7}
 8008e18:	4770      	bx	lr
	...

08008e1c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b088      	sub	sp, #32
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	68db      	ldr	r3, [r3, #12]
 8008e32:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	695b      	ldr	r3, [r3, #20]
 8008e3a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8008e40:	2300      	movs	r3, #0
 8008e42:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008e44:	69fb      	ldr	r3, [r7, #28]
 8008e46:	f003 030f 	and.w	r3, r3, #15
 8008e4a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d10d      	bne.n	8008e6e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008e52:	69fb      	ldr	r3, [r7, #28]
 8008e54:	f003 0320 	and.w	r3, r3, #32
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d008      	beq.n	8008e6e <HAL_UART_IRQHandler+0x52>
 8008e5c:	69bb      	ldr	r3, [r7, #24]
 8008e5e:	f003 0320 	and.w	r3, r3, #32
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d003      	beq.n	8008e6e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f000 f9cc 	bl	8009204 <UART_Receive_IT>
      return;
 8008e6c:	e0d0      	b.n	8009010 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008e6e:	693b      	ldr	r3, [r7, #16]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	f000 80b0 	beq.w	8008fd6 <HAL_UART_IRQHandler+0x1ba>
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	f003 0301 	and.w	r3, r3, #1
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d105      	bne.n	8008e8c <HAL_UART_IRQHandler+0x70>
 8008e80:	69bb      	ldr	r3, [r7, #24]
 8008e82:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	f000 80a5 	beq.w	8008fd6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008e8c:	69fb      	ldr	r3, [r7, #28]
 8008e8e:	f003 0301 	and.w	r3, r3, #1
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d00a      	beq.n	8008eac <HAL_UART_IRQHandler+0x90>
 8008e96:	69bb      	ldr	r3, [r7, #24]
 8008e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d005      	beq.n	8008eac <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ea4:	f043 0201 	orr.w	r2, r3, #1
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008eac:	69fb      	ldr	r3, [r7, #28]
 8008eae:	f003 0304 	and.w	r3, r3, #4
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d00a      	beq.n	8008ecc <HAL_UART_IRQHandler+0xb0>
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	f003 0301 	and.w	r3, r3, #1
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d005      	beq.n	8008ecc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ec4:	f043 0202 	orr.w	r2, r3, #2
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008ecc:	69fb      	ldr	r3, [r7, #28]
 8008ece:	f003 0302 	and.w	r3, r3, #2
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d00a      	beq.n	8008eec <HAL_UART_IRQHandler+0xd0>
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	f003 0301 	and.w	r3, r3, #1
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d005      	beq.n	8008eec <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ee4:	f043 0204 	orr.w	r2, r3, #4
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008eec:	69fb      	ldr	r3, [r7, #28]
 8008eee:	f003 0308 	and.w	r3, r3, #8
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d00f      	beq.n	8008f16 <HAL_UART_IRQHandler+0xfa>
 8008ef6:	69bb      	ldr	r3, [r7, #24]
 8008ef8:	f003 0320 	and.w	r3, r3, #32
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d104      	bne.n	8008f0a <HAL_UART_IRQHandler+0xee>
 8008f00:	697b      	ldr	r3, [r7, #20]
 8008f02:	f003 0301 	and.w	r3, r3, #1
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d005      	beq.n	8008f16 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f0e:	f043 0208 	orr.w	r2, r3, #8
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d077      	beq.n	800900e <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008f1e:	69fb      	ldr	r3, [r7, #28]
 8008f20:	f003 0320 	and.w	r3, r3, #32
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d007      	beq.n	8008f38 <HAL_UART_IRQHandler+0x11c>
 8008f28:	69bb      	ldr	r3, [r7, #24]
 8008f2a:	f003 0320 	and.w	r3, r3, #32
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d002      	beq.n	8008f38 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f000 f966 	bl	8009204 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	695b      	ldr	r3, [r3, #20]
 8008f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	bf14      	ite	ne
 8008f46:	2301      	movne	r3, #1
 8008f48:	2300      	moveq	r3, #0
 8008f4a:	b2db      	uxtb	r3, r3
 8008f4c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f52:	f003 0308 	and.w	r3, r3, #8
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d102      	bne.n	8008f60 <HAL_UART_IRQHandler+0x144>
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d031      	beq.n	8008fc4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f000 f8b7 	bl	80090d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	695b      	ldr	r3, [r3, #20]
 8008f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d023      	beq.n	8008fbc <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	695a      	ldr	r2, [r3, #20]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f82:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d013      	beq.n	8008fb4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f90:	4a21      	ldr	r2, [pc, #132]	; (8009018 <HAL_UART_IRQHandler+0x1fc>)
 8008f92:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f98:	4618      	mov	r0, r3
 8008f9a:	f7fb f87d 	bl	8004098 <HAL_DMA_Abort_IT>
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d016      	beq.n	8008fd2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008faa:	687a      	ldr	r2, [r7, #4]
 8008fac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008fae:	4610      	mov	r0, r2
 8008fb0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fb2:	e00e      	b.n	8008fd2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f000 f83a 	bl	800902e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fba:	e00a      	b.n	8008fd2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f000 f836 	bl	800902e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fc2:	e006      	b.n	8008fd2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f000 f832 	bl	800902e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8008fd0:	e01d      	b.n	800900e <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fd2:	bf00      	nop
    return;
 8008fd4:	e01b      	b.n	800900e <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008fd6:	69fb      	ldr	r3, [r7, #28]
 8008fd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d008      	beq.n	8008ff2 <HAL_UART_IRQHandler+0x1d6>
 8008fe0:	69bb      	ldr	r3, [r7, #24]
 8008fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d003      	beq.n	8008ff2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f000 f8a3 	bl	8009136 <UART_Transmit_IT>
    return;
 8008ff0:	e00e      	b.n	8009010 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008ff2:	69fb      	ldr	r3, [r7, #28]
 8008ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d009      	beq.n	8009010 <HAL_UART_IRQHandler+0x1f4>
 8008ffc:	69bb      	ldr	r3, [r7, #24]
 8008ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009002:	2b00      	cmp	r3, #0
 8009004:	d004      	beq.n	8009010 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f000 f8e4 	bl	80091d4 <UART_EndTransmit_IT>
    return;
 800900c:	e000      	b.n	8009010 <HAL_UART_IRQHandler+0x1f4>
    return;
 800900e:	bf00      	nop
  }
}
 8009010:	3720      	adds	r7, #32
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}
 8009016:	bf00      	nop
 8009018:	0800910f 	.word	0x0800910f

0800901c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800901c:	b480      	push	{r7}
 800901e:	b083      	sub	sp, #12
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009024:	bf00      	nop
 8009026:	370c      	adds	r7, #12
 8009028:	46bd      	mov	sp, r7
 800902a:	bc80      	pop	{r7}
 800902c:	4770      	bx	lr

0800902e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800902e:	b480      	push	{r7}
 8009030:	b083      	sub	sp, #12
 8009032:	af00      	add	r7, sp, #0
 8009034:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009036:	bf00      	nop
 8009038:	370c      	adds	r7, #12
 800903a:	46bd      	mov	sp, r7
 800903c:	bc80      	pop	{r7}
 800903e:	4770      	bx	lr

08009040 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b084      	sub	sp, #16
 8009044:	af00      	add	r7, sp, #0
 8009046:	60f8      	str	r0, [r7, #12]
 8009048:	60b9      	str	r1, [r7, #8]
 800904a:	603b      	str	r3, [r7, #0]
 800904c:	4613      	mov	r3, r2
 800904e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009050:	e02c      	b.n	80090ac <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009052:	69bb      	ldr	r3, [r7, #24]
 8009054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009058:	d028      	beq.n	80090ac <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800905a:	69bb      	ldr	r3, [r7, #24]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d007      	beq.n	8009070 <UART_WaitOnFlagUntilTimeout+0x30>
 8009060:	f7f9 ff12 	bl	8002e88 <HAL_GetTick>
 8009064:	4602      	mov	r2, r0
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	1ad3      	subs	r3, r2, r3
 800906a:	69ba      	ldr	r2, [r7, #24]
 800906c:	429a      	cmp	r2, r3
 800906e:	d21d      	bcs.n	80090ac <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	68da      	ldr	r2, [r3, #12]
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800907e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	695a      	ldr	r2, [r3, #20]
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f022 0201 	bic.w	r2, r2, #1
 800908e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	2220      	movs	r2, #32
 8009094:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	2220      	movs	r2, #32
 800909c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	2200      	movs	r2, #0
 80090a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80090a8:	2303      	movs	r3, #3
 80090aa:	e00f      	b.n	80090cc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	681a      	ldr	r2, [r3, #0]
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	4013      	ands	r3, r2
 80090b6:	68ba      	ldr	r2, [r7, #8]
 80090b8:	429a      	cmp	r2, r3
 80090ba:	bf0c      	ite	eq
 80090bc:	2301      	moveq	r3, #1
 80090be:	2300      	movne	r3, #0
 80090c0:	b2db      	uxtb	r3, r3
 80090c2:	461a      	mov	r2, r3
 80090c4:	79fb      	ldrb	r3, [r7, #7]
 80090c6:	429a      	cmp	r2, r3
 80090c8:	d0c3      	beq.n	8009052 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80090ca:	2300      	movs	r3, #0
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3710      	adds	r7, #16
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}

080090d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b083      	sub	sp, #12
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	68da      	ldr	r2, [r3, #12]
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80090ea:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	695a      	ldr	r2, [r3, #20]
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f022 0201 	bic.w	r2, r2, #1
 80090fa:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2220      	movs	r2, #32
 8009100:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8009104:	bf00      	nop
 8009106:	370c      	adds	r7, #12
 8009108:	46bd      	mov	sp, r7
 800910a:	bc80      	pop	{r7}
 800910c:	4770      	bx	lr

0800910e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800910e:	b580      	push	{r7, lr}
 8009110:	b084      	sub	sp, #16
 8009112:	af00      	add	r7, sp, #0
 8009114:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800911a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	2200      	movs	r2, #0
 8009120:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	2200      	movs	r2, #0
 8009126:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009128:	68f8      	ldr	r0, [r7, #12]
 800912a:	f7ff ff80 	bl	800902e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800912e:	bf00      	nop
 8009130:	3710      	adds	r7, #16
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}

08009136 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009136:	b480      	push	{r7}
 8009138:	b085      	sub	sp, #20
 800913a:	af00      	add	r7, sp, #0
 800913c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009144:	b2db      	uxtb	r3, r3
 8009146:	2b21      	cmp	r3, #33	; 0x21
 8009148:	d13e      	bne.n	80091c8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	689b      	ldr	r3, [r3, #8]
 800914e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009152:	d114      	bne.n	800917e <UART_Transmit_IT+0x48>
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	691b      	ldr	r3, [r3, #16]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d110      	bne.n	800917e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6a1b      	ldr	r3, [r3, #32]
 8009160:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	881b      	ldrh	r3, [r3, #0]
 8009166:	461a      	mov	r2, r3
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009170:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6a1b      	ldr	r3, [r3, #32]
 8009176:	1c9a      	adds	r2, r3, #2
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	621a      	str	r2, [r3, #32]
 800917c:	e008      	b.n	8009190 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6a1b      	ldr	r3, [r3, #32]
 8009182:	1c59      	adds	r1, r3, #1
 8009184:	687a      	ldr	r2, [r7, #4]
 8009186:	6211      	str	r1, [r2, #32]
 8009188:	781a      	ldrb	r2, [r3, #0]
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009194:	b29b      	uxth	r3, r3
 8009196:	3b01      	subs	r3, #1
 8009198:	b29b      	uxth	r3, r3
 800919a:	687a      	ldr	r2, [r7, #4]
 800919c:	4619      	mov	r1, r3
 800919e:	84d1      	strh	r1, [r2, #38]	; 0x26
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d10f      	bne.n	80091c4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	68da      	ldr	r2, [r3, #12]
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80091b2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	68da      	ldr	r2, [r3, #12]
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80091c2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80091c4:	2300      	movs	r3, #0
 80091c6:	e000      	b.n	80091ca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80091c8:	2302      	movs	r3, #2
  }
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3714      	adds	r7, #20
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bc80      	pop	{r7}
 80091d2:	4770      	bx	lr

080091d4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b082      	sub	sp, #8
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	68da      	ldr	r2, [r3, #12]
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80091ea:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2220      	movs	r2, #32
 80091f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f7ff ff11 	bl	800901c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80091fa:	2300      	movs	r3, #0
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	3708      	adds	r7, #8
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}

08009204 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b084      	sub	sp, #16
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009212:	b2db      	uxtb	r3, r3
 8009214:	2b22      	cmp	r3, #34	; 0x22
 8009216:	d170      	bne.n	80092fa <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	689b      	ldr	r3, [r3, #8]
 800921c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009220:	d117      	bne.n	8009252 <UART_Receive_IT+0x4e>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	691b      	ldr	r3, [r3, #16]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d113      	bne.n	8009252 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 800922a:	2300      	movs	r3, #0
 800922c:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009232:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	685b      	ldr	r3, [r3, #4]
 800923a:	b29b      	uxth	r3, r3
 800923c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009240:	b29a      	uxth	r2, r3
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800924a:	1c9a      	adds	r2, r3, #2
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	629a      	str	r2, [r3, #40]	; 0x28
 8009250:	e026      	b.n	80092a0 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009256:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8009258:	2300      	movs	r3, #0
 800925a:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	689b      	ldr	r3, [r3, #8]
 8009260:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009264:	d007      	beq.n	8009276 <UART_Receive_IT+0x72>
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	689b      	ldr	r3, [r3, #8]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d10a      	bne.n	8009284 <UART_Receive_IT+0x80>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	691b      	ldr	r3, [r3, #16]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d106      	bne.n	8009284 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	685b      	ldr	r3, [r3, #4]
 800927c:	b2da      	uxtb	r2, r3
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	701a      	strb	r2, [r3, #0]
 8009282:	e008      	b.n	8009296 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	685b      	ldr	r3, [r3, #4]
 800928a:	b2db      	uxtb	r3, r3
 800928c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009290:	b2da      	uxtb	r2, r3
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800929a:	1c5a      	adds	r2, r3, #1
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80092a4:	b29b      	uxth	r3, r3
 80092a6:	3b01      	subs	r3, #1
 80092a8:	b29b      	uxth	r3, r3
 80092aa:	687a      	ldr	r2, [r7, #4]
 80092ac:	4619      	mov	r1, r3
 80092ae:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d120      	bne.n	80092f6 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	68da      	ldr	r2, [r3, #12]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f022 0220 	bic.w	r2, r2, #32
 80092c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	68da      	ldr	r2, [r3, #12]
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80092d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	695a      	ldr	r2, [r3, #20]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f022 0201 	bic.w	r2, r2, #1
 80092e2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2220      	movs	r2, #32
 80092e8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f7f9 fc33 	bl	8002b58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80092f2:	2300      	movs	r3, #0
 80092f4:	e002      	b.n	80092fc <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 80092f6:	2300      	movs	r3, #0
 80092f8:	e000      	b.n	80092fc <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 80092fa:	2302      	movs	r3, #2
  }
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	3710      	adds	r7, #16
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}

08009304 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b084      	sub	sp, #16
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	685b      	ldr	r3, [r3, #4]
 8009310:	4a5f      	ldr	r2, [pc, #380]	; (8009490 <UART_SetConfig+0x18c>)
 8009312:	4293      	cmp	r3, r2
 8009314:	d904      	bls.n	8009320 <UART_SetConfig+0x1c>
 8009316:	f640 31f6 	movw	r1, #3062	; 0xbf6
 800931a:	485e      	ldr	r0, [pc, #376]	; (8009494 <UART_SetConfig+0x190>)
 800931c:	f7f8 ff65 	bl	80021ea <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	68db      	ldr	r3, [r3, #12]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d009      	beq.n	800933c <UART_SetConfig+0x38>
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	68db      	ldr	r3, [r3, #12]
 800932c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009330:	d004      	beq.n	800933c <UART_SetConfig+0x38>
 8009332:	f640 31f7 	movw	r1, #3063	; 0xbf7
 8009336:	4857      	ldr	r0, [pc, #348]	; (8009494 <UART_SetConfig+0x190>)
 8009338:	f7f8 ff57 	bl	80021ea <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	691b      	ldr	r3, [r3, #16]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d00e      	beq.n	8009362 <UART_SetConfig+0x5e>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	691b      	ldr	r3, [r3, #16]
 8009348:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800934c:	d009      	beq.n	8009362 <UART_SetConfig+0x5e>
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	691b      	ldr	r3, [r3, #16]
 8009352:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009356:	d004      	beq.n	8009362 <UART_SetConfig+0x5e>
 8009358:	f640 31f8 	movw	r1, #3064	; 0xbf8
 800935c:	484d      	ldr	r0, [pc, #308]	; (8009494 <UART_SetConfig+0x190>)
 800935e:	f7f8 ff44 	bl	80021ea <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	695a      	ldr	r2, [r3, #20]
 8009366:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800936a:	4013      	ands	r3, r2
 800936c:	2b00      	cmp	r3, #0
 800936e:	d103      	bne.n	8009378 <UART_SetConfig+0x74>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	695b      	ldr	r3, [r3, #20]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d104      	bne.n	8009382 <UART_SetConfig+0x7e>
 8009378:	f640 31f9 	movw	r1, #3065	; 0xbf9
 800937c:	4845      	ldr	r0, [pc, #276]	; (8009494 <UART_SetConfig+0x190>)
 800937e:	f7f8 ff34 	bl	80021ea <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	691b      	ldr	r3, [r3, #16]
 8009388:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	68da      	ldr	r2, [r3, #12]
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	430a      	orrs	r2, r1
 8009396:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	689a      	ldr	r2, [r3, #8]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	691b      	ldr	r3, [r3, #16]
 80093a0:	431a      	orrs	r2, r3
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	695b      	ldr	r3, [r3, #20]
 80093a6:	4313      	orrs	r3, r2
 80093a8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	68db      	ldr	r3, [r3, #12]
 80093b0:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80093b4:	f023 030c 	bic.w	r3, r3, #12
 80093b8:	687a      	ldr	r2, [r7, #4]
 80093ba:	6812      	ldr	r2, [r2, #0]
 80093bc:	68b9      	ldr	r1, [r7, #8]
 80093be:	430b      	orrs	r3, r1
 80093c0:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	695b      	ldr	r3, [r3, #20]
 80093c8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	699a      	ldr	r2, [r3, #24]
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	430a      	orrs	r2, r1
 80093d6:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	4a2e      	ldr	r2, [pc, #184]	; (8009498 <UART_SetConfig+0x194>)
 80093de:	4293      	cmp	r3, r2
 80093e0:	d103      	bne.n	80093ea <UART_SetConfig+0xe6>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80093e2:	f7fd fae7 	bl	80069b4 <HAL_RCC_GetPCLK2Freq>
 80093e6:	60f8      	str	r0, [r7, #12]
 80093e8:	e002      	b.n	80093f0 <UART_SetConfig+0xec>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80093ea:	f7fd facf 	bl	800698c <HAL_RCC_GetPCLK1Freq>
 80093ee:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80093f0:	68fa      	ldr	r2, [r7, #12]
 80093f2:	4613      	mov	r3, r2
 80093f4:	009b      	lsls	r3, r3, #2
 80093f6:	4413      	add	r3, r2
 80093f8:	009a      	lsls	r2, r3, #2
 80093fa:	441a      	add	r2, r3
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	685b      	ldr	r3, [r3, #4]
 8009400:	009b      	lsls	r3, r3, #2
 8009402:	fbb2 f3f3 	udiv	r3, r2, r3
 8009406:	4a25      	ldr	r2, [pc, #148]	; (800949c <UART_SetConfig+0x198>)
 8009408:	fba2 2303 	umull	r2, r3, r2, r3
 800940c:	095b      	lsrs	r3, r3, #5
 800940e:	0119      	lsls	r1, r3, #4
 8009410:	68fa      	ldr	r2, [r7, #12]
 8009412:	4613      	mov	r3, r2
 8009414:	009b      	lsls	r3, r3, #2
 8009416:	4413      	add	r3, r2
 8009418:	009a      	lsls	r2, r3, #2
 800941a:	441a      	add	r2, r3
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	685b      	ldr	r3, [r3, #4]
 8009420:	009b      	lsls	r3, r3, #2
 8009422:	fbb2 f2f3 	udiv	r2, r2, r3
 8009426:	4b1d      	ldr	r3, [pc, #116]	; (800949c <UART_SetConfig+0x198>)
 8009428:	fba3 0302 	umull	r0, r3, r3, r2
 800942c:	095b      	lsrs	r3, r3, #5
 800942e:	2064      	movs	r0, #100	; 0x64
 8009430:	fb00 f303 	mul.w	r3, r0, r3
 8009434:	1ad3      	subs	r3, r2, r3
 8009436:	011b      	lsls	r3, r3, #4
 8009438:	3332      	adds	r3, #50	; 0x32
 800943a:	4a18      	ldr	r2, [pc, #96]	; (800949c <UART_SetConfig+0x198>)
 800943c:	fba2 2303 	umull	r2, r3, r2, r3
 8009440:	095b      	lsrs	r3, r3, #5
 8009442:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009446:	4419      	add	r1, r3
 8009448:	68fa      	ldr	r2, [r7, #12]
 800944a:	4613      	mov	r3, r2
 800944c:	009b      	lsls	r3, r3, #2
 800944e:	4413      	add	r3, r2
 8009450:	009a      	lsls	r2, r3, #2
 8009452:	441a      	add	r2, r3
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	685b      	ldr	r3, [r3, #4]
 8009458:	009b      	lsls	r3, r3, #2
 800945a:	fbb2 f2f3 	udiv	r2, r2, r3
 800945e:	4b0f      	ldr	r3, [pc, #60]	; (800949c <UART_SetConfig+0x198>)
 8009460:	fba3 0302 	umull	r0, r3, r3, r2
 8009464:	095b      	lsrs	r3, r3, #5
 8009466:	2064      	movs	r0, #100	; 0x64
 8009468:	fb00 f303 	mul.w	r3, r0, r3
 800946c:	1ad3      	subs	r3, r2, r3
 800946e:	011b      	lsls	r3, r3, #4
 8009470:	3332      	adds	r3, #50	; 0x32
 8009472:	4a0a      	ldr	r2, [pc, #40]	; (800949c <UART_SetConfig+0x198>)
 8009474:	fba2 2303 	umull	r2, r3, r2, r3
 8009478:	095b      	lsrs	r3, r3, #5
 800947a:	f003 020f 	and.w	r2, r3, #15
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	440a      	add	r2, r1
 8009484:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009486:	bf00      	nop
 8009488:	3710      	adds	r7, #16
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}
 800948e:	bf00      	nop
 8009490:	0044aa20 	.word	0x0044aa20
 8009494:	0800c1a4 	.word	0x0800c1a4
 8009498:	40013800 	.word	0x40013800
 800949c:	51eb851f 	.word	0x51eb851f

080094a0 <__errno>:
 80094a0:	4b01      	ldr	r3, [pc, #4]	; (80094a8 <__errno+0x8>)
 80094a2:	6818      	ldr	r0, [r3, #0]
 80094a4:	4770      	bx	lr
 80094a6:	bf00      	nop
 80094a8:	2000001c 	.word	0x2000001c

080094ac <__libc_init_array>:
 80094ac:	b570      	push	{r4, r5, r6, lr}
 80094ae:	2600      	movs	r6, #0
 80094b0:	4d0c      	ldr	r5, [pc, #48]	; (80094e4 <__libc_init_array+0x38>)
 80094b2:	4c0d      	ldr	r4, [pc, #52]	; (80094e8 <__libc_init_array+0x3c>)
 80094b4:	1b64      	subs	r4, r4, r5
 80094b6:	10a4      	asrs	r4, r4, #2
 80094b8:	42a6      	cmp	r6, r4
 80094ba:	d109      	bne.n	80094d0 <__libc_init_array+0x24>
 80094bc:	f002 fb52 	bl	800bb64 <_init>
 80094c0:	2600      	movs	r6, #0
 80094c2:	4d0a      	ldr	r5, [pc, #40]	; (80094ec <__libc_init_array+0x40>)
 80094c4:	4c0a      	ldr	r4, [pc, #40]	; (80094f0 <__libc_init_array+0x44>)
 80094c6:	1b64      	subs	r4, r4, r5
 80094c8:	10a4      	asrs	r4, r4, #2
 80094ca:	42a6      	cmp	r6, r4
 80094cc:	d105      	bne.n	80094da <__libc_init_array+0x2e>
 80094ce:	bd70      	pop	{r4, r5, r6, pc}
 80094d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80094d4:	4798      	blx	r3
 80094d6:	3601      	adds	r6, #1
 80094d8:	e7ee      	b.n	80094b8 <__libc_init_array+0xc>
 80094da:	f855 3b04 	ldr.w	r3, [r5], #4
 80094de:	4798      	blx	r3
 80094e0:	3601      	adds	r6, #1
 80094e2:	e7f2      	b.n	80094ca <__libc_init_array+0x1e>
 80094e4:	0800c798 	.word	0x0800c798
 80094e8:	0800c798 	.word	0x0800c798
 80094ec:	0800c798 	.word	0x0800c798
 80094f0:	0800c79c 	.word	0x0800c79c

080094f4 <memset>:
 80094f4:	4603      	mov	r3, r0
 80094f6:	4402      	add	r2, r0
 80094f8:	4293      	cmp	r3, r2
 80094fa:	d100      	bne.n	80094fe <memset+0xa>
 80094fc:	4770      	bx	lr
 80094fe:	f803 1b01 	strb.w	r1, [r3], #1
 8009502:	e7f9      	b.n	80094f8 <memset+0x4>

08009504 <iprintf>:
 8009504:	b40f      	push	{r0, r1, r2, r3}
 8009506:	4b0a      	ldr	r3, [pc, #40]	; (8009530 <iprintf+0x2c>)
 8009508:	b513      	push	{r0, r1, r4, lr}
 800950a:	681c      	ldr	r4, [r3, #0]
 800950c:	b124      	cbz	r4, 8009518 <iprintf+0x14>
 800950e:	69a3      	ldr	r3, [r4, #24]
 8009510:	b913      	cbnz	r3, 8009518 <iprintf+0x14>
 8009512:	4620      	mov	r0, r4
 8009514:	f000 faf0 	bl	8009af8 <__sinit>
 8009518:	ab05      	add	r3, sp, #20
 800951a:	4620      	mov	r0, r4
 800951c:	9a04      	ldr	r2, [sp, #16]
 800951e:	68a1      	ldr	r1, [r4, #8]
 8009520:	9301      	str	r3, [sp, #4]
 8009522:	f000 fea1 	bl	800a268 <_vfiprintf_r>
 8009526:	b002      	add	sp, #8
 8009528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800952c:	b004      	add	sp, #16
 800952e:	4770      	bx	lr
 8009530:	2000001c 	.word	0x2000001c

08009534 <_puts_r>:
 8009534:	b570      	push	{r4, r5, r6, lr}
 8009536:	460e      	mov	r6, r1
 8009538:	4605      	mov	r5, r0
 800953a:	b118      	cbz	r0, 8009544 <_puts_r+0x10>
 800953c:	6983      	ldr	r3, [r0, #24]
 800953e:	b90b      	cbnz	r3, 8009544 <_puts_r+0x10>
 8009540:	f000 fada 	bl	8009af8 <__sinit>
 8009544:	69ab      	ldr	r3, [r5, #24]
 8009546:	68ac      	ldr	r4, [r5, #8]
 8009548:	b913      	cbnz	r3, 8009550 <_puts_r+0x1c>
 800954a:	4628      	mov	r0, r5
 800954c:	f000 fad4 	bl	8009af8 <__sinit>
 8009550:	4b2c      	ldr	r3, [pc, #176]	; (8009604 <_puts_r+0xd0>)
 8009552:	429c      	cmp	r4, r3
 8009554:	d120      	bne.n	8009598 <_puts_r+0x64>
 8009556:	686c      	ldr	r4, [r5, #4]
 8009558:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800955a:	07db      	lsls	r3, r3, #31
 800955c:	d405      	bmi.n	800956a <_puts_r+0x36>
 800955e:	89a3      	ldrh	r3, [r4, #12]
 8009560:	0598      	lsls	r0, r3, #22
 8009562:	d402      	bmi.n	800956a <_puts_r+0x36>
 8009564:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009566:	f000 fb65 	bl	8009c34 <__retarget_lock_acquire_recursive>
 800956a:	89a3      	ldrh	r3, [r4, #12]
 800956c:	0719      	lsls	r1, r3, #28
 800956e:	d51d      	bpl.n	80095ac <_puts_r+0x78>
 8009570:	6923      	ldr	r3, [r4, #16]
 8009572:	b1db      	cbz	r3, 80095ac <_puts_r+0x78>
 8009574:	3e01      	subs	r6, #1
 8009576:	68a3      	ldr	r3, [r4, #8]
 8009578:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800957c:	3b01      	subs	r3, #1
 800957e:	60a3      	str	r3, [r4, #8]
 8009580:	bb39      	cbnz	r1, 80095d2 <_puts_r+0x9e>
 8009582:	2b00      	cmp	r3, #0
 8009584:	da38      	bge.n	80095f8 <_puts_r+0xc4>
 8009586:	4622      	mov	r2, r4
 8009588:	210a      	movs	r1, #10
 800958a:	4628      	mov	r0, r5
 800958c:	f000 f8b8 	bl	8009700 <__swbuf_r>
 8009590:	3001      	adds	r0, #1
 8009592:	d011      	beq.n	80095b8 <_puts_r+0x84>
 8009594:	250a      	movs	r5, #10
 8009596:	e011      	b.n	80095bc <_puts_r+0x88>
 8009598:	4b1b      	ldr	r3, [pc, #108]	; (8009608 <_puts_r+0xd4>)
 800959a:	429c      	cmp	r4, r3
 800959c:	d101      	bne.n	80095a2 <_puts_r+0x6e>
 800959e:	68ac      	ldr	r4, [r5, #8]
 80095a0:	e7da      	b.n	8009558 <_puts_r+0x24>
 80095a2:	4b1a      	ldr	r3, [pc, #104]	; (800960c <_puts_r+0xd8>)
 80095a4:	429c      	cmp	r4, r3
 80095a6:	bf08      	it	eq
 80095a8:	68ec      	ldreq	r4, [r5, #12]
 80095aa:	e7d5      	b.n	8009558 <_puts_r+0x24>
 80095ac:	4621      	mov	r1, r4
 80095ae:	4628      	mov	r0, r5
 80095b0:	f000 f90a 	bl	80097c8 <__swsetup_r>
 80095b4:	2800      	cmp	r0, #0
 80095b6:	d0dd      	beq.n	8009574 <_puts_r+0x40>
 80095b8:	f04f 35ff 	mov.w	r5, #4294967295
 80095bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80095be:	07da      	lsls	r2, r3, #31
 80095c0:	d405      	bmi.n	80095ce <_puts_r+0x9a>
 80095c2:	89a3      	ldrh	r3, [r4, #12]
 80095c4:	059b      	lsls	r3, r3, #22
 80095c6:	d402      	bmi.n	80095ce <_puts_r+0x9a>
 80095c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095ca:	f000 fb34 	bl	8009c36 <__retarget_lock_release_recursive>
 80095ce:	4628      	mov	r0, r5
 80095d0:	bd70      	pop	{r4, r5, r6, pc}
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	da04      	bge.n	80095e0 <_puts_r+0xac>
 80095d6:	69a2      	ldr	r2, [r4, #24]
 80095d8:	429a      	cmp	r2, r3
 80095da:	dc06      	bgt.n	80095ea <_puts_r+0xb6>
 80095dc:	290a      	cmp	r1, #10
 80095de:	d004      	beq.n	80095ea <_puts_r+0xb6>
 80095e0:	6823      	ldr	r3, [r4, #0]
 80095e2:	1c5a      	adds	r2, r3, #1
 80095e4:	6022      	str	r2, [r4, #0]
 80095e6:	7019      	strb	r1, [r3, #0]
 80095e8:	e7c5      	b.n	8009576 <_puts_r+0x42>
 80095ea:	4622      	mov	r2, r4
 80095ec:	4628      	mov	r0, r5
 80095ee:	f000 f887 	bl	8009700 <__swbuf_r>
 80095f2:	3001      	adds	r0, #1
 80095f4:	d1bf      	bne.n	8009576 <_puts_r+0x42>
 80095f6:	e7df      	b.n	80095b8 <_puts_r+0x84>
 80095f8:	250a      	movs	r5, #10
 80095fa:	6823      	ldr	r3, [r4, #0]
 80095fc:	1c5a      	adds	r2, r3, #1
 80095fe:	6022      	str	r2, [r4, #0]
 8009600:	701d      	strb	r5, [r3, #0]
 8009602:	e7db      	b.n	80095bc <_puts_r+0x88>
 8009604:	0800c228 	.word	0x0800c228
 8009608:	0800c248 	.word	0x0800c248
 800960c:	0800c208 	.word	0x0800c208

08009610 <puts>:
 8009610:	4b02      	ldr	r3, [pc, #8]	; (800961c <puts+0xc>)
 8009612:	4601      	mov	r1, r0
 8009614:	6818      	ldr	r0, [r3, #0]
 8009616:	f7ff bf8d 	b.w	8009534 <_puts_r>
 800961a:	bf00      	nop
 800961c:	2000001c 	.word	0x2000001c

08009620 <siscanf>:
 8009620:	b40e      	push	{r1, r2, r3}
 8009622:	f44f 7201 	mov.w	r2, #516	; 0x204
 8009626:	b530      	push	{r4, r5, lr}
 8009628:	b09c      	sub	sp, #112	; 0x70
 800962a:	ac1f      	add	r4, sp, #124	; 0x7c
 800962c:	f854 5b04 	ldr.w	r5, [r4], #4
 8009630:	f8ad 2014 	strh.w	r2, [sp, #20]
 8009634:	9002      	str	r0, [sp, #8]
 8009636:	9006      	str	r0, [sp, #24]
 8009638:	f7f6 fdf6 	bl	8000228 <strlen>
 800963c:	4b0b      	ldr	r3, [pc, #44]	; (800966c <siscanf+0x4c>)
 800963e:	9003      	str	r0, [sp, #12]
 8009640:	930b      	str	r3, [sp, #44]	; 0x2c
 8009642:	2300      	movs	r3, #0
 8009644:	930f      	str	r3, [sp, #60]	; 0x3c
 8009646:	9314      	str	r3, [sp, #80]	; 0x50
 8009648:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800964c:	9007      	str	r0, [sp, #28]
 800964e:	4808      	ldr	r0, [pc, #32]	; (8009670 <siscanf+0x50>)
 8009650:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009654:	462a      	mov	r2, r5
 8009656:	4623      	mov	r3, r4
 8009658:	a902      	add	r1, sp, #8
 800965a:	6800      	ldr	r0, [r0, #0]
 800965c:	9401      	str	r4, [sp, #4]
 800965e:	f000 fc61 	bl	8009f24 <__ssvfiscanf_r>
 8009662:	b01c      	add	sp, #112	; 0x70
 8009664:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009668:	b003      	add	sp, #12
 800966a:	4770      	bx	lr
 800966c:	08009697 	.word	0x08009697
 8009670:	2000001c 	.word	0x2000001c

08009674 <__sread>:
 8009674:	b510      	push	{r4, lr}
 8009676:	460c      	mov	r4, r1
 8009678:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800967c:	f001 fa04 	bl	800aa88 <_read_r>
 8009680:	2800      	cmp	r0, #0
 8009682:	bfab      	itete	ge
 8009684:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009686:	89a3      	ldrhlt	r3, [r4, #12]
 8009688:	181b      	addge	r3, r3, r0
 800968a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800968e:	bfac      	ite	ge
 8009690:	6563      	strge	r3, [r4, #84]	; 0x54
 8009692:	81a3      	strhlt	r3, [r4, #12]
 8009694:	bd10      	pop	{r4, pc}

08009696 <__seofread>:
 8009696:	2000      	movs	r0, #0
 8009698:	4770      	bx	lr

0800969a <__swrite>:
 800969a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800969e:	461f      	mov	r7, r3
 80096a0:	898b      	ldrh	r3, [r1, #12]
 80096a2:	4605      	mov	r5, r0
 80096a4:	05db      	lsls	r3, r3, #23
 80096a6:	460c      	mov	r4, r1
 80096a8:	4616      	mov	r6, r2
 80096aa:	d505      	bpl.n	80096b8 <__swrite+0x1e>
 80096ac:	2302      	movs	r3, #2
 80096ae:	2200      	movs	r2, #0
 80096b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096b4:	f000 fac0 	bl	8009c38 <_lseek_r>
 80096b8:	89a3      	ldrh	r3, [r4, #12]
 80096ba:	4632      	mov	r2, r6
 80096bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80096c0:	81a3      	strh	r3, [r4, #12]
 80096c2:	4628      	mov	r0, r5
 80096c4:	463b      	mov	r3, r7
 80096c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80096ce:	f000 b869 	b.w	80097a4 <_write_r>

080096d2 <__sseek>:
 80096d2:	b510      	push	{r4, lr}
 80096d4:	460c      	mov	r4, r1
 80096d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096da:	f000 faad 	bl	8009c38 <_lseek_r>
 80096de:	1c43      	adds	r3, r0, #1
 80096e0:	89a3      	ldrh	r3, [r4, #12]
 80096e2:	bf15      	itete	ne
 80096e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80096e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80096ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80096ee:	81a3      	strheq	r3, [r4, #12]
 80096f0:	bf18      	it	ne
 80096f2:	81a3      	strhne	r3, [r4, #12]
 80096f4:	bd10      	pop	{r4, pc}

080096f6 <__sclose>:
 80096f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096fa:	f000 b8d3 	b.w	80098a4 <_close_r>
	...

08009700 <__swbuf_r>:
 8009700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009702:	460e      	mov	r6, r1
 8009704:	4614      	mov	r4, r2
 8009706:	4605      	mov	r5, r0
 8009708:	b118      	cbz	r0, 8009712 <__swbuf_r+0x12>
 800970a:	6983      	ldr	r3, [r0, #24]
 800970c:	b90b      	cbnz	r3, 8009712 <__swbuf_r+0x12>
 800970e:	f000 f9f3 	bl	8009af8 <__sinit>
 8009712:	4b21      	ldr	r3, [pc, #132]	; (8009798 <__swbuf_r+0x98>)
 8009714:	429c      	cmp	r4, r3
 8009716:	d12b      	bne.n	8009770 <__swbuf_r+0x70>
 8009718:	686c      	ldr	r4, [r5, #4]
 800971a:	69a3      	ldr	r3, [r4, #24]
 800971c:	60a3      	str	r3, [r4, #8]
 800971e:	89a3      	ldrh	r3, [r4, #12]
 8009720:	071a      	lsls	r2, r3, #28
 8009722:	d52f      	bpl.n	8009784 <__swbuf_r+0x84>
 8009724:	6923      	ldr	r3, [r4, #16]
 8009726:	b36b      	cbz	r3, 8009784 <__swbuf_r+0x84>
 8009728:	6923      	ldr	r3, [r4, #16]
 800972a:	6820      	ldr	r0, [r4, #0]
 800972c:	b2f6      	uxtb	r6, r6
 800972e:	1ac0      	subs	r0, r0, r3
 8009730:	6963      	ldr	r3, [r4, #20]
 8009732:	4637      	mov	r7, r6
 8009734:	4283      	cmp	r3, r0
 8009736:	dc04      	bgt.n	8009742 <__swbuf_r+0x42>
 8009738:	4621      	mov	r1, r4
 800973a:	4628      	mov	r0, r5
 800973c:	f000 f948 	bl	80099d0 <_fflush_r>
 8009740:	bb30      	cbnz	r0, 8009790 <__swbuf_r+0x90>
 8009742:	68a3      	ldr	r3, [r4, #8]
 8009744:	3001      	adds	r0, #1
 8009746:	3b01      	subs	r3, #1
 8009748:	60a3      	str	r3, [r4, #8]
 800974a:	6823      	ldr	r3, [r4, #0]
 800974c:	1c5a      	adds	r2, r3, #1
 800974e:	6022      	str	r2, [r4, #0]
 8009750:	701e      	strb	r6, [r3, #0]
 8009752:	6963      	ldr	r3, [r4, #20]
 8009754:	4283      	cmp	r3, r0
 8009756:	d004      	beq.n	8009762 <__swbuf_r+0x62>
 8009758:	89a3      	ldrh	r3, [r4, #12]
 800975a:	07db      	lsls	r3, r3, #31
 800975c:	d506      	bpl.n	800976c <__swbuf_r+0x6c>
 800975e:	2e0a      	cmp	r6, #10
 8009760:	d104      	bne.n	800976c <__swbuf_r+0x6c>
 8009762:	4621      	mov	r1, r4
 8009764:	4628      	mov	r0, r5
 8009766:	f000 f933 	bl	80099d0 <_fflush_r>
 800976a:	b988      	cbnz	r0, 8009790 <__swbuf_r+0x90>
 800976c:	4638      	mov	r0, r7
 800976e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009770:	4b0a      	ldr	r3, [pc, #40]	; (800979c <__swbuf_r+0x9c>)
 8009772:	429c      	cmp	r4, r3
 8009774:	d101      	bne.n	800977a <__swbuf_r+0x7a>
 8009776:	68ac      	ldr	r4, [r5, #8]
 8009778:	e7cf      	b.n	800971a <__swbuf_r+0x1a>
 800977a:	4b09      	ldr	r3, [pc, #36]	; (80097a0 <__swbuf_r+0xa0>)
 800977c:	429c      	cmp	r4, r3
 800977e:	bf08      	it	eq
 8009780:	68ec      	ldreq	r4, [r5, #12]
 8009782:	e7ca      	b.n	800971a <__swbuf_r+0x1a>
 8009784:	4621      	mov	r1, r4
 8009786:	4628      	mov	r0, r5
 8009788:	f000 f81e 	bl	80097c8 <__swsetup_r>
 800978c:	2800      	cmp	r0, #0
 800978e:	d0cb      	beq.n	8009728 <__swbuf_r+0x28>
 8009790:	f04f 37ff 	mov.w	r7, #4294967295
 8009794:	e7ea      	b.n	800976c <__swbuf_r+0x6c>
 8009796:	bf00      	nop
 8009798:	0800c228 	.word	0x0800c228
 800979c:	0800c248 	.word	0x0800c248
 80097a0:	0800c208 	.word	0x0800c208

080097a4 <_write_r>:
 80097a4:	b538      	push	{r3, r4, r5, lr}
 80097a6:	4604      	mov	r4, r0
 80097a8:	4608      	mov	r0, r1
 80097aa:	4611      	mov	r1, r2
 80097ac:	2200      	movs	r2, #0
 80097ae:	4d05      	ldr	r5, [pc, #20]	; (80097c4 <_write_r+0x20>)
 80097b0:	602a      	str	r2, [r5, #0]
 80097b2:	461a      	mov	r2, r3
 80097b4:	f7f8 fe65 	bl	8002482 <_write>
 80097b8:	1c43      	adds	r3, r0, #1
 80097ba:	d102      	bne.n	80097c2 <_write_r+0x1e>
 80097bc:	682b      	ldr	r3, [r5, #0]
 80097be:	b103      	cbz	r3, 80097c2 <_write_r+0x1e>
 80097c0:	6023      	str	r3, [r4, #0]
 80097c2:	bd38      	pop	{r3, r4, r5, pc}
 80097c4:	2000043c 	.word	0x2000043c

080097c8 <__swsetup_r>:
 80097c8:	4b32      	ldr	r3, [pc, #200]	; (8009894 <__swsetup_r+0xcc>)
 80097ca:	b570      	push	{r4, r5, r6, lr}
 80097cc:	681d      	ldr	r5, [r3, #0]
 80097ce:	4606      	mov	r6, r0
 80097d0:	460c      	mov	r4, r1
 80097d2:	b125      	cbz	r5, 80097de <__swsetup_r+0x16>
 80097d4:	69ab      	ldr	r3, [r5, #24]
 80097d6:	b913      	cbnz	r3, 80097de <__swsetup_r+0x16>
 80097d8:	4628      	mov	r0, r5
 80097da:	f000 f98d 	bl	8009af8 <__sinit>
 80097de:	4b2e      	ldr	r3, [pc, #184]	; (8009898 <__swsetup_r+0xd0>)
 80097e0:	429c      	cmp	r4, r3
 80097e2:	d10f      	bne.n	8009804 <__swsetup_r+0x3c>
 80097e4:	686c      	ldr	r4, [r5, #4]
 80097e6:	89a3      	ldrh	r3, [r4, #12]
 80097e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80097ec:	0719      	lsls	r1, r3, #28
 80097ee:	d42c      	bmi.n	800984a <__swsetup_r+0x82>
 80097f0:	06dd      	lsls	r5, r3, #27
 80097f2:	d411      	bmi.n	8009818 <__swsetup_r+0x50>
 80097f4:	2309      	movs	r3, #9
 80097f6:	6033      	str	r3, [r6, #0]
 80097f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80097fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009800:	81a3      	strh	r3, [r4, #12]
 8009802:	e03e      	b.n	8009882 <__swsetup_r+0xba>
 8009804:	4b25      	ldr	r3, [pc, #148]	; (800989c <__swsetup_r+0xd4>)
 8009806:	429c      	cmp	r4, r3
 8009808:	d101      	bne.n	800980e <__swsetup_r+0x46>
 800980a:	68ac      	ldr	r4, [r5, #8]
 800980c:	e7eb      	b.n	80097e6 <__swsetup_r+0x1e>
 800980e:	4b24      	ldr	r3, [pc, #144]	; (80098a0 <__swsetup_r+0xd8>)
 8009810:	429c      	cmp	r4, r3
 8009812:	bf08      	it	eq
 8009814:	68ec      	ldreq	r4, [r5, #12]
 8009816:	e7e6      	b.n	80097e6 <__swsetup_r+0x1e>
 8009818:	0758      	lsls	r0, r3, #29
 800981a:	d512      	bpl.n	8009842 <__swsetup_r+0x7a>
 800981c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800981e:	b141      	cbz	r1, 8009832 <__swsetup_r+0x6a>
 8009820:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009824:	4299      	cmp	r1, r3
 8009826:	d002      	beq.n	800982e <__swsetup_r+0x66>
 8009828:	4630      	mov	r0, r6
 800982a:	f000 fa7b 	bl	8009d24 <_free_r>
 800982e:	2300      	movs	r3, #0
 8009830:	6363      	str	r3, [r4, #52]	; 0x34
 8009832:	89a3      	ldrh	r3, [r4, #12]
 8009834:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009838:	81a3      	strh	r3, [r4, #12]
 800983a:	2300      	movs	r3, #0
 800983c:	6063      	str	r3, [r4, #4]
 800983e:	6923      	ldr	r3, [r4, #16]
 8009840:	6023      	str	r3, [r4, #0]
 8009842:	89a3      	ldrh	r3, [r4, #12]
 8009844:	f043 0308 	orr.w	r3, r3, #8
 8009848:	81a3      	strh	r3, [r4, #12]
 800984a:	6923      	ldr	r3, [r4, #16]
 800984c:	b94b      	cbnz	r3, 8009862 <__swsetup_r+0x9a>
 800984e:	89a3      	ldrh	r3, [r4, #12]
 8009850:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009854:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009858:	d003      	beq.n	8009862 <__swsetup_r+0x9a>
 800985a:	4621      	mov	r1, r4
 800985c:	4630      	mov	r0, r6
 800985e:	f000 fa21 	bl	8009ca4 <__smakebuf_r>
 8009862:	89a0      	ldrh	r0, [r4, #12]
 8009864:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009868:	f010 0301 	ands.w	r3, r0, #1
 800986c:	d00a      	beq.n	8009884 <__swsetup_r+0xbc>
 800986e:	2300      	movs	r3, #0
 8009870:	60a3      	str	r3, [r4, #8]
 8009872:	6963      	ldr	r3, [r4, #20]
 8009874:	425b      	negs	r3, r3
 8009876:	61a3      	str	r3, [r4, #24]
 8009878:	6923      	ldr	r3, [r4, #16]
 800987a:	b943      	cbnz	r3, 800988e <__swsetup_r+0xc6>
 800987c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009880:	d1ba      	bne.n	80097f8 <__swsetup_r+0x30>
 8009882:	bd70      	pop	{r4, r5, r6, pc}
 8009884:	0781      	lsls	r1, r0, #30
 8009886:	bf58      	it	pl
 8009888:	6963      	ldrpl	r3, [r4, #20]
 800988a:	60a3      	str	r3, [r4, #8]
 800988c:	e7f4      	b.n	8009878 <__swsetup_r+0xb0>
 800988e:	2000      	movs	r0, #0
 8009890:	e7f7      	b.n	8009882 <__swsetup_r+0xba>
 8009892:	bf00      	nop
 8009894:	2000001c 	.word	0x2000001c
 8009898:	0800c228 	.word	0x0800c228
 800989c:	0800c248 	.word	0x0800c248
 80098a0:	0800c208 	.word	0x0800c208

080098a4 <_close_r>:
 80098a4:	b538      	push	{r3, r4, r5, lr}
 80098a6:	2300      	movs	r3, #0
 80098a8:	4d05      	ldr	r5, [pc, #20]	; (80098c0 <_close_r+0x1c>)
 80098aa:	4604      	mov	r4, r0
 80098ac:	4608      	mov	r0, r1
 80098ae:	602b      	str	r3, [r5, #0]
 80098b0:	f7f8 fe03 	bl	80024ba <_close>
 80098b4:	1c43      	adds	r3, r0, #1
 80098b6:	d102      	bne.n	80098be <_close_r+0x1a>
 80098b8:	682b      	ldr	r3, [r5, #0]
 80098ba:	b103      	cbz	r3, 80098be <_close_r+0x1a>
 80098bc:	6023      	str	r3, [r4, #0]
 80098be:	bd38      	pop	{r3, r4, r5, pc}
 80098c0:	2000043c 	.word	0x2000043c

080098c4 <__sflush_r>:
 80098c4:	898a      	ldrh	r2, [r1, #12]
 80098c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098ca:	4605      	mov	r5, r0
 80098cc:	0710      	lsls	r0, r2, #28
 80098ce:	460c      	mov	r4, r1
 80098d0:	d458      	bmi.n	8009984 <__sflush_r+0xc0>
 80098d2:	684b      	ldr	r3, [r1, #4]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	dc05      	bgt.n	80098e4 <__sflush_r+0x20>
 80098d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80098da:	2b00      	cmp	r3, #0
 80098dc:	dc02      	bgt.n	80098e4 <__sflush_r+0x20>
 80098de:	2000      	movs	r0, #0
 80098e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80098e6:	2e00      	cmp	r6, #0
 80098e8:	d0f9      	beq.n	80098de <__sflush_r+0x1a>
 80098ea:	2300      	movs	r3, #0
 80098ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80098f0:	682f      	ldr	r7, [r5, #0]
 80098f2:	602b      	str	r3, [r5, #0]
 80098f4:	d032      	beq.n	800995c <__sflush_r+0x98>
 80098f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80098f8:	89a3      	ldrh	r3, [r4, #12]
 80098fa:	075a      	lsls	r2, r3, #29
 80098fc:	d505      	bpl.n	800990a <__sflush_r+0x46>
 80098fe:	6863      	ldr	r3, [r4, #4]
 8009900:	1ac0      	subs	r0, r0, r3
 8009902:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009904:	b10b      	cbz	r3, 800990a <__sflush_r+0x46>
 8009906:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009908:	1ac0      	subs	r0, r0, r3
 800990a:	2300      	movs	r3, #0
 800990c:	4602      	mov	r2, r0
 800990e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009910:	4628      	mov	r0, r5
 8009912:	6a21      	ldr	r1, [r4, #32]
 8009914:	47b0      	blx	r6
 8009916:	1c43      	adds	r3, r0, #1
 8009918:	89a3      	ldrh	r3, [r4, #12]
 800991a:	d106      	bne.n	800992a <__sflush_r+0x66>
 800991c:	6829      	ldr	r1, [r5, #0]
 800991e:	291d      	cmp	r1, #29
 8009920:	d82c      	bhi.n	800997c <__sflush_r+0xb8>
 8009922:	4a2a      	ldr	r2, [pc, #168]	; (80099cc <__sflush_r+0x108>)
 8009924:	40ca      	lsrs	r2, r1
 8009926:	07d6      	lsls	r6, r2, #31
 8009928:	d528      	bpl.n	800997c <__sflush_r+0xb8>
 800992a:	2200      	movs	r2, #0
 800992c:	6062      	str	r2, [r4, #4]
 800992e:	6922      	ldr	r2, [r4, #16]
 8009930:	04d9      	lsls	r1, r3, #19
 8009932:	6022      	str	r2, [r4, #0]
 8009934:	d504      	bpl.n	8009940 <__sflush_r+0x7c>
 8009936:	1c42      	adds	r2, r0, #1
 8009938:	d101      	bne.n	800993e <__sflush_r+0x7a>
 800993a:	682b      	ldr	r3, [r5, #0]
 800993c:	b903      	cbnz	r3, 8009940 <__sflush_r+0x7c>
 800993e:	6560      	str	r0, [r4, #84]	; 0x54
 8009940:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009942:	602f      	str	r7, [r5, #0]
 8009944:	2900      	cmp	r1, #0
 8009946:	d0ca      	beq.n	80098de <__sflush_r+0x1a>
 8009948:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800994c:	4299      	cmp	r1, r3
 800994e:	d002      	beq.n	8009956 <__sflush_r+0x92>
 8009950:	4628      	mov	r0, r5
 8009952:	f000 f9e7 	bl	8009d24 <_free_r>
 8009956:	2000      	movs	r0, #0
 8009958:	6360      	str	r0, [r4, #52]	; 0x34
 800995a:	e7c1      	b.n	80098e0 <__sflush_r+0x1c>
 800995c:	6a21      	ldr	r1, [r4, #32]
 800995e:	2301      	movs	r3, #1
 8009960:	4628      	mov	r0, r5
 8009962:	47b0      	blx	r6
 8009964:	1c41      	adds	r1, r0, #1
 8009966:	d1c7      	bne.n	80098f8 <__sflush_r+0x34>
 8009968:	682b      	ldr	r3, [r5, #0]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d0c4      	beq.n	80098f8 <__sflush_r+0x34>
 800996e:	2b1d      	cmp	r3, #29
 8009970:	d001      	beq.n	8009976 <__sflush_r+0xb2>
 8009972:	2b16      	cmp	r3, #22
 8009974:	d101      	bne.n	800997a <__sflush_r+0xb6>
 8009976:	602f      	str	r7, [r5, #0]
 8009978:	e7b1      	b.n	80098de <__sflush_r+0x1a>
 800997a:	89a3      	ldrh	r3, [r4, #12]
 800997c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009980:	81a3      	strh	r3, [r4, #12]
 8009982:	e7ad      	b.n	80098e0 <__sflush_r+0x1c>
 8009984:	690f      	ldr	r7, [r1, #16]
 8009986:	2f00      	cmp	r7, #0
 8009988:	d0a9      	beq.n	80098de <__sflush_r+0x1a>
 800998a:	0793      	lsls	r3, r2, #30
 800998c:	bf18      	it	ne
 800998e:	2300      	movne	r3, #0
 8009990:	680e      	ldr	r6, [r1, #0]
 8009992:	bf08      	it	eq
 8009994:	694b      	ldreq	r3, [r1, #20]
 8009996:	eba6 0807 	sub.w	r8, r6, r7
 800999a:	600f      	str	r7, [r1, #0]
 800999c:	608b      	str	r3, [r1, #8]
 800999e:	f1b8 0f00 	cmp.w	r8, #0
 80099a2:	dd9c      	ble.n	80098de <__sflush_r+0x1a>
 80099a4:	4643      	mov	r3, r8
 80099a6:	463a      	mov	r2, r7
 80099a8:	4628      	mov	r0, r5
 80099aa:	6a21      	ldr	r1, [r4, #32]
 80099ac:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80099ae:	47b0      	blx	r6
 80099b0:	2800      	cmp	r0, #0
 80099b2:	dc06      	bgt.n	80099c2 <__sflush_r+0xfe>
 80099b4:	89a3      	ldrh	r3, [r4, #12]
 80099b6:	f04f 30ff 	mov.w	r0, #4294967295
 80099ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099be:	81a3      	strh	r3, [r4, #12]
 80099c0:	e78e      	b.n	80098e0 <__sflush_r+0x1c>
 80099c2:	4407      	add	r7, r0
 80099c4:	eba8 0800 	sub.w	r8, r8, r0
 80099c8:	e7e9      	b.n	800999e <__sflush_r+0xda>
 80099ca:	bf00      	nop
 80099cc:	20400001 	.word	0x20400001

080099d0 <_fflush_r>:
 80099d0:	b538      	push	{r3, r4, r5, lr}
 80099d2:	690b      	ldr	r3, [r1, #16]
 80099d4:	4605      	mov	r5, r0
 80099d6:	460c      	mov	r4, r1
 80099d8:	b913      	cbnz	r3, 80099e0 <_fflush_r+0x10>
 80099da:	2500      	movs	r5, #0
 80099dc:	4628      	mov	r0, r5
 80099de:	bd38      	pop	{r3, r4, r5, pc}
 80099e0:	b118      	cbz	r0, 80099ea <_fflush_r+0x1a>
 80099e2:	6983      	ldr	r3, [r0, #24]
 80099e4:	b90b      	cbnz	r3, 80099ea <_fflush_r+0x1a>
 80099e6:	f000 f887 	bl	8009af8 <__sinit>
 80099ea:	4b14      	ldr	r3, [pc, #80]	; (8009a3c <_fflush_r+0x6c>)
 80099ec:	429c      	cmp	r4, r3
 80099ee:	d11b      	bne.n	8009a28 <_fflush_r+0x58>
 80099f0:	686c      	ldr	r4, [r5, #4]
 80099f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d0ef      	beq.n	80099da <_fflush_r+0xa>
 80099fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80099fc:	07d0      	lsls	r0, r2, #31
 80099fe:	d404      	bmi.n	8009a0a <_fflush_r+0x3a>
 8009a00:	0599      	lsls	r1, r3, #22
 8009a02:	d402      	bmi.n	8009a0a <_fflush_r+0x3a>
 8009a04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a06:	f000 f915 	bl	8009c34 <__retarget_lock_acquire_recursive>
 8009a0a:	4628      	mov	r0, r5
 8009a0c:	4621      	mov	r1, r4
 8009a0e:	f7ff ff59 	bl	80098c4 <__sflush_r>
 8009a12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a14:	4605      	mov	r5, r0
 8009a16:	07da      	lsls	r2, r3, #31
 8009a18:	d4e0      	bmi.n	80099dc <_fflush_r+0xc>
 8009a1a:	89a3      	ldrh	r3, [r4, #12]
 8009a1c:	059b      	lsls	r3, r3, #22
 8009a1e:	d4dd      	bmi.n	80099dc <_fflush_r+0xc>
 8009a20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a22:	f000 f908 	bl	8009c36 <__retarget_lock_release_recursive>
 8009a26:	e7d9      	b.n	80099dc <_fflush_r+0xc>
 8009a28:	4b05      	ldr	r3, [pc, #20]	; (8009a40 <_fflush_r+0x70>)
 8009a2a:	429c      	cmp	r4, r3
 8009a2c:	d101      	bne.n	8009a32 <_fflush_r+0x62>
 8009a2e:	68ac      	ldr	r4, [r5, #8]
 8009a30:	e7df      	b.n	80099f2 <_fflush_r+0x22>
 8009a32:	4b04      	ldr	r3, [pc, #16]	; (8009a44 <_fflush_r+0x74>)
 8009a34:	429c      	cmp	r4, r3
 8009a36:	bf08      	it	eq
 8009a38:	68ec      	ldreq	r4, [r5, #12]
 8009a3a:	e7da      	b.n	80099f2 <_fflush_r+0x22>
 8009a3c:	0800c228 	.word	0x0800c228
 8009a40:	0800c248 	.word	0x0800c248
 8009a44:	0800c208 	.word	0x0800c208

08009a48 <std>:
 8009a48:	2300      	movs	r3, #0
 8009a4a:	b510      	push	{r4, lr}
 8009a4c:	4604      	mov	r4, r0
 8009a4e:	e9c0 3300 	strd	r3, r3, [r0]
 8009a52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009a56:	6083      	str	r3, [r0, #8]
 8009a58:	8181      	strh	r1, [r0, #12]
 8009a5a:	6643      	str	r3, [r0, #100]	; 0x64
 8009a5c:	81c2      	strh	r2, [r0, #14]
 8009a5e:	6183      	str	r3, [r0, #24]
 8009a60:	4619      	mov	r1, r3
 8009a62:	2208      	movs	r2, #8
 8009a64:	305c      	adds	r0, #92	; 0x5c
 8009a66:	f7ff fd45 	bl	80094f4 <memset>
 8009a6a:	4b05      	ldr	r3, [pc, #20]	; (8009a80 <std+0x38>)
 8009a6c:	6224      	str	r4, [r4, #32]
 8009a6e:	6263      	str	r3, [r4, #36]	; 0x24
 8009a70:	4b04      	ldr	r3, [pc, #16]	; (8009a84 <std+0x3c>)
 8009a72:	62a3      	str	r3, [r4, #40]	; 0x28
 8009a74:	4b04      	ldr	r3, [pc, #16]	; (8009a88 <std+0x40>)
 8009a76:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009a78:	4b04      	ldr	r3, [pc, #16]	; (8009a8c <std+0x44>)
 8009a7a:	6323      	str	r3, [r4, #48]	; 0x30
 8009a7c:	bd10      	pop	{r4, pc}
 8009a7e:	bf00      	nop
 8009a80:	08009675 	.word	0x08009675
 8009a84:	0800969b 	.word	0x0800969b
 8009a88:	080096d3 	.word	0x080096d3
 8009a8c:	080096f7 	.word	0x080096f7

08009a90 <_cleanup_r>:
 8009a90:	4901      	ldr	r1, [pc, #4]	; (8009a98 <_cleanup_r+0x8>)
 8009a92:	f000 b8af 	b.w	8009bf4 <_fwalk_reent>
 8009a96:	bf00      	nop
 8009a98:	080099d1 	.word	0x080099d1

08009a9c <__sfmoreglue>:
 8009a9c:	b570      	push	{r4, r5, r6, lr}
 8009a9e:	2568      	movs	r5, #104	; 0x68
 8009aa0:	1e4a      	subs	r2, r1, #1
 8009aa2:	4355      	muls	r5, r2
 8009aa4:	460e      	mov	r6, r1
 8009aa6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009aaa:	f000 f987 	bl	8009dbc <_malloc_r>
 8009aae:	4604      	mov	r4, r0
 8009ab0:	b140      	cbz	r0, 8009ac4 <__sfmoreglue+0x28>
 8009ab2:	2100      	movs	r1, #0
 8009ab4:	e9c0 1600 	strd	r1, r6, [r0]
 8009ab8:	300c      	adds	r0, #12
 8009aba:	60a0      	str	r0, [r4, #8]
 8009abc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009ac0:	f7ff fd18 	bl	80094f4 <memset>
 8009ac4:	4620      	mov	r0, r4
 8009ac6:	bd70      	pop	{r4, r5, r6, pc}

08009ac8 <__sfp_lock_acquire>:
 8009ac8:	4801      	ldr	r0, [pc, #4]	; (8009ad0 <__sfp_lock_acquire+0x8>)
 8009aca:	f000 b8b3 	b.w	8009c34 <__retarget_lock_acquire_recursive>
 8009ace:	bf00      	nop
 8009ad0:	20000438 	.word	0x20000438

08009ad4 <__sfp_lock_release>:
 8009ad4:	4801      	ldr	r0, [pc, #4]	; (8009adc <__sfp_lock_release+0x8>)
 8009ad6:	f000 b8ae 	b.w	8009c36 <__retarget_lock_release_recursive>
 8009ada:	bf00      	nop
 8009adc:	20000438 	.word	0x20000438

08009ae0 <__sinit_lock_acquire>:
 8009ae0:	4801      	ldr	r0, [pc, #4]	; (8009ae8 <__sinit_lock_acquire+0x8>)
 8009ae2:	f000 b8a7 	b.w	8009c34 <__retarget_lock_acquire_recursive>
 8009ae6:	bf00      	nop
 8009ae8:	20000433 	.word	0x20000433

08009aec <__sinit_lock_release>:
 8009aec:	4801      	ldr	r0, [pc, #4]	; (8009af4 <__sinit_lock_release+0x8>)
 8009aee:	f000 b8a2 	b.w	8009c36 <__retarget_lock_release_recursive>
 8009af2:	bf00      	nop
 8009af4:	20000433 	.word	0x20000433

08009af8 <__sinit>:
 8009af8:	b510      	push	{r4, lr}
 8009afa:	4604      	mov	r4, r0
 8009afc:	f7ff fff0 	bl	8009ae0 <__sinit_lock_acquire>
 8009b00:	69a3      	ldr	r3, [r4, #24]
 8009b02:	b11b      	cbz	r3, 8009b0c <__sinit+0x14>
 8009b04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b08:	f7ff bff0 	b.w	8009aec <__sinit_lock_release>
 8009b0c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009b10:	6523      	str	r3, [r4, #80]	; 0x50
 8009b12:	4b13      	ldr	r3, [pc, #76]	; (8009b60 <__sinit+0x68>)
 8009b14:	4a13      	ldr	r2, [pc, #76]	; (8009b64 <__sinit+0x6c>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	62a2      	str	r2, [r4, #40]	; 0x28
 8009b1a:	42a3      	cmp	r3, r4
 8009b1c:	bf08      	it	eq
 8009b1e:	2301      	moveq	r3, #1
 8009b20:	4620      	mov	r0, r4
 8009b22:	bf08      	it	eq
 8009b24:	61a3      	streq	r3, [r4, #24]
 8009b26:	f000 f81f 	bl	8009b68 <__sfp>
 8009b2a:	6060      	str	r0, [r4, #4]
 8009b2c:	4620      	mov	r0, r4
 8009b2e:	f000 f81b 	bl	8009b68 <__sfp>
 8009b32:	60a0      	str	r0, [r4, #8]
 8009b34:	4620      	mov	r0, r4
 8009b36:	f000 f817 	bl	8009b68 <__sfp>
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	2104      	movs	r1, #4
 8009b3e:	60e0      	str	r0, [r4, #12]
 8009b40:	6860      	ldr	r0, [r4, #4]
 8009b42:	f7ff ff81 	bl	8009a48 <std>
 8009b46:	2201      	movs	r2, #1
 8009b48:	2109      	movs	r1, #9
 8009b4a:	68a0      	ldr	r0, [r4, #8]
 8009b4c:	f7ff ff7c 	bl	8009a48 <std>
 8009b50:	2202      	movs	r2, #2
 8009b52:	2112      	movs	r1, #18
 8009b54:	68e0      	ldr	r0, [r4, #12]
 8009b56:	f7ff ff77 	bl	8009a48 <std>
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	61a3      	str	r3, [r4, #24]
 8009b5e:	e7d1      	b.n	8009b04 <__sinit+0xc>
 8009b60:	0800c204 	.word	0x0800c204
 8009b64:	08009a91 	.word	0x08009a91

08009b68 <__sfp>:
 8009b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b6a:	4607      	mov	r7, r0
 8009b6c:	f7ff ffac 	bl	8009ac8 <__sfp_lock_acquire>
 8009b70:	4b1e      	ldr	r3, [pc, #120]	; (8009bec <__sfp+0x84>)
 8009b72:	681e      	ldr	r6, [r3, #0]
 8009b74:	69b3      	ldr	r3, [r6, #24]
 8009b76:	b913      	cbnz	r3, 8009b7e <__sfp+0x16>
 8009b78:	4630      	mov	r0, r6
 8009b7a:	f7ff ffbd 	bl	8009af8 <__sinit>
 8009b7e:	3648      	adds	r6, #72	; 0x48
 8009b80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009b84:	3b01      	subs	r3, #1
 8009b86:	d503      	bpl.n	8009b90 <__sfp+0x28>
 8009b88:	6833      	ldr	r3, [r6, #0]
 8009b8a:	b30b      	cbz	r3, 8009bd0 <__sfp+0x68>
 8009b8c:	6836      	ldr	r6, [r6, #0]
 8009b8e:	e7f7      	b.n	8009b80 <__sfp+0x18>
 8009b90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009b94:	b9d5      	cbnz	r5, 8009bcc <__sfp+0x64>
 8009b96:	4b16      	ldr	r3, [pc, #88]	; (8009bf0 <__sfp+0x88>)
 8009b98:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009b9c:	60e3      	str	r3, [r4, #12]
 8009b9e:	6665      	str	r5, [r4, #100]	; 0x64
 8009ba0:	f000 f847 	bl	8009c32 <__retarget_lock_init_recursive>
 8009ba4:	f7ff ff96 	bl	8009ad4 <__sfp_lock_release>
 8009ba8:	2208      	movs	r2, #8
 8009baa:	4629      	mov	r1, r5
 8009bac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009bb0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009bb4:	6025      	str	r5, [r4, #0]
 8009bb6:	61a5      	str	r5, [r4, #24]
 8009bb8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009bbc:	f7ff fc9a 	bl	80094f4 <memset>
 8009bc0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009bc4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009bc8:	4620      	mov	r0, r4
 8009bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bcc:	3468      	adds	r4, #104	; 0x68
 8009bce:	e7d9      	b.n	8009b84 <__sfp+0x1c>
 8009bd0:	2104      	movs	r1, #4
 8009bd2:	4638      	mov	r0, r7
 8009bd4:	f7ff ff62 	bl	8009a9c <__sfmoreglue>
 8009bd8:	4604      	mov	r4, r0
 8009bda:	6030      	str	r0, [r6, #0]
 8009bdc:	2800      	cmp	r0, #0
 8009bde:	d1d5      	bne.n	8009b8c <__sfp+0x24>
 8009be0:	f7ff ff78 	bl	8009ad4 <__sfp_lock_release>
 8009be4:	230c      	movs	r3, #12
 8009be6:	603b      	str	r3, [r7, #0]
 8009be8:	e7ee      	b.n	8009bc8 <__sfp+0x60>
 8009bea:	bf00      	nop
 8009bec:	0800c204 	.word	0x0800c204
 8009bf0:	ffff0001 	.word	0xffff0001

08009bf4 <_fwalk_reent>:
 8009bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bf8:	4606      	mov	r6, r0
 8009bfa:	4688      	mov	r8, r1
 8009bfc:	2700      	movs	r7, #0
 8009bfe:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009c02:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009c06:	f1b9 0901 	subs.w	r9, r9, #1
 8009c0a:	d505      	bpl.n	8009c18 <_fwalk_reent+0x24>
 8009c0c:	6824      	ldr	r4, [r4, #0]
 8009c0e:	2c00      	cmp	r4, #0
 8009c10:	d1f7      	bne.n	8009c02 <_fwalk_reent+0xe>
 8009c12:	4638      	mov	r0, r7
 8009c14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c18:	89ab      	ldrh	r3, [r5, #12]
 8009c1a:	2b01      	cmp	r3, #1
 8009c1c:	d907      	bls.n	8009c2e <_fwalk_reent+0x3a>
 8009c1e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009c22:	3301      	adds	r3, #1
 8009c24:	d003      	beq.n	8009c2e <_fwalk_reent+0x3a>
 8009c26:	4629      	mov	r1, r5
 8009c28:	4630      	mov	r0, r6
 8009c2a:	47c0      	blx	r8
 8009c2c:	4307      	orrs	r7, r0
 8009c2e:	3568      	adds	r5, #104	; 0x68
 8009c30:	e7e9      	b.n	8009c06 <_fwalk_reent+0x12>

08009c32 <__retarget_lock_init_recursive>:
 8009c32:	4770      	bx	lr

08009c34 <__retarget_lock_acquire_recursive>:
 8009c34:	4770      	bx	lr

08009c36 <__retarget_lock_release_recursive>:
 8009c36:	4770      	bx	lr

08009c38 <_lseek_r>:
 8009c38:	b538      	push	{r3, r4, r5, lr}
 8009c3a:	4604      	mov	r4, r0
 8009c3c:	4608      	mov	r0, r1
 8009c3e:	4611      	mov	r1, r2
 8009c40:	2200      	movs	r2, #0
 8009c42:	4d05      	ldr	r5, [pc, #20]	; (8009c58 <_lseek_r+0x20>)
 8009c44:	602a      	str	r2, [r5, #0]
 8009c46:	461a      	mov	r2, r3
 8009c48:	f7f8 fc5b 	bl	8002502 <_lseek>
 8009c4c:	1c43      	adds	r3, r0, #1
 8009c4e:	d102      	bne.n	8009c56 <_lseek_r+0x1e>
 8009c50:	682b      	ldr	r3, [r5, #0]
 8009c52:	b103      	cbz	r3, 8009c56 <_lseek_r+0x1e>
 8009c54:	6023      	str	r3, [r4, #0]
 8009c56:	bd38      	pop	{r3, r4, r5, pc}
 8009c58:	2000043c 	.word	0x2000043c

08009c5c <__swhatbuf_r>:
 8009c5c:	b570      	push	{r4, r5, r6, lr}
 8009c5e:	460e      	mov	r6, r1
 8009c60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c64:	4614      	mov	r4, r2
 8009c66:	2900      	cmp	r1, #0
 8009c68:	461d      	mov	r5, r3
 8009c6a:	b096      	sub	sp, #88	; 0x58
 8009c6c:	da07      	bge.n	8009c7e <__swhatbuf_r+0x22>
 8009c6e:	2300      	movs	r3, #0
 8009c70:	602b      	str	r3, [r5, #0]
 8009c72:	89b3      	ldrh	r3, [r6, #12]
 8009c74:	061a      	lsls	r2, r3, #24
 8009c76:	d410      	bmi.n	8009c9a <__swhatbuf_r+0x3e>
 8009c78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c7c:	e00e      	b.n	8009c9c <__swhatbuf_r+0x40>
 8009c7e:	466a      	mov	r2, sp
 8009c80:	f001 f89c 	bl	800adbc <_fstat_r>
 8009c84:	2800      	cmp	r0, #0
 8009c86:	dbf2      	blt.n	8009c6e <__swhatbuf_r+0x12>
 8009c88:	9a01      	ldr	r2, [sp, #4]
 8009c8a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009c8e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009c92:	425a      	negs	r2, r3
 8009c94:	415a      	adcs	r2, r3
 8009c96:	602a      	str	r2, [r5, #0]
 8009c98:	e7ee      	b.n	8009c78 <__swhatbuf_r+0x1c>
 8009c9a:	2340      	movs	r3, #64	; 0x40
 8009c9c:	2000      	movs	r0, #0
 8009c9e:	6023      	str	r3, [r4, #0]
 8009ca0:	b016      	add	sp, #88	; 0x58
 8009ca2:	bd70      	pop	{r4, r5, r6, pc}

08009ca4 <__smakebuf_r>:
 8009ca4:	898b      	ldrh	r3, [r1, #12]
 8009ca6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009ca8:	079d      	lsls	r5, r3, #30
 8009caa:	4606      	mov	r6, r0
 8009cac:	460c      	mov	r4, r1
 8009cae:	d507      	bpl.n	8009cc0 <__smakebuf_r+0x1c>
 8009cb0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009cb4:	6023      	str	r3, [r4, #0]
 8009cb6:	6123      	str	r3, [r4, #16]
 8009cb8:	2301      	movs	r3, #1
 8009cba:	6163      	str	r3, [r4, #20]
 8009cbc:	b002      	add	sp, #8
 8009cbe:	bd70      	pop	{r4, r5, r6, pc}
 8009cc0:	466a      	mov	r2, sp
 8009cc2:	ab01      	add	r3, sp, #4
 8009cc4:	f7ff ffca 	bl	8009c5c <__swhatbuf_r>
 8009cc8:	9900      	ldr	r1, [sp, #0]
 8009cca:	4605      	mov	r5, r0
 8009ccc:	4630      	mov	r0, r6
 8009cce:	f000 f875 	bl	8009dbc <_malloc_r>
 8009cd2:	b948      	cbnz	r0, 8009ce8 <__smakebuf_r+0x44>
 8009cd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cd8:	059a      	lsls	r2, r3, #22
 8009cda:	d4ef      	bmi.n	8009cbc <__smakebuf_r+0x18>
 8009cdc:	f023 0303 	bic.w	r3, r3, #3
 8009ce0:	f043 0302 	orr.w	r3, r3, #2
 8009ce4:	81a3      	strh	r3, [r4, #12]
 8009ce6:	e7e3      	b.n	8009cb0 <__smakebuf_r+0xc>
 8009ce8:	4b0d      	ldr	r3, [pc, #52]	; (8009d20 <__smakebuf_r+0x7c>)
 8009cea:	62b3      	str	r3, [r6, #40]	; 0x28
 8009cec:	89a3      	ldrh	r3, [r4, #12]
 8009cee:	6020      	str	r0, [r4, #0]
 8009cf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cf4:	81a3      	strh	r3, [r4, #12]
 8009cf6:	9b00      	ldr	r3, [sp, #0]
 8009cf8:	6120      	str	r0, [r4, #16]
 8009cfa:	6163      	str	r3, [r4, #20]
 8009cfc:	9b01      	ldr	r3, [sp, #4]
 8009cfe:	b15b      	cbz	r3, 8009d18 <__smakebuf_r+0x74>
 8009d00:	4630      	mov	r0, r6
 8009d02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d06:	f001 f86b 	bl	800ade0 <_isatty_r>
 8009d0a:	b128      	cbz	r0, 8009d18 <__smakebuf_r+0x74>
 8009d0c:	89a3      	ldrh	r3, [r4, #12]
 8009d0e:	f023 0303 	bic.w	r3, r3, #3
 8009d12:	f043 0301 	orr.w	r3, r3, #1
 8009d16:	81a3      	strh	r3, [r4, #12]
 8009d18:	89a0      	ldrh	r0, [r4, #12]
 8009d1a:	4305      	orrs	r5, r0
 8009d1c:	81a5      	strh	r5, [r4, #12]
 8009d1e:	e7cd      	b.n	8009cbc <__smakebuf_r+0x18>
 8009d20:	08009a91 	.word	0x08009a91

08009d24 <_free_r>:
 8009d24:	b538      	push	{r3, r4, r5, lr}
 8009d26:	4605      	mov	r5, r0
 8009d28:	2900      	cmp	r1, #0
 8009d2a:	d043      	beq.n	8009db4 <_free_r+0x90>
 8009d2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d30:	1f0c      	subs	r4, r1, #4
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	bfb8      	it	lt
 8009d36:	18e4      	addlt	r4, r4, r3
 8009d38:	f001 f87e 	bl	800ae38 <__malloc_lock>
 8009d3c:	4a1e      	ldr	r2, [pc, #120]	; (8009db8 <_free_r+0x94>)
 8009d3e:	6813      	ldr	r3, [r2, #0]
 8009d40:	4610      	mov	r0, r2
 8009d42:	b933      	cbnz	r3, 8009d52 <_free_r+0x2e>
 8009d44:	6063      	str	r3, [r4, #4]
 8009d46:	6014      	str	r4, [r2, #0]
 8009d48:	4628      	mov	r0, r5
 8009d4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d4e:	f001 b879 	b.w	800ae44 <__malloc_unlock>
 8009d52:	42a3      	cmp	r3, r4
 8009d54:	d90a      	bls.n	8009d6c <_free_r+0x48>
 8009d56:	6821      	ldr	r1, [r4, #0]
 8009d58:	1862      	adds	r2, r4, r1
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	bf01      	itttt	eq
 8009d5e:	681a      	ldreq	r2, [r3, #0]
 8009d60:	685b      	ldreq	r3, [r3, #4]
 8009d62:	1852      	addeq	r2, r2, r1
 8009d64:	6022      	streq	r2, [r4, #0]
 8009d66:	6063      	str	r3, [r4, #4]
 8009d68:	6004      	str	r4, [r0, #0]
 8009d6a:	e7ed      	b.n	8009d48 <_free_r+0x24>
 8009d6c:	461a      	mov	r2, r3
 8009d6e:	685b      	ldr	r3, [r3, #4]
 8009d70:	b10b      	cbz	r3, 8009d76 <_free_r+0x52>
 8009d72:	42a3      	cmp	r3, r4
 8009d74:	d9fa      	bls.n	8009d6c <_free_r+0x48>
 8009d76:	6811      	ldr	r1, [r2, #0]
 8009d78:	1850      	adds	r0, r2, r1
 8009d7a:	42a0      	cmp	r0, r4
 8009d7c:	d10b      	bne.n	8009d96 <_free_r+0x72>
 8009d7e:	6820      	ldr	r0, [r4, #0]
 8009d80:	4401      	add	r1, r0
 8009d82:	1850      	adds	r0, r2, r1
 8009d84:	4283      	cmp	r3, r0
 8009d86:	6011      	str	r1, [r2, #0]
 8009d88:	d1de      	bne.n	8009d48 <_free_r+0x24>
 8009d8a:	6818      	ldr	r0, [r3, #0]
 8009d8c:	685b      	ldr	r3, [r3, #4]
 8009d8e:	4401      	add	r1, r0
 8009d90:	6011      	str	r1, [r2, #0]
 8009d92:	6053      	str	r3, [r2, #4]
 8009d94:	e7d8      	b.n	8009d48 <_free_r+0x24>
 8009d96:	d902      	bls.n	8009d9e <_free_r+0x7a>
 8009d98:	230c      	movs	r3, #12
 8009d9a:	602b      	str	r3, [r5, #0]
 8009d9c:	e7d4      	b.n	8009d48 <_free_r+0x24>
 8009d9e:	6820      	ldr	r0, [r4, #0]
 8009da0:	1821      	adds	r1, r4, r0
 8009da2:	428b      	cmp	r3, r1
 8009da4:	bf01      	itttt	eq
 8009da6:	6819      	ldreq	r1, [r3, #0]
 8009da8:	685b      	ldreq	r3, [r3, #4]
 8009daa:	1809      	addeq	r1, r1, r0
 8009dac:	6021      	streq	r1, [r4, #0]
 8009dae:	6063      	str	r3, [r4, #4]
 8009db0:	6054      	str	r4, [r2, #4]
 8009db2:	e7c9      	b.n	8009d48 <_free_r+0x24>
 8009db4:	bd38      	pop	{r3, r4, r5, pc}
 8009db6:	bf00      	nop
 8009db8:	2000018c 	.word	0x2000018c

08009dbc <_malloc_r>:
 8009dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dbe:	1ccd      	adds	r5, r1, #3
 8009dc0:	f025 0503 	bic.w	r5, r5, #3
 8009dc4:	3508      	adds	r5, #8
 8009dc6:	2d0c      	cmp	r5, #12
 8009dc8:	bf38      	it	cc
 8009dca:	250c      	movcc	r5, #12
 8009dcc:	2d00      	cmp	r5, #0
 8009dce:	4606      	mov	r6, r0
 8009dd0:	db01      	blt.n	8009dd6 <_malloc_r+0x1a>
 8009dd2:	42a9      	cmp	r1, r5
 8009dd4:	d903      	bls.n	8009dde <_malloc_r+0x22>
 8009dd6:	230c      	movs	r3, #12
 8009dd8:	6033      	str	r3, [r6, #0]
 8009dda:	2000      	movs	r0, #0
 8009ddc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009dde:	f001 f82b 	bl	800ae38 <__malloc_lock>
 8009de2:	4921      	ldr	r1, [pc, #132]	; (8009e68 <_malloc_r+0xac>)
 8009de4:	680a      	ldr	r2, [r1, #0]
 8009de6:	4614      	mov	r4, r2
 8009de8:	b99c      	cbnz	r4, 8009e12 <_malloc_r+0x56>
 8009dea:	4f20      	ldr	r7, [pc, #128]	; (8009e6c <_malloc_r+0xb0>)
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	b923      	cbnz	r3, 8009dfa <_malloc_r+0x3e>
 8009df0:	4621      	mov	r1, r4
 8009df2:	4630      	mov	r0, r6
 8009df4:	f000 fe5a 	bl	800aaac <_sbrk_r>
 8009df8:	6038      	str	r0, [r7, #0]
 8009dfa:	4629      	mov	r1, r5
 8009dfc:	4630      	mov	r0, r6
 8009dfe:	f000 fe55 	bl	800aaac <_sbrk_r>
 8009e02:	1c43      	adds	r3, r0, #1
 8009e04:	d123      	bne.n	8009e4e <_malloc_r+0x92>
 8009e06:	230c      	movs	r3, #12
 8009e08:	4630      	mov	r0, r6
 8009e0a:	6033      	str	r3, [r6, #0]
 8009e0c:	f001 f81a 	bl	800ae44 <__malloc_unlock>
 8009e10:	e7e3      	b.n	8009dda <_malloc_r+0x1e>
 8009e12:	6823      	ldr	r3, [r4, #0]
 8009e14:	1b5b      	subs	r3, r3, r5
 8009e16:	d417      	bmi.n	8009e48 <_malloc_r+0x8c>
 8009e18:	2b0b      	cmp	r3, #11
 8009e1a:	d903      	bls.n	8009e24 <_malloc_r+0x68>
 8009e1c:	6023      	str	r3, [r4, #0]
 8009e1e:	441c      	add	r4, r3
 8009e20:	6025      	str	r5, [r4, #0]
 8009e22:	e004      	b.n	8009e2e <_malloc_r+0x72>
 8009e24:	6863      	ldr	r3, [r4, #4]
 8009e26:	42a2      	cmp	r2, r4
 8009e28:	bf0c      	ite	eq
 8009e2a:	600b      	streq	r3, [r1, #0]
 8009e2c:	6053      	strne	r3, [r2, #4]
 8009e2e:	4630      	mov	r0, r6
 8009e30:	f001 f808 	bl	800ae44 <__malloc_unlock>
 8009e34:	f104 000b 	add.w	r0, r4, #11
 8009e38:	1d23      	adds	r3, r4, #4
 8009e3a:	f020 0007 	bic.w	r0, r0, #7
 8009e3e:	1ac2      	subs	r2, r0, r3
 8009e40:	d0cc      	beq.n	8009ddc <_malloc_r+0x20>
 8009e42:	1a1b      	subs	r3, r3, r0
 8009e44:	50a3      	str	r3, [r4, r2]
 8009e46:	e7c9      	b.n	8009ddc <_malloc_r+0x20>
 8009e48:	4622      	mov	r2, r4
 8009e4a:	6864      	ldr	r4, [r4, #4]
 8009e4c:	e7cc      	b.n	8009de8 <_malloc_r+0x2c>
 8009e4e:	1cc4      	adds	r4, r0, #3
 8009e50:	f024 0403 	bic.w	r4, r4, #3
 8009e54:	42a0      	cmp	r0, r4
 8009e56:	d0e3      	beq.n	8009e20 <_malloc_r+0x64>
 8009e58:	1a21      	subs	r1, r4, r0
 8009e5a:	4630      	mov	r0, r6
 8009e5c:	f000 fe26 	bl	800aaac <_sbrk_r>
 8009e60:	3001      	adds	r0, #1
 8009e62:	d1dd      	bne.n	8009e20 <_malloc_r+0x64>
 8009e64:	e7cf      	b.n	8009e06 <_malloc_r+0x4a>
 8009e66:	bf00      	nop
 8009e68:	2000018c 	.word	0x2000018c
 8009e6c:	20000190 	.word	0x20000190

08009e70 <_sungetc_r>:
 8009e70:	b538      	push	{r3, r4, r5, lr}
 8009e72:	1c4b      	adds	r3, r1, #1
 8009e74:	4614      	mov	r4, r2
 8009e76:	d103      	bne.n	8009e80 <_sungetc_r+0x10>
 8009e78:	f04f 35ff 	mov.w	r5, #4294967295
 8009e7c:	4628      	mov	r0, r5
 8009e7e:	bd38      	pop	{r3, r4, r5, pc}
 8009e80:	8993      	ldrh	r3, [r2, #12]
 8009e82:	b2cd      	uxtb	r5, r1
 8009e84:	f023 0320 	bic.w	r3, r3, #32
 8009e88:	8193      	strh	r3, [r2, #12]
 8009e8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009e8c:	6852      	ldr	r2, [r2, #4]
 8009e8e:	b18b      	cbz	r3, 8009eb4 <_sungetc_r+0x44>
 8009e90:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009e92:	4293      	cmp	r3, r2
 8009e94:	dd08      	ble.n	8009ea8 <_sungetc_r+0x38>
 8009e96:	6823      	ldr	r3, [r4, #0]
 8009e98:	1e5a      	subs	r2, r3, #1
 8009e9a:	6022      	str	r2, [r4, #0]
 8009e9c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009ea0:	6863      	ldr	r3, [r4, #4]
 8009ea2:	3301      	adds	r3, #1
 8009ea4:	6063      	str	r3, [r4, #4]
 8009ea6:	e7e9      	b.n	8009e7c <_sungetc_r+0xc>
 8009ea8:	4621      	mov	r1, r4
 8009eaa:	f000 ff4f 	bl	800ad4c <__submore>
 8009eae:	2800      	cmp	r0, #0
 8009eb0:	d0f1      	beq.n	8009e96 <_sungetc_r+0x26>
 8009eb2:	e7e1      	b.n	8009e78 <_sungetc_r+0x8>
 8009eb4:	6921      	ldr	r1, [r4, #16]
 8009eb6:	6823      	ldr	r3, [r4, #0]
 8009eb8:	b151      	cbz	r1, 8009ed0 <_sungetc_r+0x60>
 8009eba:	4299      	cmp	r1, r3
 8009ebc:	d208      	bcs.n	8009ed0 <_sungetc_r+0x60>
 8009ebe:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8009ec2:	42a9      	cmp	r1, r5
 8009ec4:	d104      	bne.n	8009ed0 <_sungetc_r+0x60>
 8009ec6:	3b01      	subs	r3, #1
 8009ec8:	3201      	adds	r2, #1
 8009eca:	6023      	str	r3, [r4, #0]
 8009ecc:	6062      	str	r2, [r4, #4]
 8009ece:	e7d5      	b.n	8009e7c <_sungetc_r+0xc>
 8009ed0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8009ed4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ed8:	6363      	str	r3, [r4, #52]	; 0x34
 8009eda:	2303      	movs	r3, #3
 8009edc:	63a3      	str	r3, [r4, #56]	; 0x38
 8009ede:	4623      	mov	r3, r4
 8009ee0:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009ee4:	6023      	str	r3, [r4, #0]
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	e7dc      	b.n	8009ea4 <_sungetc_r+0x34>

08009eea <__ssrefill_r>:
 8009eea:	b510      	push	{r4, lr}
 8009eec:	460c      	mov	r4, r1
 8009eee:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009ef0:	b169      	cbz	r1, 8009f0e <__ssrefill_r+0x24>
 8009ef2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ef6:	4299      	cmp	r1, r3
 8009ef8:	d001      	beq.n	8009efe <__ssrefill_r+0x14>
 8009efa:	f7ff ff13 	bl	8009d24 <_free_r>
 8009efe:	2000      	movs	r0, #0
 8009f00:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009f02:	6360      	str	r0, [r4, #52]	; 0x34
 8009f04:	6063      	str	r3, [r4, #4]
 8009f06:	b113      	cbz	r3, 8009f0e <__ssrefill_r+0x24>
 8009f08:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009f0a:	6023      	str	r3, [r4, #0]
 8009f0c:	bd10      	pop	{r4, pc}
 8009f0e:	6923      	ldr	r3, [r4, #16]
 8009f10:	f04f 30ff 	mov.w	r0, #4294967295
 8009f14:	6023      	str	r3, [r4, #0]
 8009f16:	2300      	movs	r3, #0
 8009f18:	6063      	str	r3, [r4, #4]
 8009f1a:	89a3      	ldrh	r3, [r4, #12]
 8009f1c:	f043 0320 	orr.w	r3, r3, #32
 8009f20:	81a3      	strh	r3, [r4, #12]
 8009f22:	e7f3      	b.n	8009f0c <__ssrefill_r+0x22>

08009f24 <__ssvfiscanf_r>:
 8009f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f28:	460c      	mov	r4, r1
 8009f2a:	2100      	movs	r1, #0
 8009f2c:	4606      	mov	r6, r0
 8009f2e:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8009f32:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8009f36:	49b3      	ldr	r1, [pc, #716]	; (800a204 <__ssvfiscanf_r+0x2e0>)
 8009f38:	f10d 0804 	add.w	r8, sp, #4
 8009f3c:	91a0      	str	r1, [sp, #640]	; 0x280
 8009f3e:	49b2      	ldr	r1, [pc, #712]	; (800a208 <__ssvfiscanf_r+0x2e4>)
 8009f40:	4fb2      	ldr	r7, [pc, #712]	; (800a20c <__ssvfiscanf_r+0x2e8>)
 8009f42:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 800a210 <__ssvfiscanf_r+0x2ec>
 8009f46:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8009f4a:	91a1      	str	r1, [sp, #644]	; 0x284
 8009f4c:	9300      	str	r3, [sp, #0]
 8009f4e:	f892 a000 	ldrb.w	sl, [r2]
 8009f52:	f1ba 0f00 	cmp.w	sl, #0
 8009f56:	f000 8153 	beq.w	800a200 <__ssvfiscanf_r+0x2dc>
 8009f5a:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8009f5e:	1c55      	adds	r5, r2, #1
 8009f60:	f013 0308 	ands.w	r3, r3, #8
 8009f64:	d019      	beq.n	8009f9a <__ssvfiscanf_r+0x76>
 8009f66:	6863      	ldr	r3, [r4, #4]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	dd0f      	ble.n	8009f8c <__ssvfiscanf_r+0x68>
 8009f6c:	6823      	ldr	r3, [r4, #0]
 8009f6e:	781a      	ldrb	r2, [r3, #0]
 8009f70:	5cba      	ldrb	r2, [r7, r2]
 8009f72:	0712      	lsls	r2, r2, #28
 8009f74:	d401      	bmi.n	8009f7a <__ssvfiscanf_r+0x56>
 8009f76:	462a      	mov	r2, r5
 8009f78:	e7e9      	b.n	8009f4e <__ssvfiscanf_r+0x2a>
 8009f7a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009f7c:	3301      	adds	r3, #1
 8009f7e:	3201      	adds	r2, #1
 8009f80:	9245      	str	r2, [sp, #276]	; 0x114
 8009f82:	6862      	ldr	r2, [r4, #4]
 8009f84:	6023      	str	r3, [r4, #0]
 8009f86:	3a01      	subs	r2, #1
 8009f88:	6062      	str	r2, [r4, #4]
 8009f8a:	e7ec      	b.n	8009f66 <__ssvfiscanf_r+0x42>
 8009f8c:	4621      	mov	r1, r4
 8009f8e:	4630      	mov	r0, r6
 8009f90:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009f92:	4798      	blx	r3
 8009f94:	2800      	cmp	r0, #0
 8009f96:	d0e9      	beq.n	8009f6c <__ssvfiscanf_r+0x48>
 8009f98:	e7ed      	b.n	8009f76 <__ssvfiscanf_r+0x52>
 8009f9a:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8009f9e:	f040 8086 	bne.w	800a0ae <__ssvfiscanf_r+0x18a>
 8009fa2:	9341      	str	r3, [sp, #260]	; 0x104
 8009fa4:	9343      	str	r3, [sp, #268]	; 0x10c
 8009fa6:	7853      	ldrb	r3, [r2, #1]
 8009fa8:	2b2a      	cmp	r3, #42	; 0x2a
 8009faa:	bf04      	itt	eq
 8009fac:	2310      	moveq	r3, #16
 8009fae:	1c95      	addeq	r5, r2, #2
 8009fb0:	f04f 020a 	mov.w	r2, #10
 8009fb4:	bf08      	it	eq
 8009fb6:	9341      	streq	r3, [sp, #260]	; 0x104
 8009fb8:	46ab      	mov	fp, r5
 8009fba:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8009fbe:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8009fc2:	2b09      	cmp	r3, #9
 8009fc4:	d91d      	bls.n	800a002 <__ssvfiscanf_r+0xde>
 8009fc6:	2203      	movs	r2, #3
 8009fc8:	4891      	ldr	r0, [pc, #580]	; (800a210 <__ssvfiscanf_r+0x2ec>)
 8009fca:	f000 ff19 	bl	800ae00 <memchr>
 8009fce:	b140      	cbz	r0, 8009fe2 <__ssvfiscanf_r+0xbe>
 8009fd0:	2301      	movs	r3, #1
 8009fd2:	465d      	mov	r5, fp
 8009fd4:	eba0 0009 	sub.w	r0, r0, r9
 8009fd8:	fa03 f000 	lsl.w	r0, r3, r0
 8009fdc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009fde:	4318      	orrs	r0, r3
 8009fe0:	9041      	str	r0, [sp, #260]	; 0x104
 8009fe2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009fe6:	2b78      	cmp	r3, #120	; 0x78
 8009fe8:	d806      	bhi.n	8009ff8 <__ssvfiscanf_r+0xd4>
 8009fea:	2b57      	cmp	r3, #87	; 0x57
 8009fec:	d810      	bhi.n	800a010 <__ssvfiscanf_r+0xec>
 8009fee:	2b25      	cmp	r3, #37	; 0x25
 8009ff0:	d05d      	beq.n	800a0ae <__ssvfiscanf_r+0x18a>
 8009ff2:	d857      	bhi.n	800a0a4 <__ssvfiscanf_r+0x180>
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d075      	beq.n	800a0e4 <__ssvfiscanf_r+0x1c0>
 8009ff8:	2303      	movs	r3, #3
 8009ffa:	9347      	str	r3, [sp, #284]	; 0x11c
 8009ffc:	230a      	movs	r3, #10
 8009ffe:	9342      	str	r3, [sp, #264]	; 0x108
 800a000:	e082      	b.n	800a108 <__ssvfiscanf_r+0x1e4>
 800a002:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800a004:	465d      	mov	r5, fp
 800a006:	fb02 1303 	mla	r3, r2, r3, r1
 800a00a:	3b30      	subs	r3, #48	; 0x30
 800a00c:	9343      	str	r3, [sp, #268]	; 0x10c
 800a00e:	e7d3      	b.n	8009fb8 <__ssvfiscanf_r+0x94>
 800a010:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800a014:	2a20      	cmp	r2, #32
 800a016:	d8ef      	bhi.n	8009ff8 <__ssvfiscanf_r+0xd4>
 800a018:	a101      	add	r1, pc, #4	; (adr r1, 800a020 <__ssvfiscanf_r+0xfc>)
 800a01a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a01e:	bf00      	nop
 800a020:	0800a0f3 	.word	0x0800a0f3
 800a024:	08009ff9 	.word	0x08009ff9
 800a028:	08009ff9 	.word	0x08009ff9
 800a02c:	0800a151 	.word	0x0800a151
 800a030:	08009ff9 	.word	0x08009ff9
 800a034:	08009ff9 	.word	0x08009ff9
 800a038:	08009ff9 	.word	0x08009ff9
 800a03c:	08009ff9 	.word	0x08009ff9
 800a040:	08009ff9 	.word	0x08009ff9
 800a044:	08009ff9 	.word	0x08009ff9
 800a048:	08009ff9 	.word	0x08009ff9
 800a04c:	0800a167 	.word	0x0800a167
 800a050:	0800a13d 	.word	0x0800a13d
 800a054:	0800a0ab 	.word	0x0800a0ab
 800a058:	0800a0ab 	.word	0x0800a0ab
 800a05c:	0800a0ab 	.word	0x0800a0ab
 800a060:	08009ff9 	.word	0x08009ff9
 800a064:	0800a141 	.word	0x0800a141
 800a068:	08009ff9 	.word	0x08009ff9
 800a06c:	08009ff9 	.word	0x08009ff9
 800a070:	08009ff9 	.word	0x08009ff9
 800a074:	08009ff9 	.word	0x08009ff9
 800a078:	0800a177 	.word	0x0800a177
 800a07c:	0800a149 	.word	0x0800a149
 800a080:	0800a0eb 	.word	0x0800a0eb
 800a084:	08009ff9 	.word	0x08009ff9
 800a088:	08009ff9 	.word	0x08009ff9
 800a08c:	0800a173 	.word	0x0800a173
 800a090:	08009ff9 	.word	0x08009ff9
 800a094:	0800a13d 	.word	0x0800a13d
 800a098:	08009ff9 	.word	0x08009ff9
 800a09c:	08009ff9 	.word	0x08009ff9
 800a0a0:	0800a0f3 	.word	0x0800a0f3
 800a0a4:	3b45      	subs	r3, #69	; 0x45
 800a0a6:	2b02      	cmp	r3, #2
 800a0a8:	d8a6      	bhi.n	8009ff8 <__ssvfiscanf_r+0xd4>
 800a0aa:	2305      	movs	r3, #5
 800a0ac:	e02b      	b.n	800a106 <__ssvfiscanf_r+0x1e2>
 800a0ae:	6863      	ldr	r3, [r4, #4]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	dd0d      	ble.n	800a0d0 <__ssvfiscanf_r+0x1ac>
 800a0b4:	6823      	ldr	r3, [r4, #0]
 800a0b6:	781a      	ldrb	r2, [r3, #0]
 800a0b8:	4552      	cmp	r2, sl
 800a0ba:	f040 80a1 	bne.w	800a200 <__ssvfiscanf_r+0x2dc>
 800a0be:	3301      	adds	r3, #1
 800a0c0:	6862      	ldr	r2, [r4, #4]
 800a0c2:	6023      	str	r3, [r4, #0]
 800a0c4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800a0c6:	3a01      	subs	r2, #1
 800a0c8:	3301      	adds	r3, #1
 800a0ca:	6062      	str	r2, [r4, #4]
 800a0cc:	9345      	str	r3, [sp, #276]	; 0x114
 800a0ce:	e752      	b.n	8009f76 <__ssvfiscanf_r+0x52>
 800a0d0:	4621      	mov	r1, r4
 800a0d2:	4630      	mov	r0, r6
 800a0d4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a0d6:	4798      	blx	r3
 800a0d8:	2800      	cmp	r0, #0
 800a0da:	d0eb      	beq.n	800a0b4 <__ssvfiscanf_r+0x190>
 800a0dc:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a0de:	2800      	cmp	r0, #0
 800a0e0:	f040 8084 	bne.w	800a1ec <__ssvfiscanf_r+0x2c8>
 800a0e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a0e8:	e086      	b.n	800a1f8 <__ssvfiscanf_r+0x2d4>
 800a0ea:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a0ec:	f042 0220 	orr.w	r2, r2, #32
 800a0f0:	9241      	str	r2, [sp, #260]	; 0x104
 800a0f2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a0f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a0f8:	9241      	str	r2, [sp, #260]	; 0x104
 800a0fa:	2210      	movs	r2, #16
 800a0fc:	2b6f      	cmp	r3, #111	; 0x6f
 800a0fe:	bf34      	ite	cc
 800a100:	2303      	movcc	r3, #3
 800a102:	2304      	movcs	r3, #4
 800a104:	9242      	str	r2, [sp, #264]	; 0x108
 800a106:	9347      	str	r3, [sp, #284]	; 0x11c
 800a108:	6863      	ldr	r3, [r4, #4]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	dd41      	ble.n	800a192 <__ssvfiscanf_r+0x26e>
 800a10e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a110:	0659      	lsls	r1, r3, #25
 800a112:	d404      	bmi.n	800a11e <__ssvfiscanf_r+0x1fa>
 800a114:	6823      	ldr	r3, [r4, #0]
 800a116:	781a      	ldrb	r2, [r3, #0]
 800a118:	5cba      	ldrb	r2, [r7, r2]
 800a11a:	0712      	lsls	r2, r2, #28
 800a11c:	d440      	bmi.n	800a1a0 <__ssvfiscanf_r+0x27c>
 800a11e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800a120:	2b02      	cmp	r3, #2
 800a122:	dc4f      	bgt.n	800a1c4 <__ssvfiscanf_r+0x2a0>
 800a124:	466b      	mov	r3, sp
 800a126:	4622      	mov	r2, r4
 800a128:	4630      	mov	r0, r6
 800a12a:	a941      	add	r1, sp, #260	; 0x104
 800a12c:	f000 fb62 	bl	800a7f4 <_scanf_chars>
 800a130:	2801      	cmp	r0, #1
 800a132:	d065      	beq.n	800a200 <__ssvfiscanf_r+0x2dc>
 800a134:	2802      	cmp	r0, #2
 800a136:	f47f af1e 	bne.w	8009f76 <__ssvfiscanf_r+0x52>
 800a13a:	e7cf      	b.n	800a0dc <__ssvfiscanf_r+0x1b8>
 800a13c:	220a      	movs	r2, #10
 800a13e:	e7dd      	b.n	800a0fc <__ssvfiscanf_r+0x1d8>
 800a140:	2300      	movs	r3, #0
 800a142:	9342      	str	r3, [sp, #264]	; 0x108
 800a144:	2303      	movs	r3, #3
 800a146:	e7de      	b.n	800a106 <__ssvfiscanf_r+0x1e2>
 800a148:	2308      	movs	r3, #8
 800a14a:	9342      	str	r3, [sp, #264]	; 0x108
 800a14c:	2304      	movs	r3, #4
 800a14e:	e7da      	b.n	800a106 <__ssvfiscanf_r+0x1e2>
 800a150:	4629      	mov	r1, r5
 800a152:	4640      	mov	r0, r8
 800a154:	f000 fcba 	bl	800aacc <__sccl>
 800a158:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a15a:	4605      	mov	r5, r0
 800a15c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a160:	9341      	str	r3, [sp, #260]	; 0x104
 800a162:	2301      	movs	r3, #1
 800a164:	e7cf      	b.n	800a106 <__ssvfiscanf_r+0x1e2>
 800a166:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a168:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a16c:	9341      	str	r3, [sp, #260]	; 0x104
 800a16e:	2300      	movs	r3, #0
 800a170:	e7c9      	b.n	800a106 <__ssvfiscanf_r+0x1e2>
 800a172:	2302      	movs	r3, #2
 800a174:	e7c7      	b.n	800a106 <__ssvfiscanf_r+0x1e2>
 800a176:	9841      	ldr	r0, [sp, #260]	; 0x104
 800a178:	06c3      	lsls	r3, r0, #27
 800a17a:	f53f aefc 	bmi.w	8009f76 <__ssvfiscanf_r+0x52>
 800a17e:	9b00      	ldr	r3, [sp, #0]
 800a180:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a182:	1d19      	adds	r1, r3, #4
 800a184:	9100      	str	r1, [sp, #0]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	07c0      	lsls	r0, r0, #31
 800a18a:	bf4c      	ite	mi
 800a18c:	801a      	strhmi	r2, [r3, #0]
 800a18e:	601a      	strpl	r2, [r3, #0]
 800a190:	e6f1      	b.n	8009f76 <__ssvfiscanf_r+0x52>
 800a192:	4621      	mov	r1, r4
 800a194:	4630      	mov	r0, r6
 800a196:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a198:	4798      	blx	r3
 800a19a:	2800      	cmp	r0, #0
 800a19c:	d0b7      	beq.n	800a10e <__ssvfiscanf_r+0x1ea>
 800a19e:	e79d      	b.n	800a0dc <__ssvfiscanf_r+0x1b8>
 800a1a0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a1a2:	3201      	adds	r2, #1
 800a1a4:	9245      	str	r2, [sp, #276]	; 0x114
 800a1a6:	6862      	ldr	r2, [r4, #4]
 800a1a8:	3a01      	subs	r2, #1
 800a1aa:	2a00      	cmp	r2, #0
 800a1ac:	6062      	str	r2, [r4, #4]
 800a1ae:	dd02      	ble.n	800a1b6 <__ssvfiscanf_r+0x292>
 800a1b0:	3301      	adds	r3, #1
 800a1b2:	6023      	str	r3, [r4, #0]
 800a1b4:	e7ae      	b.n	800a114 <__ssvfiscanf_r+0x1f0>
 800a1b6:	4621      	mov	r1, r4
 800a1b8:	4630      	mov	r0, r6
 800a1ba:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a1bc:	4798      	blx	r3
 800a1be:	2800      	cmp	r0, #0
 800a1c0:	d0a8      	beq.n	800a114 <__ssvfiscanf_r+0x1f0>
 800a1c2:	e78b      	b.n	800a0dc <__ssvfiscanf_r+0x1b8>
 800a1c4:	2b04      	cmp	r3, #4
 800a1c6:	dc06      	bgt.n	800a1d6 <__ssvfiscanf_r+0x2b2>
 800a1c8:	466b      	mov	r3, sp
 800a1ca:	4622      	mov	r2, r4
 800a1cc:	4630      	mov	r0, r6
 800a1ce:	a941      	add	r1, sp, #260	; 0x104
 800a1d0:	f000 fb68 	bl	800a8a4 <_scanf_i>
 800a1d4:	e7ac      	b.n	800a130 <__ssvfiscanf_r+0x20c>
 800a1d6:	4b0f      	ldr	r3, [pc, #60]	; (800a214 <__ssvfiscanf_r+0x2f0>)
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	f43f aecc 	beq.w	8009f76 <__ssvfiscanf_r+0x52>
 800a1de:	466b      	mov	r3, sp
 800a1e0:	4622      	mov	r2, r4
 800a1e2:	4630      	mov	r0, r6
 800a1e4:	a941      	add	r1, sp, #260	; 0x104
 800a1e6:	f3af 8000 	nop.w
 800a1ea:	e7a1      	b.n	800a130 <__ssvfiscanf_r+0x20c>
 800a1ec:	89a3      	ldrh	r3, [r4, #12]
 800a1ee:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a1f2:	bf18      	it	ne
 800a1f4:	f04f 30ff 	movne.w	r0, #4294967295
 800a1f8:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800a1fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a200:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a202:	e7f9      	b.n	800a1f8 <__ssvfiscanf_r+0x2d4>
 800a204:	08009e71 	.word	0x08009e71
 800a208:	08009eeb 	.word	0x08009eeb
 800a20c:	0800c2b7 	.word	0x0800c2b7
 800a210:	0800c268 	.word	0x0800c268
 800a214:	00000000 	.word	0x00000000

0800a218 <__sfputc_r>:
 800a218:	6893      	ldr	r3, [r2, #8]
 800a21a:	b410      	push	{r4}
 800a21c:	3b01      	subs	r3, #1
 800a21e:	2b00      	cmp	r3, #0
 800a220:	6093      	str	r3, [r2, #8]
 800a222:	da07      	bge.n	800a234 <__sfputc_r+0x1c>
 800a224:	6994      	ldr	r4, [r2, #24]
 800a226:	42a3      	cmp	r3, r4
 800a228:	db01      	blt.n	800a22e <__sfputc_r+0x16>
 800a22a:	290a      	cmp	r1, #10
 800a22c:	d102      	bne.n	800a234 <__sfputc_r+0x1c>
 800a22e:	bc10      	pop	{r4}
 800a230:	f7ff ba66 	b.w	8009700 <__swbuf_r>
 800a234:	6813      	ldr	r3, [r2, #0]
 800a236:	1c58      	adds	r0, r3, #1
 800a238:	6010      	str	r0, [r2, #0]
 800a23a:	7019      	strb	r1, [r3, #0]
 800a23c:	4608      	mov	r0, r1
 800a23e:	bc10      	pop	{r4}
 800a240:	4770      	bx	lr

0800a242 <__sfputs_r>:
 800a242:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a244:	4606      	mov	r6, r0
 800a246:	460f      	mov	r7, r1
 800a248:	4614      	mov	r4, r2
 800a24a:	18d5      	adds	r5, r2, r3
 800a24c:	42ac      	cmp	r4, r5
 800a24e:	d101      	bne.n	800a254 <__sfputs_r+0x12>
 800a250:	2000      	movs	r0, #0
 800a252:	e007      	b.n	800a264 <__sfputs_r+0x22>
 800a254:	463a      	mov	r2, r7
 800a256:	4630      	mov	r0, r6
 800a258:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a25c:	f7ff ffdc 	bl	800a218 <__sfputc_r>
 800a260:	1c43      	adds	r3, r0, #1
 800a262:	d1f3      	bne.n	800a24c <__sfputs_r+0xa>
 800a264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a268 <_vfiprintf_r>:
 800a268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a26c:	460d      	mov	r5, r1
 800a26e:	4614      	mov	r4, r2
 800a270:	4698      	mov	r8, r3
 800a272:	4606      	mov	r6, r0
 800a274:	b09d      	sub	sp, #116	; 0x74
 800a276:	b118      	cbz	r0, 800a280 <_vfiprintf_r+0x18>
 800a278:	6983      	ldr	r3, [r0, #24]
 800a27a:	b90b      	cbnz	r3, 800a280 <_vfiprintf_r+0x18>
 800a27c:	f7ff fc3c 	bl	8009af8 <__sinit>
 800a280:	4b89      	ldr	r3, [pc, #548]	; (800a4a8 <_vfiprintf_r+0x240>)
 800a282:	429d      	cmp	r5, r3
 800a284:	d11b      	bne.n	800a2be <_vfiprintf_r+0x56>
 800a286:	6875      	ldr	r5, [r6, #4]
 800a288:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a28a:	07d9      	lsls	r1, r3, #31
 800a28c:	d405      	bmi.n	800a29a <_vfiprintf_r+0x32>
 800a28e:	89ab      	ldrh	r3, [r5, #12]
 800a290:	059a      	lsls	r2, r3, #22
 800a292:	d402      	bmi.n	800a29a <_vfiprintf_r+0x32>
 800a294:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a296:	f7ff fccd 	bl	8009c34 <__retarget_lock_acquire_recursive>
 800a29a:	89ab      	ldrh	r3, [r5, #12]
 800a29c:	071b      	lsls	r3, r3, #28
 800a29e:	d501      	bpl.n	800a2a4 <_vfiprintf_r+0x3c>
 800a2a0:	692b      	ldr	r3, [r5, #16]
 800a2a2:	b9eb      	cbnz	r3, 800a2e0 <_vfiprintf_r+0x78>
 800a2a4:	4629      	mov	r1, r5
 800a2a6:	4630      	mov	r0, r6
 800a2a8:	f7ff fa8e 	bl	80097c8 <__swsetup_r>
 800a2ac:	b1c0      	cbz	r0, 800a2e0 <_vfiprintf_r+0x78>
 800a2ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2b0:	07dc      	lsls	r4, r3, #31
 800a2b2:	d50e      	bpl.n	800a2d2 <_vfiprintf_r+0x6a>
 800a2b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a2b8:	b01d      	add	sp, #116	; 0x74
 800a2ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2be:	4b7b      	ldr	r3, [pc, #492]	; (800a4ac <_vfiprintf_r+0x244>)
 800a2c0:	429d      	cmp	r5, r3
 800a2c2:	d101      	bne.n	800a2c8 <_vfiprintf_r+0x60>
 800a2c4:	68b5      	ldr	r5, [r6, #8]
 800a2c6:	e7df      	b.n	800a288 <_vfiprintf_r+0x20>
 800a2c8:	4b79      	ldr	r3, [pc, #484]	; (800a4b0 <_vfiprintf_r+0x248>)
 800a2ca:	429d      	cmp	r5, r3
 800a2cc:	bf08      	it	eq
 800a2ce:	68f5      	ldreq	r5, [r6, #12]
 800a2d0:	e7da      	b.n	800a288 <_vfiprintf_r+0x20>
 800a2d2:	89ab      	ldrh	r3, [r5, #12]
 800a2d4:	0598      	lsls	r0, r3, #22
 800a2d6:	d4ed      	bmi.n	800a2b4 <_vfiprintf_r+0x4c>
 800a2d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a2da:	f7ff fcac 	bl	8009c36 <__retarget_lock_release_recursive>
 800a2de:	e7e9      	b.n	800a2b4 <_vfiprintf_r+0x4c>
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	9309      	str	r3, [sp, #36]	; 0x24
 800a2e4:	2320      	movs	r3, #32
 800a2e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a2ea:	2330      	movs	r3, #48	; 0x30
 800a2ec:	f04f 0901 	mov.w	r9, #1
 800a2f0:	f8cd 800c 	str.w	r8, [sp, #12]
 800a2f4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a4b4 <_vfiprintf_r+0x24c>
 800a2f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a2fc:	4623      	mov	r3, r4
 800a2fe:	469a      	mov	sl, r3
 800a300:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a304:	b10a      	cbz	r2, 800a30a <_vfiprintf_r+0xa2>
 800a306:	2a25      	cmp	r2, #37	; 0x25
 800a308:	d1f9      	bne.n	800a2fe <_vfiprintf_r+0x96>
 800a30a:	ebba 0b04 	subs.w	fp, sl, r4
 800a30e:	d00b      	beq.n	800a328 <_vfiprintf_r+0xc0>
 800a310:	465b      	mov	r3, fp
 800a312:	4622      	mov	r2, r4
 800a314:	4629      	mov	r1, r5
 800a316:	4630      	mov	r0, r6
 800a318:	f7ff ff93 	bl	800a242 <__sfputs_r>
 800a31c:	3001      	adds	r0, #1
 800a31e:	f000 80aa 	beq.w	800a476 <_vfiprintf_r+0x20e>
 800a322:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a324:	445a      	add	r2, fp
 800a326:	9209      	str	r2, [sp, #36]	; 0x24
 800a328:	f89a 3000 	ldrb.w	r3, [sl]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	f000 80a2 	beq.w	800a476 <_vfiprintf_r+0x20e>
 800a332:	2300      	movs	r3, #0
 800a334:	f04f 32ff 	mov.w	r2, #4294967295
 800a338:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a33c:	f10a 0a01 	add.w	sl, sl, #1
 800a340:	9304      	str	r3, [sp, #16]
 800a342:	9307      	str	r3, [sp, #28]
 800a344:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a348:	931a      	str	r3, [sp, #104]	; 0x68
 800a34a:	4654      	mov	r4, sl
 800a34c:	2205      	movs	r2, #5
 800a34e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a352:	4858      	ldr	r0, [pc, #352]	; (800a4b4 <_vfiprintf_r+0x24c>)
 800a354:	f000 fd54 	bl	800ae00 <memchr>
 800a358:	9a04      	ldr	r2, [sp, #16]
 800a35a:	b9d8      	cbnz	r0, 800a394 <_vfiprintf_r+0x12c>
 800a35c:	06d1      	lsls	r1, r2, #27
 800a35e:	bf44      	itt	mi
 800a360:	2320      	movmi	r3, #32
 800a362:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a366:	0713      	lsls	r3, r2, #28
 800a368:	bf44      	itt	mi
 800a36a:	232b      	movmi	r3, #43	; 0x2b
 800a36c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a370:	f89a 3000 	ldrb.w	r3, [sl]
 800a374:	2b2a      	cmp	r3, #42	; 0x2a
 800a376:	d015      	beq.n	800a3a4 <_vfiprintf_r+0x13c>
 800a378:	4654      	mov	r4, sl
 800a37a:	2000      	movs	r0, #0
 800a37c:	f04f 0c0a 	mov.w	ip, #10
 800a380:	9a07      	ldr	r2, [sp, #28]
 800a382:	4621      	mov	r1, r4
 800a384:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a388:	3b30      	subs	r3, #48	; 0x30
 800a38a:	2b09      	cmp	r3, #9
 800a38c:	d94e      	bls.n	800a42c <_vfiprintf_r+0x1c4>
 800a38e:	b1b0      	cbz	r0, 800a3be <_vfiprintf_r+0x156>
 800a390:	9207      	str	r2, [sp, #28]
 800a392:	e014      	b.n	800a3be <_vfiprintf_r+0x156>
 800a394:	eba0 0308 	sub.w	r3, r0, r8
 800a398:	fa09 f303 	lsl.w	r3, r9, r3
 800a39c:	4313      	orrs	r3, r2
 800a39e:	46a2      	mov	sl, r4
 800a3a0:	9304      	str	r3, [sp, #16]
 800a3a2:	e7d2      	b.n	800a34a <_vfiprintf_r+0xe2>
 800a3a4:	9b03      	ldr	r3, [sp, #12]
 800a3a6:	1d19      	adds	r1, r3, #4
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	9103      	str	r1, [sp, #12]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	bfbb      	ittet	lt
 800a3b0:	425b      	neglt	r3, r3
 800a3b2:	f042 0202 	orrlt.w	r2, r2, #2
 800a3b6:	9307      	strge	r3, [sp, #28]
 800a3b8:	9307      	strlt	r3, [sp, #28]
 800a3ba:	bfb8      	it	lt
 800a3bc:	9204      	strlt	r2, [sp, #16]
 800a3be:	7823      	ldrb	r3, [r4, #0]
 800a3c0:	2b2e      	cmp	r3, #46	; 0x2e
 800a3c2:	d10c      	bne.n	800a3de <_vfiprintf_r+0x176>
 800a3c4:	7863      	ldrb	r3, [r4, #1]
 800a3c6:	2b2a      	cmp	r3, #42	; 0x2a
 800a3c8:	d135      	bne.n	800a436 <_vfiprintf_r+0x1ce>
 800a3ca:	9b03      	ldr	r3, [sp, #12]
 800a3cc:	3402      	adds	r4, #2
 800a3ce:	1d1a      	adds	r2, r3, #4
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	9203      	str	r2, [sp, #12]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	bfb8      	it	lt
 800a3d8:	f04f 33ff 	movlt.w	r3, #4294967295
 800a3dc:	9305      	str	r3, [sp, #20]
 800a3de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a4c4 <_vfiprintf_r+0x25c>
 800a3e2:	2203      	movs	r2, #3
 800a3e4:	4650      	mov	r0, sl
 800a3e6:	7821      	ldrb	r1, [r4, #0]
 800a3e8:	f000 fd0a 	bl	800ae00 <memchr>
 800a3ec:	b140      	cbz	r0, 800a400 <_vfiprintf_r+0x198>
 800a3ee:	2340      	movs	r3, #64	; 0x40
 800a3f0:	eba0 000a 	sub.w	r0, r0, sl
 800a3f4:	fa03 f000 	lsl.w	r0, r3, r0
 800a3f8:	9b04      	ldr	r3, [sp, #16]
 800a3fa:	3401      	adds	r4, #1
 800a3fc:	4303      	orrs	r3, r0
 800a3fe:	9304      	str	r3, [sp, #16]
 800a400:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a404:	2206      	movs	r2, #6
 800a406:	482c      	ldr	r0, [pc, #176]	; (800a4b8 <_vfiprintf_r+0x250>)
 800a408:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a40c:	f000 fcf8 	bl	800ae00 <memchr>
 800a410:	2800      	cmp	r0, #0
 800a412:	d03f      	beq.n	800a494 <_vfiprintf_r+0x22c>
 800a414:	4b29      	ldr	r3, [pc, #164]	; (800a4bc <_vfiprintf_r+0x254>)
 800a416:	bb1b      	cbnz	r3, 800a460 <_vfiprintf_r+0x1f8>
 800a418:	9b03      	ldr	r3, [sp, #12]
 800a41a:	3307      	adds	r3, #7
 800a41c:	f023 0307 	bic.w	r3, r3, #7
 800a420:	3308      	adds	r3, #8
 800a422:	9303      	str	r3, [sp, #12]
 800a424:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a426:	443b      	add	r3, r7
 800a428:	9309      	str	r3, [sp, #36]	; 0x24
 800a42a:	e767      	b.n	800a2fc <_vfiprintf_r+0x94>
 800a42c:	460c      	mov	r4, r1
 800a42e:	2001      	movs	r0, #1
 800a430:	fb0c 3202 	mla	r2, ip, r2, r3
 800a434:	e7a5      	b.n	800a382 <_vfiprintf_r+0x11a>
 800a436:	2300      	movs	r3, #0
 800a438:	f04f 0c0a 	mov.w	ip, #10
 800a43c:	4619      	mov	r1, r3
 800a43e:	3401      	adds	r4, #1
 800a440:	9305      	str	r3, [sp, #20]
 800a442:	4620      	mov	r0, r4
 800a444:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a448:	3a30      	subs	r2, #48	; 0x30
 800a44a:	2a09      	cmp	r2, #9
 800a44c:	d903      	bls.n	800a456 <_vfiprintf_r+0x1ee>
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d0c5      	beq.n	800a3de <_vfiprintf_r+0x176>
 800a452:	9105      	str	r1, [sp, #20]
 800a454:	e7c3      	b.n	800a3de <_vfiprintf_r+0x176>
 800a456:	4604      	mov	r4, r0
 800a458:	2301      	movs	r3, #1
 800a45a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a45e:	e7f0      	b.n	800a442 <_vfiprintf_r+0x1da>
 800a460:	ab03      	add	r3, sp, #12
 800a462:	9300      	str	r3, [sp, #0]
 800a464:	462a      	mov	r2, r5
 800a466:	4630      	mov	r0, r6
 800a468:	4b15      	ldr	r3, [pc, #84]	; (800a4c0 <_vfiprintf_r+0x258>)
 800a46a:	a904      	add	r1, sp, #16
 800a46c:	f3af 8000 	nop.w
 800a470:	4607      	mov	r7, r0
 800a472:	1c78      	adds	r0, r7, #1
 800a474:	d1d6      	bne.n	800a424 <_vfiprintf_r+0x1bc>
 800a476:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a478:	07d9      	lsls	r1, r3, #31
 800a47a:	d405      	bmi.n	800a488 <_vfiprintf_r+0x220>
 800a47c:	89ab      	ldrh	r3, [r5, #12]
 800a47e:	059a      	lsls	r2, r3, #22
 800a480:	d402      	bmi.n	800a488 <_vfiprintf_r+0x220>
 800a482:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a484:	f7ff fbd7 	bl	8009c36 <__retarget_lock_release_recursive>
 800a488:	89ab      	ldrh	r3, [r5, #12]
 800a48a:	065b      	lsls	r3, r3, #25
 800a48c:	f53f af12 	bmi.w	800a2b4 <_vfiprintf_r+0x4c>
 800a490:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a492:	e711      	b.n	800a2b8 <_vfiprintf_r+0x50>
 800a494:	ab03      	add	r3, sp, #12
 800a496:	9300      	str	r3, [sp, #0]
 800a498:	462a      	mov	r2, r5
 800a49a:	4630      	mov	r0, r6
 800a49c:	4b08      	ldr	r3, [pc, #32]	; (800a4c0 <_vfiprintf_r+0x258>)
 800a49e:	a904      	add	r1, sp, #16
 800a4a0:	f000 f882 	bl	800a5a8 <_printf_i>
 800a4a4:	e7e4      	b.n	800a470 <_vfiprintf_r+0x208>
 800a4a6:	bf00      	nop
 800a4a8:	0800c228 	.word	0x0800c228
 800a4ac:	0800c248 	.word	0x0800c248
 800a4b0:	0800c208 	.word	0x0800c208
 800a4b4:	0800c26c 	.word	0x0800c26c
 800a4b8:	0800c272 	.word	0x0800c272
 800a4bc:	00000000 	.word	0x00000000
 800a4c0:	0800a243 	.word	0x0800a243
 800a4c4:	0800c268 	.word	0x0800c268

0800a4c8 <_printf_common>:
 800a4c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4cc:	4616      	mov	r6, r2
 800a4ce:	4699      	mov	r9, r3
 800a4d0:	688a      	ldr	r2, [r1, #8]
 800a4d2:	690b      	ldr	r3, [r1, #16]
 800a4d4:	4607      	mov	r7, r0
 800a4d6:	4293      	cmp	r3, r2
 800a4d8:	bfb8      	it	lt
 800a4da:	4613      	movlt	r3, r2
 800a4dc:	6033      	str	r3, [r6, #0]
 800a4de:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a4e2:	460c      	mov	r4, r1
 800a4e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a4e8:	b10a      	cbz	r2, 800a4ee <_printf_common+0x26>
 800a4ea:	3301      	adds	r3, #1
 800a4ec:	6033      	str	r3, [r6, #0]
 800a4ee:	6823      	ldr	r3, [r4, #0]
 800a4f0:	0699      	lsls	r1, r3, #26
 800a4f2:	bf42      	ittt	mi
 800a4f4:	6833      	ldrmi	r3, [r6, #0]
 800a4f6:	3302      	addmi	r3, #2
 800a4f8:	6033      	strmi	r3, [r6, #0]
 800a4fa:	6825      	ldr	r5, [r4, #0]
 800a4fc:	f015 0506 	ands.w	r5, r5, #6
 800a500:	d106      	bne.n	800a510 <_printf_common+0x48>
 800a502:	f104 0a19 	add.w	sl, r4, #25
 800a506:	68e3      	ldr	r3, [r4, #12]
 800a508:	6832      	ldr	r2, [r6, #0]
 800a50a:	1a9b      	subs	r3, r3, r2
 800a50c:	42ab      	cmp	r3, r5
 800a50e:	dc28      	bgt.n	800a562 <_printf_common+0x9a>
 800a510:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a514:	1e13      	subs	r3, r2, #0
 800a516:	6822      	ldr	r2, [r4, #0]
 800a518:	bf18      	it	ne
 800a51a:	2301      	movne	r3, #1
 800a51c:	0692      	lsls	r2, r2, #26
 800a51e:	d42d      	bmi.n	800a57c <_printf_common+0xb4>
 800a520:	4649      	mov	r1, r9
 800a522:	4638      	mov	r0, r7
 800a524:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a528:	47c0      	blx	r8
 800a52a:	3001      	adds	r0, #1
 800a52c:	d020      	beq.n	800a570 <_printf_common+0xa8>
 800a52e:	6823      	ldr	r3, [r4, #0]
 800a530:	68e5      	ldr	r5, [r4, #12]
 800a532:	f003 0306 	and.w	r3, r3, #6
 800a536:	2b04      	cmp	r3, #4
 800a538:	bf18      	it	ne
 800a53a:	2500      	movne	r5, #0
 800a53c:	6832      	ldr	r2, [r6, #0]
 800a53e:	f04f 0600 	mov.w	r6, #0
 800a542:	68a3      	ldr	r3, [r4, #8]
 800a544:	bf08      	it	eq
 800a546:	1aad      	subeq	r5, r5, r2
 800a548:	6922      	ldr	r2, [r4, #16]
 800a54a:	bf08      	it	eq
 800a54c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a550:	4293      	cmp	r3, r2
 800a552:	bfc4      	itt	gt
 800a554:	1a9b      	subgt	r3, r3, r2
 800a556:	18ed      	addgt	r5, r5, r3
 800a558:	341a      	adds	r4, #26
 800a55a:	42b5      	cmp	r5, r6
 800a55c:	d11a      	bne.n	800a594 <_printf_common+0xcc>
 800a55e:	2000      	movs	r0, #0
 800a560:	e008      	b.n	800a574 <_printf_common+0xac>
 800a562:	2301      	movs	r3, #1
 800a564:	4652      	mov	r2, sl
 800a566:	4649      	mov	r1, r9
 800a568:	4638      	mov	r0, r7
 800a56a:	47c0      	blx	r8
 800a56c:	3001      	adds	r0, #1
 800a56e:	d103      	bne.n	800a578 <_printf_common+0xb0>
 800a570:	f04f 30ff 	mov.w	r0, #4294967295
 800a574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a578:	3501      	adds	r5, #1
 800a57a:	e7c4      	b.n	800a506 <_printf_common+0x3e>
 800a57c:	2030      	movs	r0, #48	; 0x30
 800a57e:	18e1      	adds	r1, r4, r3
 800a580:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a584:	1c5a      	adds	r2, r3, #1
 800a586:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a58a:	4422      	add	r2, r4
 800a58c:	3302      	adds	r3, #2
 800a58e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a592:	e7c5      	b.n	800a520 <_printf_common+0x58>
 800a594:	2301      	movs	r3, #1
 800a596:	4622      	mov	r2, r4
 800a598:	4649      	mov	r1, r9
 800a59a:	4638      	mov	r0, r7
 800a59c:	47c0      	blx	r8
 800a59e:	3001      	adds	r0, #1
 800a5a0:	d0e6      	beq.n	800a570 <_printf_common+0xa8>
 800a5a2:	3601      	adds	r6, #1
 800a5a4:	e7d9      	b.n	800a55a <_printf_common+0x92>
	...

0800a5a8 <_printf_i>:
 800a5a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a5ac:	460c      	mov	r4, r1
 800a5ae:	7e27      	ldrb	r7, [r4, #24]
 800a5b0:	4691      	mov	r9, r2
 800a5b2:	2f78      	cmp	r7, #120	; 0x78
 800a5b4:	4680      	mov	r8, r0
 800a5b6:	469a      	mov	sl, r3
 800a5b8:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a5ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a5be:	d807      	bhi.n	800a5d0 <_printf_i+0x28>
 800a5c0:	2f62      	cmp	r7, #98	; 0x62
 800a5c2:	d80a      	bhi.n	800a5da <_printf_i+0x32>
 800a5c4:	2f00      	cmp	r7, #0
 800a5c6:	f000 80d9 	beq.w	800a77c <_printf_i+0x1d4>
 800a5ca:	2f58      	cmp	r7, #88	; 0x58
 800a5cc:	f000 80a4 	beq.w	800a718 <_printf_i+0x170>
 800a5d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a5d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a5d8:	e03a      	b.n	800a650 <_printf_i+0xa8>
 800a5da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a5de:	2b15      	cmp	r3, #21
 800a5e0:	d8f6      	bhi.n	800a5d0 <_printf_i+0x28>
 800a5e2:	a001      	add	r0, pc, #4	; (adr r0, 800a5e8 <_printf_i+0x40>)
 800a5e4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a5e8:	0800a641 	.word	0x0800a641
 800a5ec:	0800a655 	.word	0x0800a655
 800a5f0:	0800a5d1 	.word	0x0800a5d1
 800a5f4:	0800a5d1 	.word	0x0800a5d1
 800a5f8:	0800a5d1 	.word	0x0800a5d1
 800a5fc:	0800a5d1 	.word	0x0800a5d1
 800a600:	0800a655 	.word	0x0800a655
 800a604:	0800a5d1 	.word	0x0800a5d1
 800a608:	0800a5d1 	.word	0x0800a5d1
 800a60c:	0800a5d1 	.word	0x0800a5d1
 800a610:	0800a5d1 	.word	0x0800a5d1
 800a614:	0800a763 	.word	0x0800a763
 800a618:	0800a685 	.word	0x0800a685
 800a61c:	0800a745 	.word	0x0800a745
 800a620:	0800a5d1 	.word	0x0800a5d1
 800a624:	0800a5d1 	.word	0x0800a5d1
 800a628:	0800a785 	.word	0x0800a785
 800a62c:	0800a5d1 	.word	0x0800a5d1
 800a630:	0800a685 	.word	0x0800a685
 800a634:	0800a5d1 	.word	0x0800a5d1
 800a638:	0800a5d1 	.word	0x0800a5d1
 800a63c:	0800a74d 	.word	0x0800a74d
 800a640:	680b      	ldr	r3, [r1, #0]
 800a642:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a646:	1d1a      	adds	r2, r3, #4
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	600a      	str	r2, [r1, #0]
 800a64c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a650:	2301      	movs	r3, #1
 800a652:	e0a4      	b.n	800a79e <_printf_i+0x1f6>
 800a654:	6825      	ldr	r5, [r4, #0]
 800a656:	6808      	ldr	r0, [r1, #0]
 800a658:	062e      	lsls	r6, r5, #24
 800a65a:	f100 0304 	add.w	r3, r0, #4
 800a65e:	d50a      	bpl.n	800a676 <_printf_i+0xce>
 800a660:	6805      	ldr	r5, [r0, #0]
 800a662:	600b      	str	r3, [r1, #0]
 800a664:	2d00      	cmp	r5, #0
 800a666:	da03      	bge.n	800a670 <_printf_i+0xc8>
 800a668:	232d      	movs	r3, #45	; 0x2d
 800a66a:	426d      	negs	r5, r5
 800a66c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a670:	230a      	movs	r3, #10
 800a672:	485e      	ldr	r0, [pc, #376]	; (800a7ec <_printf_i+0x244>)
 800a674:	e019      	b.n	800a6aa <_printf_i+0x102>
 800a676:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a67a:	6805      	ldr	r5, [r0, #0]
 800a67c:	600b      	str	r3, [r1, #0]
 800a67e:	bf18      	it	ne
 800a680:	b22d      	sxthne	r5, r5
 800a682:	e7ef      	b.n	800a664 <_printf_i+0xbc>
 800a684:	680b      	ldr	r3, [r1, #0]
 800a686:	6825      	ldr	r5, [r4, #0]
 800a688:	1d18      	adds	r0, r3, #4
 800a68a:	6008      	str	r0, [r1, #0]
 800a68c:	0628      	lsls	r0, r5, #24
 800a68e:	d501      	bpl.n	800a694 <_printf_i+0xec>
 800a690:	681d      	ldr	r5, [r3, #0]
 800a692:	e002      	b.n	800a69a <_printf_i+0xf2>
 800a694:	0669      	lsls	r1, r5, #25
 800a696:	d5fb      	bpl.n	800a690 <_printf_i+0xe8>
 800a698:	881d      	ldrh	r5, [r3, #0]
 800a69a:	2f6f      	cmp	r7, #111	; 0x6f
 800a69c:	bf0c      	ite	eq
 800a69e:	2308      	moveq	r3, #8
 800a6a0:	230a      	movne	r3, #10
 800a6a2:	4852      	ldr	r0, [pc, #328]	; (800a7ec <_printf_i+0x244>)
 800a6a4:	2100      	movs	r1, #0
 800a6a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a6aa:	6866      	ldr	r6, [r4, #4]
 800a6ac:	2e00      	cmp	r6, #0
 800a6ae:	bfa8      	it	ge
 800a6b0:	6821      	ldrge	r1, [r4, #0]
 800a6b2:	60a6      	str	r6, [r4, #8]
 800a6b4:	bfa4      	itt	ge
 800a6b6:	f021 0104 	bicge.w	r1, r1, #4
 800a6ba:	6021      	strge	r1, [r4, #0]
 800a6bc:	b90d      	cbnz	r5, 800a6c2 <_printf_i+0x11a>
 800a6be:	2e00      	cmp	r6, #0
 800a6c0:	d04d      	beq.n	800a75e <_printf_i+0x1b6>
 800a6c2:	4616      	mov	r6, r2
 800a6c4:	fbb5 f1f3 	udiv	r1, r5, r3
 800a6c8:	fb03 5711 	mls	r7, r3, r1, r5
 800a6cc:	5dc7      	ldrb	r7, [r0, r7]
 800a6ce:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a6d2:	462f      	mov	r7, r5
 800a6d4:	42bb      	cmp	r3, r7
 800a6d6:	460d      	mov	r5, r1
 800a6d8:	d9f4      	bls.n	800a6c4 <_printf_i+0x11c>
 800a6da:	2b08      	cmp	r3, #8
 800a6dc:	d10b      	bne.n	800a6f6 <_printf_i+0x14e>
 800a6de:	6823      	ldr	r3, [r4, #0]
 800a6e0:	07df      	lsls	r7, r3, #31
 800a6e2:	d508      	bpl.n	800a6f6 <_printf_i+0x14e>
 800a6e4:	6923      	ldr	r3, [r4, #16]
 800a6e6:	6861      	ldr	r1, [r4, #4]
 800a6e8:	4299      	cmp	r1, r3
 800a6ea:	bfde      	ittt	le
 800a6ec:	2330      	movle	r3, #48	; 0x30
 800a6ee:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a6f2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a6f6:	1b92      	subs	r2, r2, r6
 800a6f8:	6122      	str	r2, [r4, #16]
 800a6fa:	464b      	mov	r3, r9
 800a6fc:	4621      	mov	r1, r4
 800a6fe:	4640      	mov	r0, r8
 800a700:	f8cd a000 	str.w	sl, [sp]
 800a704:	aa03      	add	r2, sp, #12
 800a706:	f7ff fedf 	bl	800a4c8 <_printf_common>
 800a70a:	3001      	adds	r0, #1
 800a70c:	d14c      	bne.n	800a7a8 <_printf_i+0x200>
 800a70e:	f04f 30ff 	mov.w	r0, #4294967295
 800a712:	b004      	add	sp, #16
 800a714:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a718:	4834      	ldr	r0, [pc, #208]	; (800a7ec <_printf_i+0x244>)
 800a71a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a71e:	680e      	ldr	r6, [r1, #0]
 800a720:	6823      	ldr	r3, [r4, #0]
 800a722:	f856 5b04 	ldr.w	r5, [r6], #4
 800a726:	061f      	lsls	r7, r3, #24
 800a728:	600e      	str	r6, [r1, #0]
 800a72a:	d514      	bpl.n	800a756 <_printf_i+0x1ae>
 800a72c:	07d9      	lsls	r1, r3, #31
 800a72e:	bf44      	itt	mi
 800a730:	f043 0320 	orrmi.w	r3, r3, #32
 800a734:	6023      	strmi	r3, [r4, #0]
 800a736:	b91d      	cbnz	r5, 800a740 <_printf_i+0x198>
 800a738:	6823      	ldr	r3, [r4, #0]
 800a73a:	f023 0320 	bic.w	r3, r3, #32
 800a73e:	6023      	str	r3, [r4, #0]
 800a740:	2310      	movs	r3, #16
 800a742:	e7af      	b.n	800a6a4 <_printf_i+0xfc>
 800a744:	6823      	ldr	r3, [r4, #0]
 800a746:	f043 0320 	orr.w	r3, r3, #32
 800a74a:	6023      	str	r3, [r4, #0]
 800a74c:	2378      	movs	r3, #120	; 0x78
 800a74e:	4828      	ldr	r0, [pc, #160]	; (800a7f0 <_printf_i+0x248>)
 800a750:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a754:	e7e3      	b.n	800a71e <_printf_i+0x176>
 800a756:	065e      	lsls	r6, r3, #25
 800a758:	bf48      	it	mi
 800a75a:	b2ad      	uxthmi	r5, r5
 800a75c:	e7e6      	b.n	800a72c <_printf_i+0x184>
 800a75e:	4616      	mov	r6, r2
 800a760:	e7bb      	b.n	800a6da <_printf_i+0x132>
 800a762:	680b      	ldr	r3, [r1, #0]
 800a764:	6826      	ldr	r6, [r4, #0]
 800a766:	1d1d      	adds	r5, r3, #4
 800a768:	6960      	ldr	r0, [r4, #20]
 800a76a:	600d      	str	r5, [r1, #0]
 800a76c:	0635      	lsls	r5, r6, #24
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	d501      	bpl.n	800a776 <_printf_i+0x1ce>
 800a772:	6018      	str	r0, [r3, #0]
 800a774:	e002      	b.n	800a77c <_printf_i+0x1d4>
 800a776:	0671      	lsls	r1, r6, #25
 800a778:	d5fb      	bpl.n	800a772 <_printf_i+0x1ca>
 800a77a:	8018      	strh	r0, [r3, #0]
 800a77c:	2300      	movs	r3, #0
 800a77e:	4616      	mov	r6, r2
 800a780:	6123      	str	r3, [r4, #16]
 800a782:	e7ba      	b.n	800a6fa <_printf_i+0x152>
 800a784:	680b      	ldr	r3, [r1, #0]
 800a786:	1d1a      	adds	r2, r3, #4
 800a788:	600a      	str	r2, [r1, #0]
 800a78a:	681e      	ldr	r6, [r3, #0]
 800a78c:	2100      	movs	r1, #0
 800a78e:	4630      	mov	r0, r6
 800a790:	6862      	ldr	r2, [r4, #4]
 800a792:	f000 fb35 	bl	800ae00 <memchr>
 800a796:	b108      	cbz	r0, 800a79c <_printf_i+0x1f4>
 800a798:	1b80      	subs	r0, r0, r6
 800a79a:	6060      	str	r0, [r4, #4]
 800a79c:	6863      	ldr	r3, [r4, #4]
 800a79e:	6123      	str	r3, [r4, #16]
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a7a6:	e7a8      	b.n	800a6fa <_printf_i+0x152>
 800a7a8:	4632      	mov	r2, r6
 800a7aa:	4649      	mov	r1, r9
 800a7ac:	4640      	mov	r0, r8
 800a7ae:	6923      	ldr	r3, [r4, #16]
 800a7b0:	47d0      	blx	sl
 800a7b2:	3001      	adds	r0, #1
 800a7b4:	d0ab      	beq.n	800a70e <_printf_i+0x166>
 800a7b6:	6823      	ldr	r3, [r4, #0]
 800a7b8:	079b      	lsls	r3, r3, #30
 800a7ba:	d413      	bmi.n	800a7e4 <_printf_i+0x23c>
 800a7bc:	68e0      	ldr	r0, [r4, #12]
 800a7be:	9b03      	ldr	r3, [sp, #12]
 800a7c0:	4298      	cmp	r0, r3
 800a7c2:	bfb8      	it	lt
 800a7c4:	4618      	movlt	r0, r3
 800a7c6:	e7a4      	b.n	800a712 <_printf_i+0x16a>
 800a7c8:	2301      	movs	r3, #1
 800a7ca:	4632      	mov	r2, r6
 800a7cc:	4649      	mov	r1, r9
 800a7ce:	4640      	mov	r0, r8
 800a7d0:	47d0      	blx	sl
 800a7d2:	3001      	adds	r0, #1
 800a7d4:	d09b      	beq.n	800a70e <_printf_i+0x166>
 800a7d6:	3501      	adds	r5, #1
 800a7d8:	68e3      	ldr	r3, [r4, #12]
 800a7da:	9903      	ldr	r1, [sp, #12]
 800a7dc:	1a5b      	subs	r3, r3, r1
 800a7de:	42ab      	cmp	r3, r5
 800a7e0:	dcf2      	bgt.n	800a7c8 <_printf_i+0x220>
 800a7e2:	e7eb      	b.n	800a7bc <_printf_i+0x214>
 800a7e4:	2500      	movs	r5, #0
 800a7e6:	f104 0619 	add.w	r6, r4, #25
 800a7ea:	e7f5      	b.n	800a7d8 <_printf_i+0x230>
 800a7ec:	0800c279 	.word	0x0800c279
 800a7f0:	0800c28a 	.word	0x0800c28a

0800a7f4 <_scanf_chars>:
 800a7f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7f8:	4615      	mov	r5, r2
 800a7fa:	688a      	ldr	r2, [r1, #8]
 800a7fc:	4680      	mov	r8, r0
 800a7fe:	460c      	mov	r4, r1
 800a800:	b932      	cbnz	r2, 800a810 <_scanf_chars+0x1c>
 800a802:	698a      	ldr	r2, [r1, #24]
 800a804:	2a00      	cmp	r2, #0
 800a806:	bf0c      	ite	eq
 800a808:	2201      	moveq	r2, #1
 800a80a:	f04f 32ff 	movne.w	r2, #4294967295
 800a80e:	608a      	str	r2, [r1, #8]
 800a810:	2700      	movs	r7, #0
 800a812:	6822      	ldr	r2, [r4, #0]
 800a814:	f8df 9088 	ldr.w	r9, [pc, #136]	; 800a8a0 <_scanf_chars+0xac>
 800a818:	06d1      	lsls	r1, r2, #27
 800a81a:	bf5f      	itttt	pl
 800a81c:	681a      	ldrpl	r2, [r3, #0]
 800a81e:	1d11      	addpl	r1, r2, #4
 800a820:	6019      	strpl	r1, [r3, #0]
 800a822:	6816      	ldrpl	r6, [r2, #0]
 800a824:	69a0      	ldr	r0, [r4, #24]
 800a826:	b188      	cbz	r0, 800a84c <_scanf_chars+0x58>
 800a828:	2801      	cmp	r0, #1
 800a82a:	d107      	bne.n	800a83c <_scanf_chars+0x48>
 800a82c:	682b      	ldr	r3, [r5, #0]
 800a82e:	781a      	ldrb	r2, [r3, #0]
 800a830:	6963      	ldr	r3, [r4, #20]
 800a832:	5c9b      	ldrb	r3, [r3, r2]
 800a834:	b953      	cbnz	r3, 800a84c <_scanf_chars+0x58>
 800a836:	bb27      	cbnz	r7, 800a882 <_scanf_chars+0x8e>
 800a838:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a83c:	2802      	cmp	r0, #2
 800a83e:	d120      	bne.n	800a882 <_scanf_chars+0x8e>
 800a840:	682b      	ldr	r3, [r5, #0]
 800a842:	781b      	ldrb	r3, [r3, #0]
 800a844:	f813 3009 	ldrb.w	r3, [r3, r9]
 800a848:	071b      	lsls	r3, r3, #28
 800a84a:	d41a      	bmi.n	800a882 <_scanf_chars+0x8e>
 800a84c:	6823      	ldr	r3, [r4, #0]
 800a84e:	3701      	adds	r7, #1
 800a850:	06da      	lsls	r2, r3, #27
 800a852:	bf5e      	ittt	pl
 800a854:	682b      	ldrpl	r3, [r5, #0]
 800a856:	781b      	ldrbpl	r3, [r3, #0]
 800a858:	f806 3b01 	strbpl.w	r3, [r6], #1
 800a85c:	682a      	ldr	r2, [r5, #0]
 800a85e:	686b      	ldr	r3, [r5, #4]
 800a860:	3201      	adds	r2, #1
 800a862:	602a      	str	r2, [r5, #0]
 800a864:	68a2      	ldr	r2, [r4, #8]
 800a866:	3b01      	subs	r3, #1
 800a868:	3a01      	subs	r2, #1
 800a86a:	606b      	str	r3, [r5, #4]
 800a86c:	60a2      	str	r2, [r4, #8]
 800a86e:	b142      	cbz	r2, 800a882 <_scanf_chars+0x8e>
 800a870:	2b00      	cmp	r3, #0
 800a872:	dcd7      	bgt.n	800a824 <_scanf_chars+0x30>
 800a874:	4629      	mov	r1, r5
 800a876:	4640      	mov	r0, r8
 800a878:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a87c:	4798      	blx	r3
 800a87e:	2800      	cmp	r0, #0
 800a880:	d0d0      	beq.n	800a824 <_scanf_chars+0x30>
 800a882:	6823      	ldr	r3, [r4, #0]
 800a884:	f013 0310 	ands.w	r3, r3, #16
 800a888:	d105      	bne.n	800a896 <_scanf_chars+0xa2>
 800a88a:	68e2      	ldr	r2, [r4, #12]
 800a88c:	3201      	adds	r2, #1
 800a88e:	60e2      	str	r2, [r4, #12]
 800a890:	69a2      	ldr	r2, [r4, #24]
 800a892:	b102      	cbz	r2, 800a896 <_scanf_chars+0xa2>
 800a894:	7033      	strb	r3, [r6, #0]
 800a896:	6923      	ldr	r3, [r4, #16]
 800a898:	2000      	movs	r0, #0
 800a89a:	441f      	add	r7, r3
 800a89c:	6127      	str	r7, [r4, #16]
 800a89e:	e7cb      	b.n	800a838 <_scanf_chars+0x44>
 800a8a0:	0800c2b7 	.word	0x0800c2b7

0800a8a4 <_scanf_i>:
 800a8a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8a8:	460c      	mov	r4, r1
 800a8aa:	4698      	mov	r8, r3
 800a8ac:	4b72      	ldr	r3, [pc, #456]	; (800aa78 <_scanf_i+0x1d4>)
 800a8ae:	b087      	sub	sp, #28
 800a8b0:	4682      	mov	sl, r0
 800a8b2:	4616      	mov	r6, r2
 800a8b4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a8b8:	ab03      	add	r3, sp, #12
 800a8ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a8be:	4b6f      	ldr	r3, [pc, #444]	; (800aa7c <_scanf_i+0x1d8>)
 800a8c0:	69a1      	ldr	r1, [r4, #24]
 800a8c2:	4a6f      	ldr	r2, [pc, #444]	; (800aa80 <_scanf_i+0x1dc>)
 800a8c4:	4627      	mov	r7, r4
 800a8c6:	2903      	cmp	r1, #3
 800a8c8:	bf18      	it	ne
 800a8ca:	461a      	movne	r2, r3
 800a8cc:	68a3      	ldr	r3, [r4, #8]
 800a8ce:	9201      	str	r2, [sp, #4]
 800a8d0:	1e5a      	subs	r2, r3, #1
 800a8d2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a8d6:	bf81      	itttt	hi
 800a8d8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a8dc:	eb03 0905 	addhi.w	r9, r3, r5
 800a8e0:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a8e4:	60a3      	strhi	r3, [r4, #8]
 800a8e6:	f857 3b1c 	ldr.w	r3, [r7], #28
 800a8ea:	bf98      	it	ls
 800a8ec:	f04f 0900 	movls.w	r9, #0
 800a8f0:	463d      	mov	r5, r7
 800a8f2:	f04f 0b00 	mov.w	fp, #0
 800a8f6:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800a8fa:	6023      	str	r3, [r4, #0]
 800a8fc:	6831      	ldr	r1, [r6, #0]
 800a8fe:	ab03      	add	r3, sp, #12
 800a900:	2202      	movs	r2, #2
 800a902:	7809      	ldrb	r1, [r1, #0]
 800a904:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800a908:	f000 fa7a 	bl	800ae00 <memchr>
 800a90c:	b328      	cbz	r0, 800a95a <_scanf_i+0xb6>
 800a90e:	f1bb 0f01 	cmp.w	fp, #1
 800a912:	d159      	bne.n	800a9c8 <_scanf_i+0x124>
 800a914:	6862      	ldr	r2, [r4, #4]
 800a916:	b92a      	cbnz	r2, 800a924 <_scanf_i+0x80>
 800a918:	2308      	movs	r3, #8
 800a91a:	6822      	ldr	r2, [r4, #0]
 800a91c:	6063      	str	r3, [r4, #4]
 800a91e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a922:	6022      	str	r2, [r4, #0]
 800a924:	6822      	ldr	r2, [r4, #0]
 800a926:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800a92a:	6022      	str	r2, [r4, #0]
 800a92c:	68a2      	ldr	r2, [r4, #8]
 800a92e:	1e51      	subs	r1, r2, #1
 800a930:	60a1      	str	r1, [r4, #8]
 800a932:	b192      	cbz	r2, 800a95a <_scanf_i+0xb6>
 800a934:	6832      	ldr	r2, [r6, #0]
 800a936:	1c51      	adds	r1, r2, #1
 800a938:	6031      	str	r1, [r6, #0]
 800a93a:	7812      	ldrb	r2, [r2, #0]
 800a93c:	f805 2b01 	strb.w	r2, [r5], #1
 800a940:	6872      	ldr	r2, [r6, #4]
 800a942:	3a01      	subs	r2, #1
 800a944:	2a00      	cmp	r2, #0
 800a946:	6072      	str	r2, [r6, #4]
 800a948:	dc07      	bgt.n	800a95a <_scanf_i+0xb6>
 800a94a:	4631      	mov	r1, r6
 800a94c:	4650      	mov	r0, sl
 800a94e:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800a952:	4790      	blx	r2
 800a954:	2800      	cmp	r0, #0
 800a956:	f040 8085 	bne.w	800aa64 <_scanf_i+0x1c0>
 800a95a:	f10b 0b01 	add.w	fp, fp, #1
 800a95e:	f1bb 0f03 	cmp.w	fp, #3
 800a962:	d1cb      	bne.n	800a8fc <_scanf_i+0x58>
 800a964:	6863      	ldr	r3, [r4, #4]
 800a966:	b90b      	cbnz	r3, 800a96c <_scanf_i+0xc8>
 800a968:	230a      	movs	r3, #10
 800a96a:	6063      	str	r3, [r4, #4]
 800a96c:	6863      	ldr	r3, [r4, #4]
 800a96e:	4945      	ldr	r1, [pc, #276]	; (800aa84 <_scanf_i+0x1e0>)
 800a970:	6960      	ldr	r0, [r4, #20]
 800a972:	1ac9      	subs	r1, r1, r3
 800a974:	f000 f8aa 	bl	800aacc <__sccl>
 800a978:	f04f 0b00 	mov.w	fp, #0
 800a97c:	68a3      	ldr	r3, [r4, #8]
 800a97e:	6822      	ldr	r2, [r4, #0]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d03d      	beq.n	800aa00 <_scanf_i+0x15c>
 800a984:	6831      	ldr	r1, [r6, #0]
 800a986:	6960      	ldr	r0, [r4, #20]
 800a988:	f891 c000 	ldrb.w	ip, [r1]
 800a98c:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a990:	2800      	cmp	r0, #0
 800a992:	d035      	beq.n	800aa00 <_scanf_i+0x15c>
 800a994:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800a998:	d124      	bne.n	800a9e4 <_scanf_i+0x140>
 800a99a:	0510      	lsls	r0, r2, #20
 800a99c:	d522      	bpl.n	800a9e4 <_scanf_i+0x140>
 800a99e:	f10b 0b01 	add.w	fp, fp, #1
 800a9a2:	f1b9 0f00 	cmp.w	r9, #0
 800a9a6:	d003      	beq.n	800a9b0 <_scanf_i+0x10c>
 800a9a8:	3301      	adds	r3, #1
 800a9aa:	f109 39ff 	add.w	r9, r9, #4294967295
 800a9ae:	60a3      	str	r3, [r4, #8]
 800a9b0:	6873      	ldr	r3, [r6, #4]
 800a9b2:	3b01      	subs	r3, #1
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	6073      	str	r3, [r6, #4]
 800a9b8:	dd1b      	ble.n	800a9f2 <_scanf_i+0x14e>
 800a9ba:	6833      	ldr	r3, [r6, #0]
 800a9bc:	3301      	adds	r3, #1
 800a9be:	6033      	str	r3, [r6, #0]
 800a9c0:	68a3      	ldr	r3, [r4, #8]
 800a9c2:	3b01      	subs	r3, #1
 800a9c4:	60a3      	str	r3, [r4, #8]
 800a9c6:	e7d9      	b.n	800a97c <_scanf_i+0xd8>
 800a9c8:	f1bb 0f02 	cmp.w	fp, #2
 800a9cc:	d1ae      	bne.n	800a92c <_scanf_i+0x88>
 800a9ce:	6822      	ldr	r2, [r4, #0]
 800a9d0:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800a9d4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a9d8:	d1bf      	bne.n	800a95a <_scanf_i+0xb6>
 800a9da:	2310      	movs	r3, #16
 800a9dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a9e0:	6063      	str	r3, [r4, #4]
 800a9e2:	e7a2      	b.n	800a92a <_scanf_i+0x86>
 800a9e4:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800a9e8:	6022      	str	r2, [r4, #0]
 800a9ea:	780b      	ldrb	r3, [r1, #0]
 800a9ec:	f805 3b01 	strb.w	r3, [r5], #1
 800a9f0:	e7de      	b.n	800a9b0 <_scanf_i+0x10c>
 800a9f2:	4631      	mov	r1, r6
 800a9f4:	4650      	mov	r0, sl
 800a9f6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a9fa:	4798      	blx	r3
 800a9fc:	2800      	cmp	r0, #0
 800a9fe:	d0df      	beq.n	800a9c0 <_scanf_i+0x11c>
 800aa00:	6823      	ldr	r3, [r4, #0]
 800aa02:	05d9      	lsls	r1, r3, #23
 800aa04:	d50d      	bpl.n	800aa22 <_scanf_i+0x17e>
 800aa06:	42bd      	cmp	r5, r7
 800aa08:	d909      	bls.n	800aa1e <_scanf_i+0x17a>
 800aa0a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800aa0e:	4632      	mov	r2, r6
 800aa10:	4650      	mov	r0, sl
 800aa12:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aa16:	f105 39ff 	add.w	r9, r5, #4294967295
 800aa1a:	4798      	blx	r3
 800aa1c:	464d      	mov	r5, r9
 800aa1e:	42bd      	cmp	r5, r7
 800aa20:	d028      	beq.n	800aa74 <_scanf_i+0x1d0>
 800aa22:	6822      	ldr	r2, [r4, #0]
 800aa24:	f012 0210 	ands.w	r2, r2, #16
 800aa28:	d113      	bne.n	800aa52 <_scanf_i+0x1ae>
 800aa2a:	702a      	strb	r2, [r5, #0]
 800aa2c:	4639      	mov	r1, r7
 800aa2e:	6863      	ldr	r3, [r4, #4]
 800aa30:	4650      	mov	r0, sl
 800aa32:	9e01      	ldr	r6, [sp, #4]
 800aa34:	47b0      	blx	r6
 800aa36:	f8d8 3000 	ldr.w	r3, [r8]
 800aa3a:	6821      	ldr	r1, [r4, #0]
 800aa3c:	1d1a      	adds	r2, r3, #4
 800aa3e:	f8c8 2000 	str.w	r2, [r8]
 800aa42:	f011 0f20 	tst.w	r1, #32
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	d00f      	beq.n	800aa6a <_scanf_i+0x1c6>
 800aa4a:	6018      	str	r0, [r3, #0]
 800aa4c:	68e3      	ldr	r3, [r4, #12]
 800aa4e:	3301      	adds	r3, #1
 800aa50:	60e3      	str	r3, [r4, #12]
 800aa52:	2000      	movs	r0, #0
 800aa54:	1bed      	subs	r5, r5, r7
 800aa56:	44ab      	add	fp, r5
 800aa58:	6925      	ldr	r5, [r4, #16]
 800aa5a:	445d      	add	r5, fp
 800aa5c:	6125      	str	r5, [r4, #16]
 800aa5e:	b007      	add	sp, #28
 800aa60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa64:	f04f 0b00 	mov.w	fp, #0
 800aa68:	e7ca      	b.n	800aa00 <_scanf_i+0x15c>
 800aa6a:	07ca      	lsls	r2, r1, #31
 800aa6c:	bf4c      	ite	mi
 800aa6e:	8018      	strhmi	r0, [r3, #0]
 800aa70:	6018      	strpl	r0, [r3, #0]
 800aa72:	e7eb      	b.n	800aa4c <_scanf_i+0x1a8>
 800aa74:	2001      	movs	r0, #1
 800aa76:	e7f2      	b.n	800aa5e <_scanf_i+0x1ba>
 800aa78:	0800c1e0 	.word	0x0800c1e0
 800aa7c:	0800ad49 	.word	0x0800ad49
 800aa80:	0800ac4d 	.word	0x0800ac4d
 800aa84:	0800c2b4 	.word	0x0800c2b4

0800aa88 <_read_r>:
 800aa88:	b538      	push	{r3, r4, r5, lr}
 800aa8a:	4604      	mov	r4, r0
 800aa8c:	4608      	mov	r0, r1
 800aa8e:	4611      	mov	r1, r2
 800aa90:	2200      	movs	r2, #0
 800aa92:	4d05      	ldr	r5, [pc, #20]	; (800aaa8 <_read_r+0x20>)
 800aa94:	602a      	str	r2, [r5, #0]
 800aa96:	461a      	mov	r2, r3
 800aa98:	f7f7 fcd6 	bl	8002448 <_read>
 800aa9c:	1c43      	adds	r3, r0, #1
 800aa9e:	d102      	bne.n	800aaa6 <_read_r+0x1e>
 800aaa0:	682b      	ldr	r3, [r5, #0]
 800aaa2:	b103      	cbz	r3, 800aaa6 <_read_r+0x1e>
 800aaa4:	6023      	str	r3, [r4, #0]
 800aaa6:	bd38      	pop	{r3, r4, r5, pc}
 800aaa8:	2000043c 	.word	0x2000043c

0800aaac <_sbrk_r>:
 800aaac:	b538      	push	{r3, r4, r5, lr}
 800aaae:	2300      	movs	r3, #0
 800aab0:	4d05      	ldr	r5, [pc, #20]	; (800aac8 <_sbrk_r+0x1c>)
 800aab2:	4604      	mov	r4, r0
 800aab4:	4608      	mov	r0, r1
 800aab6:	602b      	str	r3, [r5, #0]
 800aab8:	f7f7 fd30 	bl	800251c <_sbrk>
 800aabc:	1c43      	adds	r3, r0, #1
 800aabe:	d102      	bne.n	800aac6 <_sbrk_r+0x1a>
 800aac0:	682b      	ldr	r3, [r5, #0]
 800aac2:	b103      	cbz	r3, 800aac6 <_sbrk_r+0x1a>
 800aac4:	6023      	str	r3, [r4, #0]
 800aac6:	bd38      	pop	{r3, r4, r5, pc}
 800aac8:	2000043c 	.word	0x2000043c

0800aacc <__sccl>:
 800aacc:	b570      	push	{r4, r5, r6, lr}
 800aace:	780b      	ldrb	r3, [r1, #0]
 800aad0:	4604      	mov	r4, r0
 800aad2:	2b5e      	cmp	r3, #94	; 0x5e
 800aad4:	bf13      	iteet	ne
 800aad6:	2200      	movne	r2, #0
 800aad8:	2201      	moveq	r2, #1
 800aada:	784b      	ldrbeq	r3, [r1, #1]
 800aadc:	1c48      	addne	r0, r1, #1
 800aade:	bf08      	it	eq
 800aae0:	1c88      	addeq	r0, r1, #2
 800aae2:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800aae6:	1e61      	subs	r1, r4, #1
 800aae8:	f801 2f01 	strb.w	r2, [r1, #1]!
 800aaec:	42a9      	cmp	r1, r5
 800aaee:	d1fb      	bne.n	800aae8 <__sccl+0x1c>
 800aaf0:	b90b      	cbnz	r3, 800aaf6 <__sccl+0x2a>
 800aaf2:	3801      	subs	r0, #1
 800aaf4:	bd70      	pop	{r4, r5, r6, pc}
 800aaf6:	f082 0101 	eor.w	r1, r2, #1
 800aafa:	54e1      	strb	r1, [r4, r3]
 800aafc:	1c42      	adds	r2, r0, #1
 800aafe:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800ab02:	4610      	mov	r0, r2
 800ab04:	2d2d      	cmp	r5, #45	; 0x2d
 800ab06:	f102 36ff 	add.w	r6, r2, #4294967295
 800ab0a:	d006      	beq.n	800ab1a <__sccl+0x4e>
 800ab0c:	2d5d      	cmp	r5, #93	; 0x5d
 800ab0e:	d0f1      	beq.n	800aaf4 <__sccl+0x28>
 800ab10:	b90d      	cbnz	r5, 800ab16 <__sccl+0x4a>
 800ab12:	4630      	mov	r0, r6
 800ab14:	e7ee      	b.n	800aaf4 <__sccl+0x28>
 800ab16:	462b      	mov	r3, r5
 800ab18:	e7ef      	b.n	800aafa <__sccl+0x2e>
 800ab1a:	7816      	ldrb	r6, [r2, #0]
 800ab1c:	2e5d      	cmp	r6, #93	; 0x5d
 800ab1e:	d0fa      	beq.n	800ab16 <__sccl+0x4a>
 800ab20:	42b3      	cmp	r3, r6
 800ab22:	dcf8      	bgt.n	800ab16 <__sccl+0x4a>
 800ab24:	4618      	mov	r0, r3
 800ab26:	3001      	adds	r0, #1
 800ab28:	4286      	cmp	r6, r0
 800ab2a:	5421      	strb	r1, [r4, r0]
 800ab2c:	dcfb      	bgt.n	800ab26 <__sccl+0x5a>
 800ab2e:	43d8      	mvns	r0, r3
 800ab30:	4430      	add	r0, r6
 800ab32:	42b3      	cmp	r3, r6
 800ab34:	bfa8      	it	ge
 800ab36:	2000      	movge	r0, #0
 800ab38:	1c5d      	adds	r5, r3, #1
 800ab3a:	182b      	adds	r3, r5, r0
 800ab3c:	3202      	adds	r2, #2
 800ab3e:	e7de      	b.n	800aafe <__sccl+0x32>

0800ab40 <_strtol_l.isra.0>:
 800ab40:	2b01      	cmp	r3, #1
 800ab42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab46:	4686      	mov	lr, r0
 800ab48:	d001      	beq.n	800ab4e <_strtol_l.isra.0+0xe>
 800ab4a:	2b24      	cmp	r3, #36	; 0x24
 800ab4c:	d906      	bls.n	800ab5c <_strtol_l.isra.0+0x1c>
 800ab4e:	f7fe fca7 	bl	80094a0 <__errno>
 800ab52:	2316      	movs	r3, #22
 800ab54:	6003      	str	r3, [r0, #0]
 800ab56:	2000      	movs	r0, #0
 800ab58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab5c:	468c      	mov	ip, r1
 800ab5e:	4e3a      	ldr	r6, [pc, #232]	; (800ac48 <_strtol_l.isra.0+0x108>)
 800ab60:	4660      	mov	r0, ip
 800ab62:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800ab66:	5da5      	ldrb	r5, [r4, r6]
 800ab68:	f015 0508 	ands.w	r5, r5, #8
 800ab6c:	d1f8      	bne.n	800ab60 <_strtol_l.isra.0+0x20>
 800ab6e:	2c2d      	cmp	r4, #45	; 0x2d
 800ab70:	d133      	bne.n	800abda <_strtol_l.isra.0+0x9a>
 800ab72:	f04f 0801 	mov.w	r8, #1
 800ab76:	f89c 4000 	ldrb.w	r4, [ip]
 800ab7a:	f100 0c02 	add.w	ip, r0, #2
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d05d      	beq.n	800ac3e <_strtol_l.isra.0+0xfe>
 800ab82:	2b10      	cmp	r3, #16
 800ab84:	d10c      	bne.n	800aba0 <_strtol_l.isra.0+0x60>
 800ab86:	2c30      	cmp	r4, #48	; 0x30
 800ab88:	d10a      	bne.n	800aba0 <_strtol_l.isra.0+0x60>
 800ab8a:	f89c 0000 	ldrb.w	r0, [ip]
 800ab8e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ab92:	2858      	cmp	r0, #88	; 0x58
 800ab94:	d14e      	bne.n	800ac34 <_strtol_l.isra.0+0xf4>
 800ab96:	2310      	movs	r3, #16
 800ab98:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800ab9c:	f10c 0c02 	add.w	ip, ip, #2
 800aba0:	2500      	movs	r5, #0
 800aba2:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 800aba6:	3f01      	subs	r7, #1
 800aba8:	fbb7 f9f3 	udiv	r9, r7, r3
 800abac:	4628      	mov	r0, r5
 800abae:	fb03 7a19 	mls	sl, r3, r9, r7
 800abb2:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800abb6:	2e09      	cmp	r6, #9
 800abb8:	d818      	bhi.n	800abec <_strtol_l.isra.0+0xac>
 800abba:	4634      	mov	r4, r6
 800abbc:	42a3      	cmp	r3, r4
 800abbe:	dd24      	ble.n	800ac0a <_strtol_l.isra.0+0xca>
 800abc0:	2d00      	cmp	r5, #0
 800abc2:	db1f      	blt.n	800ac04 <_strtol_l.isra.0+0xc4>
 800abc4:	4581      	cmp	r9, r0
 800abc6:	d31d      	bcc.n	800ac04 <_strtol_l.isra.0+0xc4>
 800abc8:	d101      	bne.n	800abce <_strtol_l.isra.0+0x8e>
 800abca:	45a2      	cmp	sl, r4
 800abcc:	db1a      	blt.n	800ac04 <_strtol_l.isra.0+0xc4>
 800abce:	2501      	movs	r5, #1
 800abd0:	fb00 4003 	mla	r0, r0, r3, r4
 800abd4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800abd8:	e7eb      	b.n	800abb2 <_strtol_l.isra.0+0x72>
 800abda:	2c2b      	cmp	r4, #43	; 0x2b
 800abdc:	bf08      	it	eq
 800abde:	f89c 4000 	ldrbeq.w	r4, [ip]
 800abe2:	46a8      	mov	r8, r5
 800abe4:	bf08      	it	eq
 800abe6:	f100 0c02 	addeq.w	ip, r0, #2
 800abea:	e7c8      	b.n	800ab7e <_strtol_l.isra.0+0x3e>
 800abec:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800abf0:	2e19      	cmp	r6, #25
 800abf2:	d801      	bhi.n	800abf8 <_strtol_l.isra.0+0xb8>
 800abf4:	3c37      	subs	r4, #55	; 0x37
 800abf6:	e7e1      	b.n	800abbc <_strtol_l.isra.0+0x7c>
 800abf8:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800abfc:	2e19      	cmp	r6, #25
 800abfe:	d804      	bhi.n	800ac0a <_strtol_l.isra.0+0xca>
 800ac00:	3c57      	subs	r4, #87	; 0x57
 800ac02:	e7db      	b.n	800abbc <_strtol_l.isra.0+0x7c>
 800ac04:	f04f 35ff 	mov.w	r5, #4294967295
 800ac08:	e7e4      	b.n	800abd4 <_strtol_l.isra.0+0x94>
 800ac0a:	2d00      	cmp	r5, #0
 800ac0c:	da08      	bge.n	800ac20 <_strtol_l.isra.0+0xe0>
 800ac0e:	2322      	movs	r3, #34	; 0x22
 800ac10:	4638      	mov	r0, r7
 800ac12:	f8ce 3000 	str.w	r3, [lr]
 800ac16:	2a00      	cmp	r2, #0
 800ac18:	d09e      	beq.n	800ab58 <_strtol_l.isra.0+0x18>
 800ac1a:	f10c 31ff 	add.w	r1, ip, #4294967295
 800ac1e:	e007      	b.n	800ac30 <_strtol_l.isra.0+0xf0>
 800ac20:	f1b8 0f00 	cmp.w	r8, #0
 800ac24:	d000      	beq.n	800ac28 <_strtol_l.isra.0+0xe8>
 800ac26:	4240      	negs	r0, r0
 800ac28:	2a00      	cmp	r2, #0
 800ac2a:	d095      	beq.n	800ab58 <_strtol_l.isra.0+0x18>
 800ac2c:	2d00      	cmp	r5, #0
 800ac2e:	d1f4      	bne.n	800ac1a <_strtol_l.isra.0+0xda>
 800ac30:	6011      	str	r1, [r2, #0]
 800ac32:	e791      	b.n	800ab58 <_strtol_l.isra.0+0x18>
 800ac34:	2430      	movs	r4, #48	; 0x30
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d1b2      	bne.n	800aba0 <_strtol_l.isra.0+0x60>
 800ac3a:	2308      	movs	r3, #8
 800ac3c:	e7b0      	b.n	800aba0 <_strtol_l.isra.0+0x60>
 800ac3e:	2c30      	cmp	r4, #48	; 0x30
 800ac40:	d0a3      	beq.n	800ab8a <_strtol_l.isra.0+0x4a>
 800ac42:	230a      	movs	r3, #10
 800ac44:	e7ac      	b.n	800aba0 <_strtol_l.isra.0+0x60>
 800ac46:	bf00      	nop
 800ac48:	0800c2b7 	.word	0x0800c2b7

0800ac4c <_strtol_r>:
 800ac4c:	f7ff bf78 	b.w	800ab40 <_strtol_l.isra.0>

0800ac50 <_strtoul_l.isra.0>:
 800ac50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ac54:	468c      	mov	ip, r1
 800ac56:	4686      	mov	lr, r0
 800ac58:	4e3a      	ldr	r6, [pc, #232]	; (800ad44 <_strtoul_l.isra.0+0xf4>)
 800ac5a:	4660      	mov	r0, ip
 800ac5c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800ac60:	5da5      	ldrb	r5, [r4, r6]
 800ac62:	f015 0508 	ands.w	r5, r5, #8
 800ac66:	d1f8      	bne.n	800ac5a <_strtoul_l.isra.0+0xa>
 800ac68:	2c2d      	cmp	r4, #45	; 0x2d
 800ac6a:	d134      	bne.n	800acd6 <_strtoul_l.isra.0+0x86>
 800ac6c:	f04f 0801 	mov.w	r8, #1
 800ac70:	f89c 4000 	ldrb.w	r4, [ip]
 800ac74:	f100 0c02 	add.w	ip, r0, #2
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d05e      	beq.n	800ad3a <_strtoul_l.isra.0+0xea>
 800ac7c:	2b10      	cmp	r3, #16
 800ac7e:	d10c      	bne.n	800ac9a <_strtoul_l.isra.0+0x4a>
 800ac80:	2c30      	cmp	r4, #48	; 0x30
 800ac82:	d10a      	bne.n	800ac9a <_strtoul_l.isra.0+0x4a>
 800ac84:	f89c 0000 	ldrb.w	r0, [ip]
 800ac88:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ac8c:	2858      	cmp	r0, #88	; 0x58
 800ac8e:	d14f      	bne.n	800ad30 <_strtoul_l.isra.0+0xe0>
 800ac90:	2310      	movs	r3, #16
 800ac92:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800ac96:	f10c 0c02 	add.w	ip, ip, #2
 800ac9a:	f04f 37ff 	mov.w	r7, #4294967295
 800ac9e:	fbb7 f7f3 	udiv	r7, r7, r3
 800aca2:	2500      	movs	r5, #0
 800aca4:	fb03 f907 	mul.w	r9, r3, r7
 800aca8:	4628      	mov	r0, r5
 800acaa:	ea6f 0909 	mvn.w	r9, r9
 800acae:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800acb2:	2e09      	cmp	r6, #9
 800acb4:	d818      	bhi.n	800ace8 <_strtoul_l.isra.0+0x98>
 800acb6:	4634      	mov	r4, r6
 800acb8:	42a3      	cmp	r3, r4
 800acba:	dd24      	ble.n	800ad06 <_strtoul_l.isra.0+0xb6>
 800acbc:	2d00      	cmp	r5, #0
 800acbe:	db1f      	blt.n	800ad00 <_strtoul_l.isra.0+0xb0>
 800acc0:	4287      	cmp	r7, r0
 800acc2:	d31d      	bcc.n	800ad00 <_strtoul_l.isra.0+0xb0>
 800acc4:	d101      	bne.n	800acca <_strtoul_l.isra.0+0x7a>
 800acc6:	45a1      	cmp	r9, r4
 800acc8:	db1a      	blt.n	800ad00 <_strtoul_l.isra.0+0xb0>
 800acca:	2501      	movs	r5, #1
 800accc:	fb00 4003 	mla	r0, r0, r3, r4
 800acd0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800acd4:	e7eb      	b.n	800acae <_strtoul_l.isra.0+0x5e>
 800acd6:	2c2b      	cmp	r4, #43	; 0x2b
 800acd8:	bf08      	it	eq
 800acda:	f89c 4000 	ldrbeq.w	r4, [ip]
 800acde:	46a8      	mov	r8, r5
 800ace0:	bf08      	it	eq
 800ace2:	f100 0c02 	addeq.w	ip, r0, #2
 800ace6:	e7c7      	b.n	800ac78 <_strtoul_l.isra.0+0x28>
 800ace8:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800acec:	2e19      	cmp	r6, #25
 800acee:	d801      	bhi.n	800acf4 <_strtoul_l.isra.0+0xa4>
 800acf0:	3c37      	subs	r4, #55	; 0x37
 800acf2:	e7e1      	b.n	800acb8 <_strtoul_l.isra.0+0x68>
 800acf4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800acf8:	2e19      	cmp	r6, #25
 800acfa:	d804      	bhi.n	800ad06 <_strtoul_l.isra.0+0xb6>
 800acfc:	3c57      	subs	r4, #87	; 0x57
 800acfe:	e7db      	b.n	800acb8 <_strtoul_l.isra.0+0x68>
 800ad00:	f04f 35ff 	mov.w	r5, #4294967295
 800ad04:	e7e4      	b.n	800acd0 <_strtoul_l.isra.0+0x80>
 800ad06:	2d00      	cmp	r5, #0
 800ad08:	da07      	bge.n	800ad1a <_strtoul_l.isra.0+0xca>
 800ad0a:	2322      	movs	r3, #34	; 0x22
 800ad0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad10:	f8ce 3000 	str.w	r3, [lr]
 800ad14:	b942      	cbnz	r2, 800ad28 <_strtoul_l.isra.0+0xd8>
 800ad16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad1a:	f1b8 0f00 	cmp.w	r8, #0
 800ad1e:	d000      	beq.n	800ad22 <_strtoul_l.isra.0+0xd2>
 800ad20:	4240      	negs	r0, r0
 800ad22:	2a00      	cmp	r2, #0
 800ad24:	d0f7      	beq.n	800ad16 <_strtoul_l.isra.0+0xc6>
 800ad26:	b10d      	cbz	r5, 800ad2c <_strtoul_l.isra.0+0xdc>
 800ad28:	f10c 31ff 	add.w	r1, ip, #4294967295
 800ad2c:	6011      	str	r1, [r2, #0]
 800ad2e:	e7f2      	b.n	800ad16 <_strtoul_l.isra.0+0xc6>
 800ad30:	2430      	movs	r4, #48	; 0x30
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d1b1      	bne.n	800ac9a <_strtoul_l.isra.0+0x4a>
 800ad36:	2308      	movs	r3, #8
 800ad38:	e7af      	b.n	800ac9a <_strtoul_l.isra.0+0x4a>
 800ad3a:	2c30      	cmp	r4, #48	; 0x30
 800ad3c:	d0a2      	beq.n	800ac84 <_strtoul_l.isra.0+0x34>
 800ad3e:	230a      	movs	r3, #10
 800ad40:	e7ab      	b.n	800ac9a <_strtoul_l.isra.0+0x4a>
 800ad42:	bf00      	nop
 800ad44:	0800c2b7 	.word	0x0800c2b7

0800ad48 <_strtoul_r>:
 800ad48:	f7ff bf82 	b.w	800ac50 <_strtoul_l.isra.0>

0800ad4c <__submore>:
 800ad4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad50:	460c      	mov	r4, r1
 800ad52:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ad54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad58:	4299      	cmp	r1, r3
 800ad5a:	d11b      	bne.n	800ad94 <__submore+0x48>
 800ad5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ad60:	f7ff f82c 	bl	8009dbc <_malloc_r>
 800ad64:	b918      	cbnz	r0, 800ad6e <__submore+0x22>
 800ad66:	f04f 30ff 	mov.w	r0, #4294967295
 800ad6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad72:	63a3      	str	r3, [r4, #56]	; 0x38
 800ad74:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800ad78:	6360      	str	r0, [r4, #52]	; 0x34
 800ad7a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800ad7e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800ad82:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800ad86:	7043      	strb	r3, [r0, #1]
 800ad88:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ad8c:	7003      	strb	r3, [r0, #0]
 800ad8e:	6020      	str	r0, [r4, #0]
 800ad90:	2000      	movs	r0, #0
 800ad92:	e7ea      	b.n	800ad6a <__submore+0x1e>
 800ad94:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800ad96:	0077      	lsls	r7, r6, #1
 800ad98:	463a      	mov	r2, r7
 800ad9a:	f000 f859 	bl	800ae50 <_realloc_r>
 800ad9e:	4605      	mov	r5, r0
 800ada0:	2800      	cmp	r0, #0
 800ada2:	d0e0      	beq.n	800ad66 <__submore+0x1a>
 800ada4:	eb00 0806 	add.w	r8, r0, r6
 800ada8:	4601      	mov	r1, r0
 800adaa:	4632      	mov	r2, r6
 800adac:	4640      	mov	r0, r8
 800adae:	f000 f835 	bl	800ae1c <memcpy>
 800adb2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800adb6:	f8c4 8000 	str.w	r8, [r4]
 800adba:	e7e9      	b.n	800ad90 <__submore+0x44>

0800adbc <_fstat_r>:
 800adbc:	b538      	push	{r3, r4, r5, lr}
 800adbe:	2300      	movs	r3, #0
 800adc0:	4d06      	ldr	r5, [pc, #24]	; (800addc <_fstat_r+0x20>)
 800adc2:	4604      	mov	r4, r0
 800adc4:	4608      	mov	r0, r1
 800adc6:	4611      	mov	r1, r2
 800adc8:	602b      	str	r3, [r5, #0]
 800adca:	f7f7 fb81 	bl	80024d0 <_fstat>
 800adce:	1c43      	adds	r3, r0, #1
 800add0:	d102      	bne.n	800add8 <_fstat_r+0x1c>
 800add2:	682b      	ldr	r3, [r5, #0]
 800add4:	b103      	cbz	r3, 800add8 <_fstat_r+0x1c>
 800add6:	6023      	str	r3, [r4, #0]
 800add8:	bd38      	pop	{r3, r4, r5, pc}
 800adda:	bf00      	nop
 800addc:	2000043c 	.word	0x2000043c

0800ade0 <_isatty_r>:
 800ade0:	b538      	push	{r3, r4, r5, lr}
 800ade2:	2300      	movs	r3, #0
 800ade4:	4d05      	ldr	r5, [pc, #20]	; (800adfc <_isatty_r+0x1c>)
 800ade6:	4604      	mov	r4, r0
 800ade8:	4608      	mov	r0, r1
 800adea:	602b      	str	r3, [r5, #0]
 800adec:	f7f7 fb7f 	bl	80024ee <_isatty>
 800adf0:	1c43      	adds	r3, r0, #1
 800adf2:	d102      	bne.n	800adfa <_isatty_r+0x1a>
 800adf4:	682b      	ldr	r3, [r5, #0]
 800adf6:	b103      	cbz	r3, 800adfa <_isatty_r+0x1a>
 800adf8:	6023      	str	r3, [r4, #0]
 800adfa:	bd38      	pop	{r3, r4, r5, pc}
 800adfc:	2000043c 	.word	0x2000043c

0800ae00 <memchr>:
 800ae00:	4603      	mov	r3, r0
 800ae02:	b510      	push	{r4, lr}
 800ae04:	b2c9      	uxtb	r1, r1
 800ae06:	4402      	add	r2, r0
 800ae08:	4293      	cmp	r3, r2
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	d101      	bne.n	800ae12 <memchr+0x12>
 800ae0e:	2000      	movs	r0, #0
 800ae10:	e003      	b.n	800ae1a <memchr+0x1a>
 800ae12:	7804      	ldrb	r4, [r0, #0]
 800ae14:	3301      	adds	r3, #1
 800ae16:	428c      	cmp	r4, r1
 800ae18:	d1f6      	bne.n	800ae08 <memchr+0x8>
 800ae1a:	bd10      	pop	{r4, pc}

0800ae1c <memcpy>:
 800ae1c:	440a      	add	r2, r1
 800ae1e:	4291      	cmp	r1, r2
 800ae20:	f100 33ff 	add.w	r3, r0, #4294967295
 800ae24:	d100      	bne.n	800ae28 <memcpy+0xc>
 800ae26:	4770      	bx	lr
 800ae28:	b510      	push	{r4, lr}
 800ae2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae2e:	4291      	cmp	r1, r2
 800ae30:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae34:	d1f9      	bne.n	800ae2a <memcpy+0xe>
 800ae36:	bd10      	pop	{r4, pc}

0800ae38 <__malloc_lock>:
 800ae38:	4801      	ldr	r0, [pc, #4]	; (800ae40 <__malloc_lock+0x8>)
 800ae3a:	f7fe befb 	b.w	8009c34 <__retarget_lock_acquire_recursive>
 800ae3e:	bf00      	nop
 800ae40:	20000434 	.word	0x20000434

0800ae44 <__malloc_unlock>:
 800ae44:	4801      	ldr	r0, [pc, #4]	; (800ae4c <__malloc_unlock+0x8>)
 800ae46:	f7fe bef6 	b.w	8009c36 <__retarget_lock_release_recursive>
 800ae4a:	bf00      	nop
 800ae4c:	20000434 	.word	0x20000434

0800ae50 <_realloc_r>:
 800ae50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae52:	4607      	mov	r7, r0
 800ae54:	4614      	mov	r4, r2
 800ae56:	460e      	mov	r6, r1
 800ae58:	b921      	cbnz	r1, 800ae64 <_realloc_r+0x14>
 800ae5a:	4611      	mov	r1, r2
 800ae5c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ae60:	f7fe bfac 	b.w	8009dbc <_malloc_r>
 800ae64:	b922      	cbnz	r2, 800ae70 <_realloc_r+0x20>
 800ae66:	f7fe ff5d 	bl	8009d24 <_free_r>
 800ae6a:	4625      	mov	r5, r4
 800ae6c:	4628      	mov	r0, r5
 800ae6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae70:	f000 f814 	bl	800ae9c <_malloc_usable_size_r>
 800ae74:	42a0      	cmp	r0, r4
 800ae76:	d20f      	bcs.n	800ae98 <_realloc_r+0x48>
 800ae78:	4621      	mov	r1, r4
 800ae7a:	4638      	mov	r0, r7
 800ae7c:	f7fe ff9e 	bl	8009dbc <_malloc_r>
 800ae80:	4605      	mov	r5, r0
 800ae82:	2800      	cmp	r0, #0
 800ae84:	d0f2      	beq.n	800ae6c <_realloc_r+0x1c>
 800ae86:	4631      	mov	r1, r6
 800ae88:	4622      	mov	r2, r4
 800ae8a:	f7ff ffc7 	bl	800ae1c <memcpy>
 800ae8e:	4631      	mov	r1, r6
 800ae90:	4638      	mov	r0, r7
 800ae92:	f7fe ff47 	bl	8009d24 <_free_r>
 800ae96:	e7e9      	b.n	800ae6c <_realloc_r+0x1c>
 800ae98:	4635      	mov	r5, r6
 800ae9a:	e7e7      	b.n	800ae6c <_realloc_r+0x1c>

0800ae9c <_malloc_usable_size_r>:
 800ae9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aea0:	1f18      	subs	r0, r3, #4
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	bfbc      	itt	lt
 800aea6:	580b      	ldrlt	r3, [r1, r0]
 800aea8:	18c0      	addlt	r0, r0, r3
 800aeaa:	4770      	bx	lr

0800aeac <rint>:
 800aeac:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 800aeb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aeb2:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 800aeb6:	2f13      	cmp	r7, #19
 800aeb8:	4602      	mov	r2, r0
 800aeba:	460b      	mov	r3, r1
 800aebc:	460c      	mov	r4, r1
 800aebe:	4605      	mov	r5, r0
 800aec0:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 800aec4:	dc59      	bgt.n	800af7a <rint+0xce>
 800aec6:	2f00      	cmp	r7, #0
 800aec8:	da2a      	bge.n	800af20 <rint+0x74>
 800aeca:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800aece:	4301      	orrs	r1, r0
 800aed0:	d022      	beq.n	800af18 <rint+0x6c>
 800aed2:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800aed6:	4301      	orrs	r1, r0
 800aed8:	424d      	negs	r5, r1
 800aeda:	430d      	orrs	r5, r1
 800aedc:	4936      	ldr	r1, [pc, #216]	; (800afb8 <rint+0x10c>)
 800aede:	0c5c      	lsrs	r4, r3, #17
 800aee0:	0b2d      	lsrs	r5, r5, #12
 800aee2:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 800aee6:	0464      	lsls	r4, r4, #17
 800aee8:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800aeec:	ea45 0304 	orr.w	r3, r5, r4
 800aef0:	e9d1 4500 	ldrd	r4, r5, [r1]
 800aef4:	4620      	mov	r0, r4
 800aef6:	4629      	mov	r1, r5
 800aef8:	f7f5 fb82 	bl	8000600 <__adddf3>
 800aefc:	e9cd 0100 	strd	r0, r1, [sp]
 800af00:	e9dd 0100 	ldrd	r0, r1, [sp]
 800af04:	462b      	mov	r3, r5
 800af06:	4622      	mov	r2, r4
 800af08:	f7f5 fb78 	bl	80005fc <__aeabi_dsub>
 800af0c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800af10:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 800af14:	4602      	mov	r2, r0
 800af16:	460b      	mov	r3, r1
 800af18:	4610      	mov	r0, r2
 800af1a:	4619      	mov	r1, r3
 800af1c:	b003      	add	sp, #12
 800af1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af20:	4926      	ldr	r1, [pc, #152]	; (800afbc <rint+0x110>)
 800af22:	4139      	asrs	r1, r7
 800af24:	ea03 0001 	and.w	r0, r3, r1
 800af28:	4310      	orrs	r0, r2
 800af2a:	d0f5      	beq.n	800af18 <rint+0x6c>
 800af2c:	084b      	lsrs	r3, r1, #1
 800af2e:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 800af32:	ea52 0501 	orrs.w	r5, r2, r1
 800af36:	d00c      	beq.n	800af52 <rint+0xa6>
 800af38:	ea24 0303 	bic.w	r3, r4, r3
 800af3c:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800af40:	2f13      	cmp	r7, #19
 800af42:	bf0c      	ite	eq
 800af44:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 800af48:	2500      	movne	r5, #0
 800af4a:	fa44 f707 	asr.w	r7, r4, r7
 800af4e:	ea43 0407 	orr.w	r4, r3, r7
 800af52:	4919      	ldr	r1, [pc, #100]	; (800afb8 <rint+0x10c>)
 800af54:	4623      	mov	r3, r4
 800af56:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 800af5a:	462a      	mov	r2, r5
 800af5c:	e9d6 4500 	ldrd	r4, r5, [r6]
 800af60:	4620      	mov	r0, r4
 800af62:	4629      	mov	r1, r5
 800af64:	f7f5 fb4c 	bl	8000600 <__adddf3>
 800af68:	e9cd 0100 	strd	r0, r1, [sp]
 800af6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800af70:	4622      	mov	r2, r4
 800af72:	462b      	mov	r3, r5
 800af74:	f7f5 fb42 	bl	80005fc <__aeabi_dsub>
 800af78:	e7cc      	b.n	800af14 <rint+0x68>
 800af7a:	2f33      	cmp	r7, #51	; 0x33
 800af7c:	dd05      	ble.n	800af8a <rint+0xde>
 800af7e:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 800af82:	d1c9      	bne.n	800af18 <rint+0x6c>
 800af84:	f7f5 fb3c 	bl	8000600 <__adddf3>
 800af88:	e7c4      	b.n	800af14 <rint+0x68>
 800af8a:	f04f 31ff 	mov.w	r1, #4294967295
 800af8e:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 800af92:	fa21 f10c 	lsr.w	r1, r1, ip
 800af96:	4208      	tst	r0, r1
 800af98:	d0be      	beq.n	800af18 <rint+0x6c>
 800af9a:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 800af9e:	bf18      	it	ne
 800afa0:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 800afa4:	ea4f 0351 	mov.w	r3, r1, lsr #1
 800afa8:	bf1e      	ittt	ne
 800afaa:	ea20 0303 	bicne.w	r3, r0, r3
 800afae:	fa45 fc0c 	asrne.w	ip, r5, ip
 800afb2:	ea43 050c 	orrne.w	r5, r3, ip
 800afb6:	e7cc      	b.n	800af52 <rint+0xa6>
 800afb8:	0800c3b8 	.word	0x0800c3b8
 800afbc:	000fffff 	.word	0x000fffff

0800afc0 <sinf>:
 800afc0:	b507      	push	{r0, r1, r2, lr}
 800afc2:	4a19      	ldr	r2, [pc, #100]	; (800b028 <sinf+0x68>)
 800afc4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800afc8:	4293      	cmp	r3, r2
 800afca:	4601      	mov	r1, r0
 800afcc:	dc04      	bgt.n	800afd8 <sinf+0x18>
 800afce:	2200      	movs	r2, #0
 800afd0:	2100      	movs	r1, #0
 800afd2:	f000 fcbf 	bl	800b954 <__kernel_sinf>
 800afd6:	e004      	b.n	800afe2 <sinf+0x22>
 800afd8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800afdc:	db04      	blt.n	800afe8 <sinf+0x28>
 800afde:	f7f5 fd39 	bl	8000a54 <__aeabi_fsub>
 800afe2:	b003      	add	sp, #12
 800afe4:	f85d fb04 	ldr.w	pc, [sp], #4
 800afe8:	4669      	mov	r1, sp
 800afea:	f000 f81f 	bl	800b02c <__ieee754_rem_pio2f>
 800afee:	f000 0003 	and.w	r0, r0, #3
 800aff2:	2801      	cmp	r0, #1
 800aff4:	d006      	beq.n	800b004 <sinf+0x44>
 800aff6:	2802      	cmp	r0, #2
 800aff8:	d009      	beq.n	800b00e <sinf+0x4e>
 800affa:	b980      	cbnz	r0, 800b01e <sinf+0x5e>
 800affc:	2201      	movs	r2, #1
 800affe:	9901      	ldr	r1, [sp, #4]
 800b000:	9800      	ldr	r0, [sp, #0]
 800b002:	e7e6      	b.n	800afd2 <sinf+0x12>
 800b004:	9901      	ldr	r1, [sp, #4]
 800b006:	9800      	ldr	r0, [sp, #0]
 800b008:	f000 f96e 	bl	800b2e8 <__kernel_cosf>
 800b00c:	e7e9      	b.n	800afe2 <sinf+0x22>
 800b00e:	2201      	movs	r2, #1
 800b010:	9901      	ldr	r1, [sp, #4]
 800b012:	9800      	ldr	r0, [sp, #0]
 800b014:	f000 fc9e 	bl	800b954 <__kernel_sinf>
 800b018:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800b01c:	e7e1      	b.n	800afe2 <sinf+0x22>
 800b01e:	9901      	ldr	r1, [sp, #4]
 800b020:	9800      	ldr	r0, [sp, #0]
 800b022:	f000 f961 	bl	800b2e8 <__kernel_cosf>
 800b026:	e7f7      	b.n	800b018 <sinf+0x58>
 800b028:	3f490fd8 	.word	0x3f490fd8

0800b02c <__ieee754_rem_pio2f>:
 800b02c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b030:	4aa0      	ldr	r2, [pc, #640]	; (800b2b4 <__ieee754_rem_pio2f+0x288>)
 800b032:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800b036:	4296      	cmp	r6, r2
 800b038:	460c      	mov	r4, r1
 800b03a:	4682      	mov	sl, r0
 800b03c:	b087      	sub	sp, #28
 800b03e:	dc04      	bgt.n	800b04a <__ieee754_rem_pio2f+0x1e>
 800b040:	2300      	movs	r3, #0
 800b042:	6008      	str	r0, [r1, #0]
 800b044:	604b      	str	r3, [r1, #4]
 800b046:	2500      	movs	r5, #0
 800b048:	e01a      	b.n	800b080 <__ieee754_rem_pio2f+0x54>
 800b04a:	4a9b      	ldr	r2, [pc, #620]	; (800b2b8 <__ieee754_rem_pio2f+0x28c>)
 800b04c:	4296      	cmp	r6, r2
 800b04e:	dc4b      	bgt.n	800b0e8 <__ieee754_rem_pio2f+0xbc>
 800b050:	2800      	cmp	r0, #0
 800b052:	499a      	ldr	r1, [pc, #616]	; (800b2bc <__ieee754_rem_pio2f+0x290>)
 800b054:	4f9a      	ldr	r7, [pc, #616]	; (800b2c0 <__ieee754_rem_pio2f+0x294>)
 800b056:	f026 060f 	bic.w	r6, r6, #15
 800b05a:	dd23      	ble.n	800b0a4 <__ieee754_rem_pio2f+0x78>
 800b05c:	f7f5 fcfa 	bl	8000a54 <__aeabi_fsub>
 800b060:	42be      	cmp	r6, r7
 800b062:	4605      	mov	r5, r0
 800b064:	d010      	beq.n	800b088 <__ieee754_rem_pio2f+0x5c>
 800b066:	4997      	ldr	r1, [pc, #604]	; (800b2c4 <__ieee754_rem_pio2f+0x298>)
 800b068:	f7f5 fcf4 	bl	8000a54 <__aeabi_fsub>
 800b06c:	4601      	mov	r1, r0
 800b06e:	6020      	str	r0, [r4, #0]
 800b070:	4628      	mov	r0, r5
 800b072:	f7f5 fcef 	bl	8000a54 <__aeabi_fsub>
 800b076:	4993      	ldr	r1, [pc, #588]	; (800b2c4 <__ieee754_rem_pio2f+0x298>)
 800b078:	f7f5 fcec 	bl	8000a54 <__aeabi_fsub>
 800b07c:	2501      	movs	r5, #1
 800b07e:	6060      	str	r0, [r4, #4]
 800b080:	4628      	mov	r0, r5
 800b082:	b007      	add	sp, #28
 800b084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b088:	498f      	ldr	r1, [pc, #572]	; (800b2c8 <__ieee754_rem_pio2f+0x29c>)
 800b08a:	f7f5 fce3 	bl	8000a54 <__aeabi_fsub>
 800b08e:	498f      	ldr	r1, [pc, #572]	; (800b2cc <__ieee754_rem_pio2f+0x2a0>)
 800b090:	4605      	mov	r5, r0
 800b092:	f7f5 fcdf 	bl	8000a54 <__aeabi_fsub>
 800b096:	4601      	mov	r1, r0
 800b098:	6020      	str	r0, [r4, #0]
 800b09a:	4628      	mov	r0, r5
 800b09c:	f7f5 fcda 	bl	8000a54 <__aeabi_fsub>
 800b0a0:	498a      	ldr	r1, [pc, #552]	; (800b2cc <__ieee754_rem_pio2f+0x2a0>)
 800b0a2:	e7e9      	b.n	800b078 <__ieee754_rem_pio2f+0x4c>
 800b0a4:	f7f5 fcd8 	bl	8000a58 <__addsf3>
 800b0a8:	42be      	cmp	r6, r7
 800b0aa:	4605      	mov	r5, r0
 800b0ac:	d00e      	beq.n	800b0cc <__ieee754_rem_pio2f+0xa0>
 800b0ae:	4985      	ldr	r1, [pc, #532]	; (800b2c4 <__ieee754_rem_pio2f+0x298>)
 800b0b0:	f7f5 fcd2 	bl	8000a58 <__addsf3>
 800b0b4:	4601      	mov	r1, r0
 800b0b6:	6020      	str	r0, [r4, #0]
 800b0b8:	4628      	mov	r0, r5
 800b0ba:	f7f5 fccb 	bl	8000a54 <__aeabi_fsub>
 800b0be:	4981      	ldr	r1, [pc, #516]	; (800b2c4 <__ieee754_rem_pio2f+0x298>)
 800b0c0:	f7f5 fcca 	bl	8000a58 <__addsf3>
 800b0c4:	f04f 35ff 	mov.w	r5, #4294967295
 800b0c8:	6060      	str	r0, [r4, #4]
 800b0ca:	e7d9      	b.n	800b080 <__ieee754_rem_pio2f+0x54>
 800b0cc:	497e      	ldr	r1, [pc, #504]	; (800b2c8 <__ieee754_rem_pio2f+0x29c>)
 800b0ce:	f7f5 fcc3 	bl	8000a58 <__addsf3>
 800b0d2:	497e      	ldr	r1, [pc, #504]	; (800b2cc <__ieee754_rem_pio2f+0x2a0>)
 800b0d4:	4605      	mov	r5, r0
 800b0d6:	f7f5 fcbf 	bl	8000a58 <__addsf3>
 800b0da:	4601      	mov	r1, r0
 800b0dc:	6020      	str	r0, [r4, #0]
 800b0de:	4628      	mov	r0, r5
 800b0e0:	f7f5 fcb8 	bl	8000a54 <__aeabi_fsub>
 800b0e4:	4979      	ldr	r1, [pc, #484]	; (800b2cc <__ieee754_rem_pio2f+0x2a0>)
 800b0e6:	e7eb      	b.n	800b0c0 <__ieee754_rem_pio2f+0x94>
 800b0e8:	4a79      	ldr	r2, [pc, #484]	; (800b2d0 <__ieee754_rem_pio2f+0x2a4>)
 800b0ea:	4296      	cmp	r6, r2
 800b0ec:	f300 8091 	bgt.w	800b212 <__ieee754_rem_pio2f+0x1e6>
 800b0f0:	f000 fca6 	bl	800ba40 <fabsf>
 800b0f4:	4977      	ldr	r1, [pc, #476]	; (800b2d4 <__ieee754_rem_pio2f+0x2a8>)
 800b0f6:	4607      	mov	r7, r0
 800b0f8:	f7f5 f9c8 	bl	800048c <__aeabi_fmul>
 800b0fc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800b100:	f7f5 fcaa 	bl	8000a58 <__addsf3>
 800b104:	f7f5 fe26 	bl	8000d54 <__aeabi_f2iz>
 800b108:	4605      	mov	r5, r0
 800b10a:	f7f5 fd59 	bl	8000bc0 <__aeabi_i2f>
 800b10e:	496b      	ldr	r1, [pc, #428]	; (800b2bc <__ieee754_rem_pio2f+0x290>)
 800b110:	4681      	mov	r9, r0
 800b112:	f7f5 f9bb 	bl	800048c <__aeabi_fmul>
 800b116:	4601      	mov	r1, r0
 800b118:	4638      	mov	r0, r7
 800b11a:	f7f5 fc9b 	bl	8000a54 <__aeabi_fsub>
 800b11e:	4969      	ldr	r1, [pc, #420]	; (800b2c4 <__ieee754_rem_pio2f+0x298>)
 800b120:	4680      	mov	r8, r0
 800b122:	4648      	mov	r0, r9
 800b124:	f7f5 f9b2 	bl	800048c <__aeabi_fmul>
 800b128:	2d1f      	cmp	r5, #31
 800b12a:	4607      	mov	r7, r0
 800b12c:	dc0c      	bgt.n	800b148 <__ieee754_rem_pio2f+0x11c>
 800b12e:	4a6a      	ldr	r2, [pc, #424]	; (800b2d8 <__ieee754_rem_pio2f+0x2ac>)
 800b130:	1e69      	subs	r1, r5, #1
 800b132:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800b136:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
 800b13a:	4293      	cmp	r3, r2
 800b13c:	d004      	beq.n	800b148 <__ieee754_rem_pio2f+0x11c>
 800b13e:	4639      	mov	r1, r7
 800b140:	4640      	mov	r0, r8
 800b142:	f7f5 fc87 	bl	8000a54 <__aeabi_fsub>
 800b146:	e00b      	b.n	800b160 <__ieee754_rem_pio2f+0x134>
 800b148:	4639      	mov	r1, r7
 800b14a:	4640      	mov	r0, r8
 800b14c:	f7f5 fc82 	bl	8000a54 <__aeabi_fsub>
 800b150:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800b154:	ea4f 5be6 	mov.w	fp, r6, asr #23
 800b158:	ebc3 56d6 	rsb	r6, r3, r6, lsr #23
 800b15c:	2e08      	cmp	r6, #8
 800b15e:	dc01      	bgt.n	800b164 <__ieee754_rem_pio2f+0x138>
 800b160:	6020      	str	r0, [r4, #0]
 800b162:	e026      	b.n	800b1b2 <__ieee754_rem_pio2f+0x186>
 800b164:	4958      	ldr	r1, [pc, #352]	; (800b2c8 <__ieee754_rem_pio2f+0x29c>)
 800b166:	4648      	mov	r0, r9
 800b168:	f7f5 f990 	bl	800048c <__aeabi_fmul>
 800b16c:	4607      	mov	r7, r0
 800b16e:	4601      	mov	r1, r0
 800b170:	4640      	mov	r0, r8
 800b172:	f7f5 fc6f 	bl	8000a54 <__aeabi_fsub>
 800b176:	4601      	mov	r1, r0
 800b178:	4606      	mov	r6, r0
 800b17a:	4640      	mov	r0, r8
 800b17c:	f7f5 fc6a 	bl	8000a54 <__aeabi_fsub>
 800b180:	4639      	mov	r1, r7
 800b182:	f7f5 fc67 	bl	8000a54 <__aeabi_fsub>
 800b186:	4607      	mov	r7, r0
 800b188:	4950      	ldr	r1, [pc, #320]	; (800b2cc <__ieee754_rem_pio2f+0x2a0>)
 800b18a:	4648      	mov	r0, r9
 800b18c:	f7f5 f97e 	bl	800048c <__aeabi_fmul>
 800b190:	4639      	mov	r1, r7
 800b192:	f7f5 fc5f 	bl	8000a54 <__aeabi_fsub>
 800b196:	4601      	mov	r1, r0
 800b198:	4607      	mov	r7, r0
 800b19a:	4630      	mov	r0, r6
 800b19c:	f7f5 fc5a 	bl	8000a54 <__aeabi_fsub>
 800b1a0:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800b1a4:	ebab 0b03 	sub.w	fp, fp, r3
 800b1a8:	f1bb 0f19 	cmp.w	fp, #25
 800b1ac:	dc16      	bgt.n	800b1dc <__ieee754_rem_pio2f+0x1b0>
 800b1ae:	46b0      	mov	r8, r6
 800b1b0:	6020      	str	r0, [r4, #0]
 800b1b2:	6826      	ldr	r6, [r4, #0]
 800b1b4:	4640      	mov	r0, r8
 800b1b6:	4631      	mov	r1, r6
 800b1b8:	f7f5 fc4c 	bl	8000a54 <__aeabi_fsub>
 800b1bc:	4639      	mov	r1, r7
 800b1be:	f7f5 fc49 	bl	8000a54 <__aeabi_fsub>
 800b1c2:	f1ba 0f00 	cmp.w	sl, #0
 800b1c6:	6060      	str	r0, [r4, #4]
 800b1c8:	f6bf af5a 	bge.w	800b080 <__ieee754_rem_pio2f+0x54>
 800b1cc:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800b1d0:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800b1d4:	6026      	str	r6, [r4, #0]
 800b1d6:	6060      	str	r0, [r4, #4]
 800b1d8:	426d      	negs	r5, r5
 800b1da:	e751      	b.n	800b080 <__ieee754_rem_pio2f+0x54>
 800b1dc:	493f      	ldr	r1, [pc, #252]	; (800b2dc <__ieee754_rem_pio2f+0x2b0>)
 800b1de:	4648      	mov	r0, r9
 800b1e0:	f7f5 f954 	bl	800048c <__aeabi_fmul>
 800b1e4:	4607      	mov	r7, r0
 800b1e6:	4601      	mov	r1, r0
 800b1e8:	4630      	mov	r0, r6
 800b1ea:	f7f5 fc33 	bl	8000a54 <__aeabi_fsub>
 800b1ee:	4601      	mov	r1, r0
 800b1f0:	4680      	mov	r8, r0
 800b1f2:	4630      	mov	r0, r6
 800b1f4:	f7f5 fc2e 	bl	8000a54 <__aeabi_fsub>
 800b1f8:	4639      	mov	r1, r7
 800b1fa:	f7f5 fc2b 	bl	8000a54 <__aeabi_fsub>
 800b1fe:	4606      	mov	r6, r0
 800b200:	4937      	ldr	r1, [pc, #220]	; (800b2e0 <__ieee754_rem_pio2f+0x2b4>)
 800b202:	4648      	mov	r0, r9
 800b204:	f7f5 f942 	bl	800048c <__aeabi_fmul>
 800b208:	4631      	mov	r1, r6
 800b20a:	f7f5 fc23 	bl	8000a54 <__aeabi_fsub>
 800b20e:	4607      	mov	r7, r0
 800b210:	e795      	b.n	800b13e <__ieee754_rem_pio2f+0x112>
 800b212:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800b216:	db05      	blt.n	800b224 <__ieee754_rem_pio2f+0x1f8>
 800b218:	4601      	mov	r1, r0
 800b21a:	f7f5 fc1b 	bl	8000a54 <__aeabi_fsub>
 800b21e:	6060      	str	r0, [r4, #4]
 800b220:	6020      	str	r0, [r4, #0]
 800b222:	e710      	b.n	800b046 <__ieee754_rem_pio2f+0x1a>
 800b224:	15f7      	asrs	r7, r6, #23
 800b226:	3f86      	subs	r7, #134	; 0x86
 800b228:	eba6 56c7 	sub.w	r6, r6, r7, lsl #23
 800b22c:	4630      	mov	r0, r6
 800b22e:	f7f5 fd91 	bl	8000d54 <__aeabi_f2iz>
 800b232:	f7f5 fcc5 	bl	8000bc0 <__aeabi_i2f>
 800b236:	4601      	mov	r1, r0
 800b238:	9003      	str	r0, [sp, #12]
 800b23a:	4630      	mov	r0, r6
 800b23c:	f7f5 fc0a 	bl	8000a54 <__aeabi_fsub>
 800b240:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800b244:	f7f5 f922 	bl	800048c <__aeabi_fmul>
 800b248:	4606      	mov	r6, r0
 800b24a:	f7f5 fd83 	bl	8000d54 <__aeabi_f2iz>
 800b24e:	f7f5 fcb7 	bl	8000bc0 <__aeabi_i2f>
 800b252:	4601      	mov	r1, r0
 800b254:	9004      	str	r0, [sp, #16]
 800b256:	4605      	mov	r5, r0
 800b258:	4630      	mov	r0, r6
 800b25a:	f7f5 fbfb 	bl	8000a54 <__aeabi_fsub>
 800b25e:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800b262:	f7f5 f913 	bl	800048c <__aeabi_fmul>
 800b266:	2100      	movs	r1, #0
 800b268:	9005      	str	r0, [sp, #20]
 800b26a:	f7f5 fd41 	bl	8000cf0 <__aeabi_fcmpeq>
 800b26e:	b1f0      	cbz	r0, 800b2ae <__ieee754_rem_pio2f+0x282>
 800b270:	2100      	movs	r1, #0
 800b272:	4628      	mov	r0, r5
 800b274:	f7f5 fd3c 	bl	8000cf0 <__aeabi_fcmpeq>
 800b278:	2800      	cmp	r0, #0
 800b27a:	bf14      	ite	ne
 800b27c:	2301      	movne	r3, #1
 800b27e:	2302      	moveq	r3, #2
 800b280:	4a18      	ldr	r2, [pc, #96]	; (800b2e4 <__ieee754_rem_pio2f+0x2b8>)
 800b282:	4621      	mov	r1, r4
 800b284:	9201      	str	r2, [sp, #4]
 800b286:	2202      	movs	r2, #2
 800b288:	a803      	add	r0, sp, #12
 800b28a:	9200      	str	r2, [sp, #0]
 800b28c:	463a      	mov	r2, r7
 800b28e:	f000 f8ab 	bl	800b3e8 <__kernel_rem_pio2f>
 800b292:	f1ba 0f00 	cmp.w	sl, #0
 800b296:	4605      	mov	r5, r0
 800b298:	f6bf aef2 	bge.w	800b080 <__ieee754_rem_pio2f+0x54>
 800b29c:	6823      	ldr	r3, [r4, #0]
 800b29e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b2a2:	6023      	str	r3, [r4, #0]
 800b2a4:	6863      	ldr	r3, [r4, #4]
 800b2a6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b2aa:	6063      	str	r3, [r4, #4]
 800b2ac:	e794      	b.n	800b1d8 <__ieee754_rem_pio2f+0x1ac>
 800b2ae:	2303      	movs	r3, #3
 800b2b0:	e7e6      	b.n	800b280 <__ieee754_rem_pio2f+0x254>
 800b2b2:	bf00      	nop
 800b2b4:	3f490fd8 	.word	0x3f490fd8
 800b2b8:	4016cbe3 	.word	0x4016cbe3
 800b2bc:	3fc90f80 	.word	0x3fc90f80
 800b2c0:	3fc90fd0 	.word	0x3fc90fd0
 800b2c4:	37354443 	.word	0x37354443
 800b2c8:	37354400 	.word	0x37354400
 800b2cc:	2e85a308 	.word	0x2e85a308
 800b2d0:	43490f80 	.word	0x43490f80
 800b2d4:	3f22f984 	.word	0x3f22f984
 800b2d8:	0800c3c8 	.word	0x0800c3c8
 800b2dc:	2e85a300 	.word	0x2e85a300
 800b2e0:	248d3132 	.word	0x248d3132
 800b2e4:	0800c448 	.word	0x0800c448

0800b2e8 <__kernel_cosf>:
 800b2e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2ec:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 800b2f0:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800b2f4:	4606      	mov	r6, r0
 800b2f6:	4688      	mov	r8, r1
 800b2f8:	da03      	bge.n	800b302 <__kernel_cosf+0x1a>
 800b2fa:	f7f5 fd2b 	bl	8000d54 <__aeabi_f2iz>
 800b2fe:	2800      	cmp	r0, #0
 800b300:	d05c      	beq.n	800b3bc <__kernel_cosf+0xd4>
 800b302:	4631      	mov	r1, r6
 800b304:	4630      	mov	r0, r6
 800b306:	f7f5 f8c1 	bl	800048c <__aeabi_fmul>
 800b30a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800b30e:	4605      	mov	r5, r0
 800b310:	f7f5 f8bc 	bl	800048c <__aeabi_fmul>
 800b314:	492b      	ldr	r1, [pc, #172]	; (800b3c4 <__kernel_cosf+0xdc>)
 800b316:	4607      	mov	r7, r0
 800b318:	4628      	mov	r0, r5
 800b31a:	f7f5 f8b7 	bl	800048c <__aeabi_fmul>
 800b31e:	492a      	ldr	r1, [pc, #168]	; (800b3c8 <__kernel_cosf+0xe0>)
 800b320:	f7f5 fb9a 	bl	8000a58 <__addsf3>
 800b324:	4629      	mov	r1, r5
 800b326:	f7f5 f8b1 	bl	800048c <__aeabi_fmul>
 800b32a:	4928      	ldr	r1, [pc, #160]	; (800b3cc <__kernel_cosf+0xe4>)
 800b32c:	f7f5 fb92 	bl	8000a54 <__aeabi_fsub>
 800b330:	4629      	mov	r1, r5
 800b332:	f7f5 f8ab 	bl	800048c <__aeabi_fmul>
 800b336:	4926      	ldr	r1, [pc, #152]	; (800b3d0 <__kernel_cosf+0xe8>)
 800b338:	f7f5 fb8e 	bl	8000a58 <__addsf3>
 800b33c:	4629      	mov	r1, r5
 800b33e:	f7f5 f8a5 	bl	800048c <__aeabi_fmul>
 800b342:	4924      	ldr	r1, [pc, #144]	; (800b3d4 <__kernel_cosf+0xec>)
 800b344:	f7f5 fb86 	bl	8000a54 <__aeabi_fsub>
 800b348:	4629      	mov	r1, r5
 800b34a:	f7f5 f89f 	bl	800048c <__aeabi_fmul>
 800b34e:	4922      	ldr	r1, [pc, #136]	; (800b3d8 <__kernel_cosf+0xf0>)
 800b350:	f7f5 fb82 	bl	8000a58 <__addsf3>
 800b354:	4629      	mov	r1, r5
 800b356:	f7f5 f899 	bl	800048c <__aeabi_fmul>
 800b35a:	4629      	mov	r1, r5
 800b35c:	f7f5 f896 	bl	800048c <__aeabi_fmul>
 800b360:	4641      	mov	r1, r8
 800b362:	4605      	mov	r5, r0
 800b364:	4630      	mov	r0, r6
 800b366:	f7f5 f891 	bl	800048c <__aeabi_fmul>
 800b36a:	4601      	mov	r1, r0
 800b36c:	4628      	mov	r0, r5
 800b36e:	f7f5 fb71 	bl	8000a54 <__aeabi_fsub>
 800b372:	4b1a      	ldr	r3, [pc, #104]	; (800b3dc <__kernel_cosf+0xf4>)
 800b374:	4605      	mov	r5, r0
 800b376:	429c      	cmp	r4, r3
 800b378:	dc0a      	bgt.n	800b390 <__kernel_cosf+0xa8>
 800b37a:	4601      	mov	r1, r0
 800b37c:	4638      	mov	r0, r7
 800b37e:	f7f5 fb69 	bl	8000a54 <__aeabi_fsub>
 800b382:	4601      	mov	r1, r0
 800b384:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800b388:	f7f5 fb64 	bl	8000a54 <__aeabi_fsub>
 800b38c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b390:	4b13      	ldr	r3, [pc, #76]	; (800b3e0 <__kernel_cosf+0xf8>)
 800b392:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800b396:	429c      	cmp	r4, r3
 800b398:	bfcc      	ite	gt
 800b39a:	4c12      	ldrgt	r4, [pc, #72]	; (800b3e4 <__kernel_cosf+0xfc>)
 800b39c:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 800b3a0:	4621      	mov	r1, r4
 800b3a2:	f7f5 fb57 	bl	8000a54 <__aeabi_fsub>
 800b3a6:	4621      	mov	r1, r4
 800b3a8:	4606      	mov	r6, r0
 800b3aa:	4638      	mov	r0, r7
 800b3ac:	f7f5 fb52 	bl	8000a54 <__aeabi_fsub>
 800b3b0:	4629      	mov	r1, r5
 800b3b2:	f7f5 fb4f 	bl	8000a54 <__aeabi_fsub>
 800b3b6:	4601      	mov	r1, r0
 800b3b8:	4630      	mov	r0, r6
 800b3ba:	e7e5      	b.n	800b388 <__kernel_cosf+0xa0>
 800b3bc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800b3c0:	e7e4      	b.n	800b38c <__kernel_cosf+0xa4>
 800b3c2:	bf00      	nop
 800b3c4:	ad47d74e 	.word	0xad47d74e
 800b3c8:	310f74f6 	.word	0x310f74f6
 800b3cc:	3493f27c 	.word	0x3493f27c
 800b3d0:	37d00d01 	.word	0x37d00d01
 800b3d4:	3ab60b61 	.word	0x3ab60b61
 800b3d8:	3d2aaaab 	.word	0x3d2aaaab
 800b3dc:	3e999999 	.word	0x3e999999
 800b3e0:	3f480000 	.word	0x3f480000
 800b3e4:	3e900000 	.word	0x3e900000

0800b3e8 <__kernel_rem_pio2f>:
 800b3e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3ec:	b0db      	sub	sp, #364	; 0x16c
 800b3ee:	9202      	str	r2, [sp, #8]
 800b3f0:	9304      	str	r3, [sp, #16]
 800b3f2:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800b3f4:	4bc5      	ldr	r3, [pc, #788]	; (800b70c <__kernel_rem_pio2f+0x324>)
 800b3f6:	9005      	str	r0, [sp, #20]
 800b3f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3fc:	9100      	str	r1, [sp, #0]
 800b3fe:	9301      	str	r3, [sp, #4]
 800b400:	9b04      	ldr	r3, [sp, #16]
 800b402:	3b01      	subs	r3, #1
 800b404:	9303      	str	r3, [sp, #12]
 800b406:	9b02      	ldr	r3, [sp, #8]
 800b408:	1d1a      	adds	r2, r3, #4
 800b40a:	f2c0 809b 	blt.w	800b544 <__kernel_rem_pio2f+0x15c>
 800b40e:	1edc      	subs	r4, r3, #3
 800b410:	bf48      	it	mi
 800b412:	1d1c      	addmi	r4, r3, #4
 800b414:	10e4      	asrs	r4, r4, #3
 800b416:	2500      	movs	r5, #0
 800b418:	f04f 0a00 	mov.w	sl, #0
 800b41c:	1c67      	adds	r7, r4, #1
 800b41e:	00fb      	lsls	r3, r7, #3
 800b420:	9306      	str	r3, [sp, #24]
 800b422:	9b02      	ldr	r3, [sp, #8]
 800b424:	9a03      	ldr	r2, [sp, #12]
 800b426:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 800b42a:	9b01      	ldr	r3, [sp, #4]
 800b42c:	1aa6      	subs	r6, r4, r2
 800b42e:	eb03 0802 	add.w	r8, r3, r2
 800b432:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800b434:	f10d 0b78 	add.w	fp, sp, #120	; 0x78
 800b438:	eb03 0986 	add.w	r9, r3, r6, lsl #2
 800b43c:	4545      	cmp	r5, r8
 800b43e:	f340 8083 	ble.w	800b548 <__kernel_rem_pio2f+0x160>
 800b442:	f04f 0800 	mov.w	r8, #0
 800b446:	f04f 0b00 	mov.w	fp, #0
 800b44a:	9b04      	ldr	r3, [sp, #16]
 800b44c:	aa1e      	add	r2, sp, #120	; 0x78
 800b44e:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800b452:	ab46      	add	r3, sp, #280	; 0x118
 800b454:	9a01      	ldr	r2, [sp, #4]
 800b456:	4590      	cmp	r8, r2
 800b458:	f340 809c 	ble.w	800b594 <__kernel_rem_pio2f+0x1ac>
 800b45c:	4613      	mov	r3, r2
 800b45e:	aa0a      	add	r2, sp, #40	; 0x28
 800b460:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b464:	9308      	str	r3, [sp, #32]
 800b466:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800b468:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b46c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b470:	9307      	str	r3, [sp, #28]
 800b472:	ad0a      	add	r5, sp, #40	; 0x28
 800b474:	462e      	mov	r6, r5
 800b476:	46c3      	mov	fp, r8
 800b478:	f04f 4987 	mov.w	r9, #1132462080	; 0x43800000
 800b47c:	ab5a      	add	r3, sp, #360	; 0x168
 800b47e:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 800b482:	f853 4c50 	ldr.w	r4, [r3, #-80]
 800b486:	f50d 7a8c 	add.w	sl, sp, #280	; 0x118
 800b48a:	f1bb 0f00 	cmp.w	fp, #0
 800b48e:	f300 8086 	bgt.w	800b59e <__kernel_rem_pio2f+0x1b6>
 800b492:	4639      	mov	r1, r7
 800b494:	4620      	mov	r0, r4
 800b496:	f000 fb19 	bl	800bacc <scalbnf>
 800b49a:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 800b49e:	4604      	mov	r4, r0
 800b4a0:	f7f4 fff4 	bl	800048c <__aeabi_fmul>
 800b4a4:	f000 fad0 	bl	800ba48 <floorf>
 800b4a8:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800b4ac:	f7f4 ffee 	bl	800048c <__aeabi_fmul>
 800b4b0:	4601      	mov	r1, r0
 800b4b2:	4620      	mov	r0, r4
 800b4b4:	f7f5 face 	bl	8000a54 <__aeabi_fsub>
 800b4b8:	4604      	mov	r4, r0
 800b4ba:	f7f5 fc4b 	bl	8000d54 <__aeabi_f2iz>
 800b4be:	4606      	mov	r6, r0
 800b4c0:	f7f5 fb7e 	bl	8000bc0 <__aeabi_i2f>
 800b4c4:	4601      	mov	r1, r0
 800b4c6:	4620      	mov	r0, r4
 800b4c8:	f7f5 fac4 	bl	8000a54 <__aeabi_fsub>
 800b4cc:	2f00      	cmp	r7, #0
 800b4ce:	4681      	mov	r9, r0
 800b4d0:	f340 8084 	ble.w	800b5dc <__kernel_rem_pio2f+0x1f4>
 800b4d4:	f108 32ff 	add.w	r2, r8, #4294967295
 800b4d8:	ab0a      	add	r3, sp, #40	; 0x28
 800b4da:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 800b4de:	f1c7 0108 	rsb	r1, r7, #8
 800b4e2:	fa44 f301 	asr.w	r3, r4, r1
 800b4e6:	441e      	add	r6, r3
 800b4e8:	408b      	lsls	r3, r1
 800b4ea:	1ae4      	subs	r4, r4, r3
 800b4ec:	f1c7 0007 	rsb	r0, r7, #7
 800b4f0:	ab0a      	add	r3, sp, #40	; 0x28
 800b4f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b4f6:	4104      	asrs	r4, r0
 800b4f8:	2c00      	cmp	r4, #0
 800b4fa:	dd7e      	ble.n	800b5fa <__kernel_rem_pio2f+0x212>
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	4692      	mov	sl, r2
 800b500:	3601      	adds	r6, #1
 800b502:	4590      	cmp	r8, r2
 800b504:	f300 80b0 	bgt.w	800b668 <__kernel_rem_pio2f+0x280>
 800b508:	2f00      	cmp	r7, #0
 800b50a:	dd05      	ble.n	800b518 <__kernel_rem_pio2f+0x130>
 800b50c:	2f01      	cmp	r7, #1
 800b50e:	f000 80bd 	beq.w	800b68c <__kernel_rem_pio2f+0x2a4>
 800b512:	2f02      	cmp	r7, #2
 800b514:	f000 80c5 	beq.w	800b6a2 <__kernel_rem_pio2f+0x2ba>
 800b518:	2c02      	cmp	r4, #2
 800b51a:	d16e      	bne.n	800b5fa <__kernel_rem_pio2f+0x212>
 800b51c:	4649      	mov	r1, r9
 800b51e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800b522:	f7f5 fa97 	bl	8000a54 <__aeabi_fsub>
 800b526:	4681      	mov	r9, r0
 800b528:	f1ba 0f00 	cmp.w	sl, #0
 800b52c:	d065      	beq.n	800b5fa <__kernel_rem_pio2f+0x212>
 800b52e:	4639      	mov	r1, r7
 800b530:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800b534:	f000 faca 	bl	800bacc <scalbnf>
 800b538:	4601      	mov	r1, r0
 800b53a:	4648      	mov	r0, r9
 800b53c:	f7f5 fa8a 	bl	8000a54 <__aeabi_fsub>
 800b540:	4681      	mov	r9, r0
 800b542:	e05a      	b.n	800b5fa <__kernel_rem_pio2f+0x212>
 800b544:	2400      	movs	r4, #0
 800b546:	e766      	b.n	800b416 <__kernel_rem_pio2f+0x2e>
 800b548:	42ee      	cmn	r6, r5
 800b54a:	d407      	bmi.n	800b55c <__kernel_rem_pio2f+0x174>
 800b54c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b550:	f7f5 fb36 	bl	8000bc0 <__aeabi_i2f>
 800b554:	f84b 0025 	str.w	r0, [fp, r5, lsl #2]
 800b558:	3501      	adds	r5, #1
 800b55a:	e76f      	b.n	800b43c <__kernel_rem_pio2f+0x54>
 800b55c:	4650      	mov	r0, sl
 800b55e:	e7f9      	b.n	800b554 <__kernel_rem_pio2f+0x16c>
 800b560:	9b05      	ldr	r3, [sp, #20]
 800b562:	f8da 1000 	ldr.w	r1, [sl]
 800b566:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 800b56a:	f7f4 ff8f 	bl	800048c <__aeabi_fmul>
 800b56e:	4601      	mov	r1, r0
 800b570:	4630      	mov	r0, r6
 800b572:	f7f5 fa71 	bl	8000a58 <__addsf3>
 800b576:	4606      	mov	r6, r0
 800b578:	f109 0901 	add.w	r9, r9, #1
 800b57c:	ab46      	add	r3, sp, #280	; 0x118
 800b57e:	9a03      	ldr	r2, [sp, #12]
 800b580:	f1aa 0a04 	sub.w	sl, sl, #4
 800b584:	4591      	cmp	r9, r2
 800b586:	ddeb      	ble.n	800b560 <__kernel_rem_pio2f+0x178>
 800b588:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800b58c:	3504      	adds	r5, #4
 800b58e:	f108 0801 	add.w	r8, r8, #1
 800b592:	e75f      	b.n	800b454 <__kernel_rem_pio2f+0x6c>
 800b594:	46aa      	mov	sl, r5
 800b596:	465e      	mov	r6, fp
 800b598:	f04f 0900 	mov.w	r9, #0
 800b59c:	e7ef      	b.n	800b57e <__kernel_rem_pio2f+0x196>
 800b59e:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800b5a2:	4620      	mov	r0, r4
 800b5a4:	f7f4 ff72 	bl	800048c <__aeabi_fmul>
 800b5a8:	f7f5 fbd4 	bl	8000d54 <__aeabi_f2iz>
 800b5ac:	f7f5 fb08 	bl	8000bc0 <__aeabi_i2f>
 800b5b0:	4649      	mov	r1, r9
 800b5b2:	9009      	str	r0, [sp, #36]	; 0x24
 800b5b4:	f7f4 ff6a 	bl	800048c <__aeabi_fmul>
 800b5b8:	4601      	mov	r1, r0
 800b5ba:	4620      	mov	r0, r4
 800b5bc:	f7f5 fa4a 	bl	8000a54 <__aeabi_fsub>
 800b5c0:	f7f5 fbc8 	bl	8000d54 <__aeabi_f2iz>
 800b5c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5c6:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b5ca:	f846 0b04 	str.w	r0, [r6], #4
 800b5ce:	f85a 102b 	ldr.w	r1, [sl, fp, lsl #2]
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	f7f5 fa40 	bl	8000a58 <__addsf3>
 800b5d8:	4604      	mov	r4, r0
 800b5da:	e756      	b.n	800b48a <__kernel_rem_pio2f+0xa2>
 800b5dc:	d106      	bne.n	800b5ec <__kernel_rem_pio2f+0x204>
 800b5de:	f108 33ff 	add.w	r3, r8, #4294967295
 800b5e2:	aa0a      	add	r2, sp, #40	; 0x28
 800b5e4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b5e8:	1224      	asrs	r4, r4, #8
 800b5ea:	e785      	b.n	800b4f8 <__kernel_rem_pio2f+0x110>
 800b5ec:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800b5f0:	f7f5 fb9c 	bl	8000d2c <__aeabi_fcmpge>
 800b5f4:	4604      	mov	r4, r0
 800b5f6:	2800      	cmp	r0, #0
 800b5f8:	d134      	bne.n	800b664 <__kernel_rem_pio2f+0x27c>
 800b5fa:	2100      	movs	r1, #0
 800b5fc:	4648      	mov	r0, r9
 800b5fe:	f7f5 fb77 	bl	8000cf0 <__aeabi_fcmpeq>
 800b602:	2800      	cmp	r0, #0
 800b604:	f000 809a 	beq.w	800b73c <__kernel_rem_pio2f+0x354>
 800b608:	f108 35ff 	add.w	r5, r8, #4294967295
 800b60c:	462b      	mov	r3, r5
 800b60e:	2200      	movs	r2, #0
 800b610:	9901      	ldr	r1, [sp, #4]
 800b612:	428b      	cmp	r3, r1
 800b614:	da4d      	bge.n	800b6b2 <__kernel_rem_pio2f+0x2ca>
 800b616:	2a00      	cmp	r2, #0
 800b618:	d07c      	beq.n	800b714 <__kernel_rem_pio2f+0x32c>
 800b61a:	ab0a      	add	r3, sp, #40	; 0x28
 800b61c:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800b620:	3f08      	subs	r7, #8
 800b622:	2b00      	cmp	r3, #0
 800b624:	f000 8088 	beq.w	800b738 <__kernel_rem_pio2f+0x350>
 800b628:	4639      	mov	r1, r7
 800b62a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800b62e:	f000 fa4d 	bl	800bacc <scalbnf>
 800b632:	46aa      	mov	sl, r5
 800b634:	4681      	mov	r9, r0
 800b636:	f04f 586e 	mov.w	r8, #998244352	; 0x3b800000
 800b63a:	af46      	add	r7, sp, #280	; 0x118
 800b63c:	f1ba 0f00 	cmp.w	sl, #0
 800b640:	f280 80b1 	bge.w	800b7a6 <__kernel_rem_pio2f+0x3be>
 800b644:	46a9      	mov	r9, r5
 800b646:	f04f 0a00 	mov.w	sl, #0
 800b64a:	2200      	movs	r2, #0
 800b64c:	f1b9 0f00 	cmp.w	r9, #0
 800b650:	f2c0 80db 	blt.w	800b80a <__kernel_rem_pio2f+0x422>
 800b654:	a946      	add	r1, sp, #280	; 0x118
 800b656:	4617      	mov	r7, r2
 800b658:	f04f 0800 	mov.w	r8, #0
 800b65c:	4b2c      	ldr	r3, [pc, #176]	; (800b710 <__kernel_rem_pio2f+0x328>)
 800b65e:	eb01 0b89 	add.w	fp, r1, r9, lsl #2
 800b662:	e0c3      	b.n	800b7ec <__kernel_rem_pio2f+0x404>
 800b664:	2402      	movs	r4, #2
 800b666:	e749      	b.n	800b4fc <__kernel_rem_pio2f+0x114>
 800b668:	682b      	ldr	r3, [r5, #0]
 800b66a:	f1ba 0f00 	cmp.w	sl, #0
 800b66e:	d108      	bne.n	800b682 <__kernel_rem_pio2f+0x29a>
 800b670:	b11b      	cbz	r3, 800b67a <__kernel_rem_pio2f+0x292>
 800b672:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800b676:	602b      	str	r3, [r5, #0]
 800b678:	2301      	movs	r3, #1
 800b67a:	469a      	mov	sl, r3
 800b67c:	3201      	adds	r2, #1
 800b67e:	3504      	adds	r5, #4
 800b680:	e73f      	b.n	800b502 <__kernel_rem_pio2f+0x11a>
 800b682:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800b686:	602b      	str	r3, [r5, #0]
 800b688:	4653      	mov	r3, sl
 800b68a:	e7f6      	b.n	800b67a <__kernel_rem_pio2f+0x292>
 800b68c:	f108 32ff 	add.w	r2, r8, #4294967295
 800b690:	ab0a      	add	r3, sp, #40	; 0x28
 800b692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b696:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b69a:	a90a      	add	r1, sp, #40	; 0x28
 800b69c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b6a0:	e73a      	b.n	800b518 <__kernel_rem_pio2f+0x130>
 800b6a2:	f108 32ff 	add.w	r2, r8, #4294967295
 800b6a6:	ab0a      	add	r3, sp, #40	; 0x28
 800b6a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b6b0:	e7f3      	b.n	800b69a <__kernel_rem_pio2f+0x2b2>
 800b6b2:	a90a      	add	r1, sp, #40	; 0x28
 800b6b4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b6b8:	3b01      	subs	r3, #1
 800b6ba:	430a      	orrs	r2, r1
 800b6bc:	e7a8      	b.n	800b610 <__kernel_rem_pio2f+0x228>
 800b6be:	3301      	adds	r3, #1
 800b6c0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800b6c4:	2900      	cmp	r1, #0
 800b6c6:	d0fa      	beq.n	800b6be <__kernel_rem_pio2f+0x2d6>
 800b6c8:	9a04      	ldr	r2, [sp, #16]
 800b6ca:	f108 0501 	add.w	r5, r8, #1
 800b6ce:	eb08 0402 	add.w	r4, r8, r2
 800b6d2:	aa1e      	add	r2, sp, #120	; 0x78
 800b6d4:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800b6d8:	4498      	add	r8, r3
 800b6da:	f50d 798c 	add.w	r9, sp, #280	; 0x118
 800b6de:	45a8      	cmp	r8, r5
 800b6e0:	f6ff aec7 	blt.w	800b472 <__kernel_rem_pio2f+0x8a>
 800b6e4:	9b07      	ldr	r3, [sp, #28]
 800b6e6:	46a3      	mov	fp, r4
 800b6e8:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b6ec:	f7f5 fa68 	bl	8000bc0 <__aeabi_i2f>
 800b6f0:	f04f 0a00 	mov.w	sl, #0
 800b6f4:	2600      	movs	r6, #0
 800b6f6:	f84b 0b04 	str.w	r0, [fp], #4
 800b6fa:	9b03      	ldr	r3, [sp, #12]
 800b6fc:	459a      	cmp	sl, r3
 800b6fe:	dd0c      	ble.n	800b71a <__kernel_rem_pio2f+0x332>
 800b700:	f849 6025 	str.w	r6, [r9, r5, lsl #2]
 800b704:	465c      	mov	r4, fp
 800b706:	3501      	adds	r5, #1
 800b708:	e7e9      	b.n	800b6de <__kernel_rem_pio2f+0x2f6>
 800b70a:	bf00      	nop
 800b70c:	0800c78c 	.word	0x0800c78c
 800b710:	0800c760 	.word	0x0800c760
 800b714:	2301      	movs	r3, #1
 800b716:	9a08      	ldr	r2, [sp, #32]
 800b718:	e7d2      	b.n	800b6c0 <__kernel_rem_pio2f+0x2d8>
 800b71a:	9b05      	ldr	r3, [sp, #20]
 800b71c:	f854 0904 	ldr.w	r0, [r4], #-4
 800b720:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 800b724:	f7f4 feb2 	bl	800048c <__aeabi_fmul>
 800b728:	4601      	mov	r1, r0
 800b72a:	4630      	mov	r0, r6
 800b72c:	f7f5 f994 	bl	8000a58 <__addsf3>
 800b730:	f10a 0a01 	add.w	sl, sl, #1
 800b734:	4606      	mov	r6, r0
 800b736:	e7e0      	b.n	800b6fa <__kernel_rem_pio2f+0x312>
 800b738:	3d01      	subs	r5, #1
 800b73a:	e76e      	b.n	800b61a <__kernel_rem_pio2f+0x232>
 800b73c:	9b06      	ldr	r3, [sp, #24]
 800b73e:	9a02      	ldr	r2, [sp, #8]
 800b740:	4648      	mov	r0, r9
 800b742:	1a99      	subs	r1, r3, r2
 800b744:	f000 f9c2 	bl	800bacc <scalbnf>
 800b748:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800b74c:	4605      	mov	r5, r0
 800b74e:	f7f5 faed 	bl	8000d2c <__aeabi_fcmpge>
 800b752:	b300      	cbz	r0, 800b796 <__kernel_rem_pio2f+0x3ae>
 800b754:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800b758:	4628      	mov	r0, r5
 800b75a:	f7f4 fe97 	bl	800048c <__aeabi_fmul>
 800b75e:	f7f5 faf9 	bl	8000d54 <__aeabi_f2iz>
 800b762:	f7f5 fa2d 	bl	8000bc0 <__aeabi_i2f>
 800b766:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800b76a:	4681      	mov	r9, r0
 800b76c:	f7f4 fe8e 	bl	800048c <__aeabi_fmul>
 800b770:	4601      	mov	r1, r0
 800b772:	4628      	mov	r0, r5
 800b774:	f7f5 f96e 	bl	8000a54 <__aeabi_fsub>
 800b778:	f7f5 faec 	bl	8000d54 <__aeabi_f2iz>
 800b77c:	ab0a      	add	r3, sp, #40	; 0x28
 800b77e:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800b782:	4648      	mov	r0, r9
 800b784:	f7f5 fae6 	bl	8000d54 <__aeabi_f2iz>
 800b788:	f108 0501 	add.w	r5, r8, #1
 800b78c:	ab0a      	add	r3, sp, #40	; 0x28
 800b78e:	3708      	adds	r7, #8
 800b790:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800b794:	e748      	b.n	800b628 <__kernel_rem_pio2f+0x240>
 800b796:	4628      	mov	r0, r5
 800b798:	f7f5 fadc 	bl	8000d54 <__aeabi_f2iz>
 800b79c:	ab0a      	add	r3, sp, #40	; 0x28
 800b79e:	4645      	mov	r5, r8
 800b7a0:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800b7a4:	e740      	b.n	800b628 <__kernel_rem_pio2f+0x240>
 800b7a6:	ab0a      	add	r3, sp, #40	; 0x28
 800b7a8:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800b7ac:	f7f5 fa08 	bl	8000bc0 <__aeabi_i2f>
 800b7b0:	4649      	mov	r1, r9
 800b7b2:	f7f4 fe6b 	bl	800048c <__aeabi_fmul>
 800b7b6:	4641      	mov	r1, r8
 800b7b8:	f847 002a 	str.w	r0, [r7, sl, lsl #2]
 800b7bc:	4648      	mov	r0, r9
 800b7be:	f7f4 fe65 	bl	800048c <__aeabi_fmul>
 800b7c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b7c6:	4681      	mov	r9, r0
 800b7c8:	e738      	b.n	800b63c <__kernel_rem_pio2f+0x254>
 800b7ca:	f853 0b04 	ldr.w	r0, [r3], #4
 800b7ce:	f85b 1b04 	ldr.w	r1, [fp], #4
 800b7d2:	9203      	str	r2, [sp, #12]
 800b7d4:	9302      	str	r3, [sp, #8]
 800b7d6:	f7f4 fe59 	bl	800048c <__aeabi_fmul>
 800b7da:	4601      	mov	r1, r0
 800b7dc:	4638      	mov	r0, r7
 800b7de:	f7f5 f93b 	bl	8000a58 <__addsf3>
 800b7e2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b7e6:	4607      	mov	r7, r0
 800b7e8:	f108 0801 	add.w	r8, r8, #1
 800b7ec:	9901      	ldr	r1, [sp, #4]
 800b7ee:	4588      	cmp	r8, r1
 800b7f0:	dc01      	bgt.n	800b7f6 <__kernel_rem_pio2f+0x40e>
 800b7f2:	45c2      	cmp	sl, r8
 800b7f4:	dae9      	bge.n	800b7ca <__kernel_rem_pio2f+0x3e2>
 800b7f6:	ab5a      	add	r3, sp, #360	; 0x168
 800b7f8:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800b7fc:	f843 7ca0 	str.w	r7, [r3, #-160]
 800b800:	f109 39ff 	add.w	r9, r9, #4294967295
 800b804:	f10a 0a01 	add.w	sl, sl, #1
 800b808:	e720      	b.n	800b64c <__kernel_rem_pio2f+0x264>
 800b80a:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800b80c:	2b02      	cmp	r3, #2
 800b80e:	dc07      	bgt.n	800b820 <__kernel_rem_pio2f+0x438>
 800b810:	2b00      	cmp	r3, #0
 800b812:	dc4d      	bgt.n	800b8b0 <__kernel_rem_pio2f+0x4c8>
 800b814:	d02e      	beq.n	800b874 <__kernel_rem_pio2f+0x48c>
 800b816:	f006 0007 	and.w	r0, r6, #7
 800b81a:	b05b      	add	sp, #364	; 0x16c
 800b81c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b820:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800b822:	2b03      	cmp	r3, #3
 800b824:	d1f7      	bne.n	800b816 <__kernel_rem_pio2f+0x42e>
 800b826:	f10d 0bc8 	add.w	fp, sp, #200	; 0xc8
 800b82a:	eb0b 0785 	add.w	r7, fp, r5, lsl #2
 800b82e:	46b8      	mov	r8, r7
 800b830:	46aa      	mov	sl, r5
 800b832:	f1ba 0f00 	cmp.w	sl, #0
 800b836:	dc48      	bgt.n	800b8ca <__kernel_rem_pio2f+0x4e2>
 800b838:	46a9      	mov	r9, r5
 800b83a:	f1b9 0f01 	cmp.w	r9, #1
 800b83e:	dc5f      	bgt.n	800b900 <__kernel_rem_pio2f+0x518>
 800b840:	2000      	movs	r0, #0
 800b842:	2d01      	cmp	r5, #1
 800b844:	dc75      	bgt.n	800b932 <__kernel_rem_pio2f+0x54a>
 800b846:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800b848:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 800b84a:	2c00      	cmp	r4, #0
 800b84c:	d177      	bne.n	800b93e <__kernel_rem_pio2f+0x556>
 800b84e:	9900      	ldr	r1, [sp, #0]
 800b850:	600a      	str	r2, [r1, #0]
 800b852:	460a      	mov	r2, r1
 800b854:	604b      	str	r3, [r1, #4]
 800b856:	6090      	str	r0, [r2, #8]
 800b858:	e7dd      	b.n	800b816 <__kernel_rem_pio2f+0x42e>
 800b85a:	f857 1025 	ldr.w	r1, [r7, r5, lsl #2]
 800b85e:	f7f5 f8fb 	bl	8000a58 <__addsf3>
 800b862:	3d01      	subs	r5, #1
 800b864:	2d00      	cmp	r5, #0
 800b866:	daf8      	bge.n	800b85a <__kernel_rem_pio2f+0x472>
 800b868:	b10c      	cbz	r4, 800b86e <__kernel_rem_pio2f+0x486>
 800b86a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800b86e:	9b00      	ldr	r3, [sp, #0]
 800b870:	6018      	str	r0, [r3, #0]
 800b872:	e7d0      	b.n	800b816 <__kernel_rem_pio2f+0x42e>
 800b874:	2000      	movs	r0, #0
 800b876:	af32      	add	r7, sp, #200	; 0xc8
 800b878:	e7f4      	b.n	800b864 <__kernel_rem_pio2f+0x47c>
 800b87a:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 800b87e:	f7f5 f8eb 	bl	8000a58 <__addsf3>
 800b882:	3f01      	subs	r7, #1
 800b884:	2f00      	cmp	r7, #0
 800b886:	daf8      	bge.n	800b87a <__kernel_rem_pio2f+0x492>
 800b888:	b1bc      	cbz	r4, 800b8ba <__kernel_rem_pio2f+0x4d2>
 800b88a:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 800b88e:	9a00      	ldr	r2, [sp, #0]
 800b890:	4601      	mov	r1, r0
 800b892:	6013      	str	r3, [r2, #0]
 800b894:	9832      	ldr	r0, [sp, #200]	; 0xc8
 800b896:	f7f5 f8dd 	bl	8000a54 <__aeabi_fsub>
 800b89a:	2701      	movs	r7, #1
 800b89c:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 800b8a0:	42bd      	cmp	r5, r7
 800b8a2:	da0c      	bge.n	800b8be <__kernel_rem_pio2f+0x4d6>
 800b8a4:	b10c      	cbz	r4, 800b8aa <__kernel_rem_pio2f+0x4c2>
 800b8a6:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800b8aa:	9b00      	ldr	r3, [sp, #0]
 800b8ac:	6058      	str	r0, [r3, #4]
 800b8ae:	e7b2      	b.n	800b816 <__kernel_rem_pio2f+0x42e>
 800b8b0:	462f      	mov	r7, r5
 800b8b2:	2000      	movs	r0, #0
 800b8b4:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 800b8b8:	e7e4      	b.n	800b884 <__kernel_rem_pio2f+0x49c>
 800b8ba:	4603      	mov	r3, r0
 800b8bc:	e7e7      	b.n	800b88e <__kernel_rem_pio2f+0x4a6>
 800b8be:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 800b8c2:	f7f5 f8c9 	bl	8000a58 <__addsf3>
 800b8c6:	3701      	adds	r7, #1
 800b8c8:	e7ea      	b.n	800b8a0 <__kernel_rem_pio2f+0x4b8>
 800b8ca:	f8d8 3000 	ldr.w	r3, [r8]
 800b8ce:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800b8d2:	4619      	mov	r1, r3
 800b8d4:	4610      	mov	r0, r2
 800b8d6:	9302      	str	r3, [sp, #8]
 800b8d8:	9201      	str	r2, [sp, #4]
 800b8da:	f7f5 f8bd 	bl	8000a58 <__addsf3>
 800b8de:	9a01      	ldr	r2, [sp, #4]
 800b8e0:	4601      	mov	r1, r0
 800b8e2:	4681      	mov	r9, r0
 800b8e4:	4610      	mov	r0, r2
 800b8e6:	f7f5 f8b5 	bl	8000a54 <__aeabi_fsub>
 800b8ea:	9b02      	ldr	r3, [sp, #8]
 800b8ec:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b8f0:	4619      	mov	r1, r3
 800b8f2:	f7f5 f8b1 	bl	8000a58 <__addsf3>
 800b8f6:	f848 0904 	str.w	r0, [r8], #-4
 800b8fa:	f8c8 9000 	str.w	r9, [r8]
 800b8fe:	e798      	b.n	800b832 <__kernel_rem_pio2f+0x44a>
 800b900:	f857 3c04 	ldr.w	r3, [r7, #-4]
 800b904:	f8d7 a000 	ldr.w	sl, [r7]
 800b908:	4618      	mov	r0, r3
 800b90a:	4651      	mov	r1, sl
 800b90c:	9301      	str	r3, [sp, #4]
 800b90e:	f7f5 f8a3 	bl	8000a58 <__addsf3>
 800b912:	9b01      	ldr	r3, [sp, #4]
 800b914:	4601      	mov	r1, r0
 800b916:	4680      	mov	r8, r0
 800b918:	4618      	mov	r0, r3
 800b91a:	f7f5 f89b 	bl	8000a54 <__aeabi_fsub>
 800b91e:	4651      	mov	r1, sl
 800b920:	f7f5 f89a 	bl	8000a58 <__addsf3>
 800b924:	f847 0904 	str.w	r0, [r7], #-4
 800b928:	f109 39ff 	add.w	r9, r9, #4294967295
 800b92c:	f8c7 8000 	str.w	r8, [r7]
 800b930:	e783      	b.n	800b83a <__kernel_rem_pio2f+0x452>
 800b932:	f85b 1025 	ldr.w	r1, [fp, r5, lsl #2]
 800b936:	f7f5 f88f 	bl	8000a58 <__addsf3>
 800b93a:	3d01      	subs	r5, #1
 800b93c:	e781      	b.n	800b842 <__kernel_rem_pio2f+0x45a>
 800b93e:	9900      	ldr	r1, [sp, #0]
 800b940:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 800b944:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b948:	600a      	str	r2, [r1, #0]
 800b94a:	604b      	str	r3, [r1, #4]
 800b94c:	460a      	mov	r2, r1
 800b94e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800b952:	e780      	b.n	800b856 <__kernel_rem_pio2f+0x46e>

0800b954 <__kernel_sinf>:
 800b954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b958:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800b95c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800b960:	4604      	mov	r4, r0
 800b962:	460f      	mov	r7, r1
 800b964:	4691      	mov	r9, r2
 800b966:	da03      	bge.n	800b970 <__kernel_sinf+0x1c>
 800b968:	f7f5 f9f4 	bl	8000d54 <__aeabi_f2iz>
 800b96c:	2800      	cmp	r0, #0
 800b96e:	d035      	beq.n	800b9dc <__kernel_sinf+0x88>
 800b970:	4621      	mov	r1, r4
 800b972:	4620      	mov	r0, r4
 800b974:	f7f4 fd8a 	bl	800048c <__aeabi_fmul>
 800b978:	4605      	mov	r5, r0
 800b97a:	4601      	mov	r1, r0
 800b97c:	4620      	mov	r0, r4
 800b97e:	f7f4 fd85 	bl	800048c <__aeabi_fmul>
 800b982:	4929      	ldr	r1, [pc, #164]	; (800ba28 <__kernel_sinf+0xd4>)
 800b984:	4606      	mov	r6, r0
 800b986:	4628      	mov	r0, r5
 800b988:	f7f4 fd80 	bl	800048c <__aeabi_fmul>
 800b98c:	4927      	ldr	r1, [pc, #156]	; (800ba2c <__kernel_sinf+0xd8>)
 800b98e:	f7f5 f861 	bl	8000a54 <__aeabi_fsub>
 800b992:	4629      	mov	r1, r5
 800b994:	f7f4 fd7a 	bl	800048c <__aeabi_fmul>
 800b998:	4925      	ldr	r1, [pc, #148]	; (800ba30 <__kernel_sinf+0xdc>)
 800b99a:	f7f5 f85d 	bl	8000a58 <__addsf3>
 800b99e:	4629      	mov	r1, r5
 800b9a0:	f7f4 fd74 	bl	800048c <__aeabi_fmul>
 800b9a4:	4923      	ldr	r1, [pc, #140]	; (800ba34 <__kernel_sinf+0xe0>)
 800b9a6:	f7f5 f855 	bl	8000a54 <__aeabi_fsub>
 800b9aa:	4629      	mov	r1, r5
 800b9ac:	f7f4 fd6e 	bl	800048c <__aeabi_fmul>
 800b9b0:	4921      	ldr	r1, [pc, #132]	; (800ba38 <__kernel_sinf+0xe4>)
 800b9b2:	f7f5 f851 	bl	8000a58 <__addsf3>
 800b9b6:	4680      	mov	r8, r0
 800b9b8:	f1b9 0f00 	cmp.w	r9, #0
 800b9bc:	d111      	bne.n	800b9e2 <__kernel_sinf+0x8e>
 800b9be:	4601      	mov	r1, r0
 800b9c0:	4628      	mov	r0, r5
 800b9c2:	f7f4 fd63 	bl	800048c <__aeabi_fmul>
 800b9c6:	491d      	ldr	r1, [pc, #116]	; (800ba3c <__kernel_sinf+0xe8>)
 800b9c8:	f7f5 f844 	bl	8000a54 <__aeabi_fsub>
 800b9cc:	4631      	mov	r1, r6
 800b9ce:	f7f4 fd5d 	bl	800048c <__aeabi_fmul>
 800b9d2:	4601      	mov	r1, r0
 800b9d4:	4620      	mov	r0, r4
 800b9d6:	f7f5 f83f 	bl	8000a58 <__addsf3>
 800b9da:	4604      	mov	r4, r0
 800b9dc:	4620      	mov	r0, r4
 800b9de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9e2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800b9e6:	4638      	mov	r0, r7
 800b9e8:	f7f4 fd50 	bl	800048c <__aeabi_fmul>
 800b9ec:	4641      	mov	r1, r8
 800b9ee:	4681      	mov	r9, r0
 800b9f0:	4630      	mov	r0, r6
 800b9f2:	f7f4 fd4b 	bl	800048c <__aeabi_fmul>
 800b9f6:	4601      	mov	r1, r0
 800b9f8:	4648      	mov	r0, r9
 800b9fa:	f7f5 f82b 	bl	8000a54 <__aeabi_fsub>
 800b9fe:	4629      	mov	r1, r5
 800ba00:	f7f4 fd44 	bl	800048c <__aeabi_fmul>
 800ba04:	4639      	mov	r1, r7
 800ba06:	f7f5 f825 	bl	8000a54 <__aeabi_fsub>
 800ba0a:	490c      	ldr	r1, [pc, #48]	; (800ba3c <__kernel_sinf+0xe8>)
 800ba0c:	4605      	mov	r5, r0
 800ba0e:	4630      	mov	r0, r6
 800ba10:	f7f4 fd3c 	bl	800048c <__aeabi_fmul>
 800ba14:	4601      	mov	r1, r0
 800ba16:	4628      	mov	r0, r5
 800ba18:	f7f5 f81e 	bl	8000a58 <__addsf3>
 800ba1c:	4601      	mov	r1, r0
 800ba1e:	4620      	mov	r0, r4
 800ba20:	f7f5 f818 	bl	8000a54 <__aeabi_fsub>
 800ba24:	e7d9      	b.n	800b9da <__kernel_sinf+0x86>
 800ba26:	bf00      	nop
 800ba28:	2f2ec9d3 	.word	0x2f2ec9d3
 800ba2c:	32d72f34 	.word	0x32d72f34
 800ba30:	3638ef1b 	.word	0x3638ef1b
 800ba34:	39500d01 	.word	0x39500d01
 800ba38:	3c088889 	.word	0x3c088889
 800ba3c:	3e2aaaab 	.word	0x3e2aaaab

0800ba40 <fabsf>:
 800ba40:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800ba44:	4770      	bx	lr
	...

0800ba48 <floorf>:
 800ba48:	b570      	push	{r4, r5, r6, lr}
 800ba4a:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 800ba4e:	3d7f      	subs	r5, #127	; 0x7f
 800ba50:	2d16      	cmp	r5, #22
 800ba52:	4601      	mov	r1, r0
 800ba54:	4604      	mov	r4, r0
 800ba56:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800ba5a:	dc26      	bgt.n	800baaa <floorf+0x62>
 800ba5c:	2d00      	cmp	r5, #0
 800ba5e:	da0e      	bge.n	800ba7e <floorf+0x36>
 800ba60:	4917      	ldr	r1, [pc, #92]	; (800bac0 <floorf+0x78>)
 800ba62:	f7f4 fff9 	bl	8000a58 <__addsf3>
 800ba66:	2100      	movs	r1, #0
 800ba68:	f7f5 f96a 	bl	8000d40 <__aeabi_fcmpgt>
 800ba6c:	b128      	cbz	r0, 800ba7a <floorf+0x32>
 800ba6e:	2c00      	cmp	r4, #0
 800ba70:	da23      	bge.n	800baba <floorf+0x72>
 800ba72:	4b14      	ldr	r3, [pc, #80]	; (800bac4 <floorf+0x7c>)
 800ba74:	2e00      	cmp	r6, #0
 800ba76:	bf18      	it	ne
 800ba78:	461c      	movne	r4, r3
 800ba7a:	4621      	mov	r1, r4
 800ba7c:	e01b      	b.n	800bab6 <floorf+0x6e>
 800ba7e:	4e12      	ldr	r6, [pc, #72]	; (800bac8 <floorf+0x80>)
 800ba80:	412e      	asrs	r6, r5
 800ba82:	4230      	tst	r0, r6
 800ba84:	d017      	beq.n	800bab6 <floorf+0x6e>
 800ba86:	490e      	ldr	r1, [pc, #56]	; (800bac0 <floorf+0x78>)
 800ba88:	f7f4 ffe6 	bl	8000a58 <__addsf3>
 800ba8c:	2100      	movs	r1, #0
 800ba8e:	f7f5 f957 	bl	8000d40 <__aeabi_fcmpgt>
 800ba92:	2800      	cmp	r0, #0
 800ba94:	d0f1      	beq.n	800ba7a <floorf+0x32>
 800ba96:	2c00      	cmp	r4, #0
 800ba98:	bfbe      	ittt	lt
 800ba9a:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 800ba9e:	fa43 f505 	asrlt.w	r5, r3, r5
 800baa2:	1964      	addlt	r4, r4, r5
 800baa4:	ea24 0406 	bic.w	r4, r4, r6
 800baa8:	e7e7      	b.n	800ba7a <floorf+0x32>
 800baaa:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800baae:	d302      	bcc.n	800bab6 <floorf+0x6e>
 800bab0:	f7f4 ffd2 	bl	8000a58 <__addsf3>
 800bab4:	4601      	mov	r1, r0
 800bab6:	4608      	mov	r0, r1
 800bab8:	bd70      	pop	{r4, r5, r6, pc}
 800baba:	2400      	movs	r4, #0
 800babc:	e7dd      	b.n	800ba7a <floorf+0x32>
 800babe:	bf00      	nop
 800bac0:	7149f2ca 	.word	0x7149f2ca
 800bac4:	bf800000 	.word	0xbf800000
 800bac8:	007fffff 	.word	0x007fffff

0800bacc <scalbnf>:
 800bacc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800bad0:	b538      	push	{r3, r4, r5, lr}
 800bad2:	4603      	mov	r3, r0
 800bad4:	460d      	mov	r5, r1
 800bad6:	4604      	mov	r4, r0
 800bad8:	d02a      	beq.n	800bb30 <scalbnf+0x64>
 800bada:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800bade:	d304      	bcc.n	800baea <scalbnf+0x1e>
 800bae0:	4601      	mov	r1, r0
 800bae2:	f7f4 ffb9 	bl	8000a58 <__addsf3>
 800bae6:	4603      	mov	r3, r0
 800bae8:	e022      	b.n	800bb30 <scalbnf+0x64>
 800baea:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 800baee:	d117      	bne.n	800bb20 <scalbnf+0x54>
 800baf0:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 800baf4:	f7f4 fcca 	bl	800048c <__aeabi_fmul>
 800baf8:	4a17      	ldr	r2, [pc, #92]	; (800bb58 <scalbnf+0x8c>)
 800bafa:	4603      	mov	r3, r0
 800bafc:	4295      	cmp	r5, r2
 800bafe:	db0b      	blt.n	800bb18 <scalbnf+0x4c>
 800bb00:	4604      	mov	r4, r0
 800bb02:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800bb06:	3a19      	subs	r2, #25
 800bb08:	442a      	add	r2, r5
 800bb0a:	2afe      	cmp	r2, #254	; 0xfe
 800bb0c:	dd0a      	ble.n	800bb24 <scalbnf+0x58>
 800bb0e:	4913      	ldr	r1, [pc, #76]	; (800bb5c <scalbnf+0x90>)
 800bb10:	4618      	mov	r0, r3
 800bb12:	f361 001e 	bfi	r0, r1, #0, #31
 800bb16:	e000      	b.n	800bb1a <scalbnf+0x4e>
 800bb18:	4911      	ldr	r1, [pc, #68]	; (800bb60 <scalbnf+0x94>)
 800bb1a:	f7f4 fcb7 	bl	800048c <__aeabi_fmul>
 800bb1e:	e7e2      	b.n	800bae6 <scalbnf+0x1a>
 800bb20:	0dd2      	lsrs	r2, r2, #23
 800bb22:	e7f1      	b.n	800bb08 <scalbnf+0x3c>
 800bb24:	2a00      	cmp	r2, #0
 800bb26:	dd05      	ble.n	800bb34 <scalbnf+0x68>
 800bb28:	f024 40ff 	bic.w	r0, r4, #2139095040	; 0x7f800000
 800bb2c:	ea40 53c2 	orr.w	r3, r0, r2, lsl #23
 800bb30:	4618      	mov	r0, r3
 800bb32:	bd38      	pop	{r3, r4, r5, pc}
 800bb34:	f112 0f16 	cmn.w	r2, #22
 800bb38:	da05      	bge.n	800bb46 <scalbnf+0x7a>
 800bb3a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800bb3e:	4295      	cmp	r5, r2
 800bb40:	dce5      	bgt.n	800bb0e <scalbnf+0x42>
 800bb42:	4907      	ldr	r1, [pc, #28]	; (800bb60 <scalbnf+0x94>)
 800bb44:	e7e4      	b.n	800bb10 <scalbnf+0x44>
 800bb46:	3219      	adds	r2, #25
 800bb48:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 800bb4c:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 800bb50:	ea44 50c2 	orr.w	r0, r4, r2, lsl #23
 800bb54:	e7e1      	b.n	800bb1a <scalbnf+0x4e>
 800bb56:	bf00      	nop
 800bb58:	ffff3cb0 	.word	0xffff3cb0
 800bb5c:	7149f2ca 	.word	0x7149f2ca
 800bb60:	0da24260 	.word	0x0da24260

0800bb64 <_init>:
 800bb64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb66:	bf00      	nop
 800bb68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb6a:	bc08      	pop	{r3}
 800bb6c:	469e      	mov	lr, r3
 800bb6e:	4770      	bx	lr

0800bb70 <_fini>:
 800bb70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb72:	bf00      	nop
 800bb74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb76:	bc08      	pop	{r3}
 800bb78:	469e      	mov	lr, r3
 800bb7a:	4770      	bx	lr
